{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>700</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N</var> 行 <var>M</var> 列のグリッドがあります．\nあなたはグリッドの各マスに <var>0</var> 以上 <var>2^K-1</var> 以下の整数を書き込み，以下の条件を満たしたいです．</p>\n<ul>\n<li>左上のマスを出発し，右または下に隣接するマスへの移動を繰り返して，右下のマスへと至るパスを考える．\nここで，通ったマス (始点終点を含む) に書かれた整数の総 <var>\\mathrm{XOR}</var> が <var>0</var> になるパスを，<strong>よい</strong>パスと呼ぶことにする．</li>\n<li>よいパスはちょうど <var>1</var> つだけ存在し，それは文字列 <var>S</var> が表すパスである．\n文字列 <var>S</var> が表すパスとは，各 <var>i</var> (<var>1 \\leq i \\leq N+M-2</var>) について，<var>i</var> 回目の移動の際，<var>S</var> の <var>i</var> 文字目が <code>R</code> なら右，<code>D</code> なら下に進むようなパスである．</li>\n</ul>\n<p>条件を満たす整数の書き込み方が存在するかどうか判定してください．</p>\n<p><var>1</var> つの入力ファイルにつき，<var>T</var> 個のテストケースを解いてください．</p>\n<details>\n    <summary>\n        ビット単位 <var>\\mathrm{XOR}</var> 演算とは\n    </summary>\n    <p>\n        非負整数 <var>A, B</var> のビット単位 <var>\\mathrm{XOR}</var> 、<var>A \\oplus B</var> は、以下のように定義されます。\n        </p><ul>\n            <li><var>A \\oplus B</var> を二進表記した際の <var>2^k</var> (<var>k \\geq 0</var>) の位の数は、<var>A, B</var> を二進表記した際の <var>2^k</var> の位の数のうち一方のみが <var>1</var> であれば <var>1</var>、そうでなければ <var>0</var> である。</li>\n        </ul>\n        例えば、<var>3 \\oplus 5 = 6</var> となります (二進表記すると: <var>011 \\oplus 101 = 110</var>)。<br>  \n        一般に <var>k</var> 個の非負整数 <var>p_1, p_2, p_3, \\dots, p_k</var> のビット単位 <var>\\mathrm{XOR}</var> は <var>(\\dots ((p_1 \\oplus p_2) \\oplus p_3) \\oplus \\dots \\oplus p_k)</var> と定義され、これは <var>p_1, p_2, p_3, \\dots, p_k</var> の順番によらないことが証明できます。  \n    <p></p>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq T \\leq 100</var></li>\n<li><var>2 \\leq N,M \\leq 30</var></li>\n<li><var>1 \\leq K \\leq 30</var></li>\n<li><var>S</var> はちょうど <var>N-1</var> 個の <code>D</code> と <var>M-1</var> 個の <code>R</code> からなる文字列</li>\n<li>入力される数はすべて整数</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる．</p>\n<pre><var>T</var>\n<var>case_1</var>\n<var>case_2</var>\n<var>\\vdots</var>\n<var>case_T</var>\n</pre>\n<p>各ケースは以下の形式で与えられる．</p>\n<pre><var>N</var> <var>M</var> <var>K</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>各ケースに対し，条件を満たす整数の書き込み方が存在する場合は <code>Yes</code> を，存在しないならば <code>No</code> を出力せよ．\n出力中の各文字は英大文字・小文字のいずれでもよい．</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>4\n2 2 1\nRD\n4 3 1\nRDDDR\n15 20 18\nDDRRRRRRRDDDDRRDDRDRRRRDDRDRDDRRR\n20 15 7\nDRRDDDDDRDDDRRDDRRRDRRRDDDDDRRRDD\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>Yes\nNo\nYes\nNo\n</pre>\n<p>例えば <var>1</var> ケース目については，以下のようなグリッドを作れば良いです．</p>\n<pre>11\n00\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a grid with <var>N</var> rows and <var>M</var> columns.\nYou want to write an integer between <var>0</var> and <var>2^K-1</var> in each square in the grid to satisfy the following condition.</p>\n<ul>\n<li>Consider a path that starts at the top-left square, repeatedly moves right or down to an adjacent square, and ends at the bottom-right square.\nSuch a path is said to be <strong>good</strong> if and only if the total <var>\\mathrm{XOR}</var> of the integers written on the squares visited (including the starting and ending points) is <var>0</var>.</li>\n<li>There is exactly one good path, which is the path represented by a string <var>S</var>.\nThe path represented by the string <var>S</var> is a path that, for each <var>i</var> (<var>1 \\leq i \\leq N+M-2</var>), the <var>i</var>-th move is right if the <var>i</var>-th character of <var>S</var> is <code>R</code> and down if that character is <code>D</code>.</li>\n</ul>\n<p>Determine whether there is a way to write integers that satisfies the condition.</p>\n<p>For each input file, solve <var>T</var> test cases.</p>\n<details>\n    <summary>\n        What is bitwise <var>\\mathrm{XOR}</var>?\n    </summary>\n    <p>\n        The bitwise <var>\\mathrm{XOR}</var> of non-negative integers <var>A</var> and <var>B</var>, <var>A \\oplus B</var>, is defined as follows.\n        </p><ul>\n            <li>When <var>A \\oplus B</var> is written in binary, the <var>k</var>-th lowest bit (<var>k \\geq 0</var>) is <var>1</var> if exactly one of the <var>k</var>-th lowest bits of <var>A</var> and <var>B</var> is <var>1</var>, and <var>0</var> otherwise.</li>\n        </ul>\n        For instance, <var>3 \\oplus 5 = 6</var> (in binary: <var>011 \\oplus 101 = 110</var>).<br>  \n        Generally, the bitwise <var>\\mathrm{XOR}</var> of <var>k</var> non-negative integers <var>p_1, p_2, p_3, \\dots, p_k</var> is defined as <var>(\\dots ((p_1 \\oplus p_2) \\oplus p_3) \\oplus \\dots \\oplus p_k)</var>, which can be proved to be independent of the order of <var>p_1, p_2, p_3, \\dots, p_k</var>.\n    <p></p>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq T \\leq 100</var></li>\n<li><var>2 \\leq N,M \\leq 30</var></li>\n<li><var>1 \\leq K \\leq 30</var></li>\n<li><var>S</var> is a string containing exactly <var>N-1</var> <code>D</code>s and <var>M-1</var> <code>R</code>s.</li>\n<li>All numbers in the input are integers.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>T</var>\n<var>case_1</var>\n<var>case_2</var>\n<var>\\vdots</var>\n<var>case_T</var>\n</pre>\n<p>Each case is in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>K</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each case, print <code>Yes</code> if there is a way to write integers that satisfies the condition, and <code>No</code> otherwise.\nEach character in the output may be either uppercase or lowercase.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n2 2 1\nRD\n4 3 1\nRDDDR\n15 20 18\nDDRRRRRRRDDDDRRDDRDRRRRDDRDRDDRRR\n20 15 7\nDRRDDDDDRDDDRRDDRRRDRRRDDDDDRRRDD\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\nNo\nYes\nNo\n</pre>\n<p>As an example, for the first case, you can make the grid as follows.</p>\n<pre>11\n00\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/agc060/tasks/agc060_b"}