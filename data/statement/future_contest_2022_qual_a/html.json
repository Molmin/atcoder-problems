{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>ストーリー</h3><p>F社のプロジェクトリーダーに就任したあなたの仕事は、チームメンバーに適切にタスクを割り振ることである。\n現在取り組んでいるプロジェクトはいくつかのタスクからなり、\n各チームメンバーの持つ技能レベルと各タスクごとの要求技能レベルに応じて、タスクの完了までにかかる日数の期待値が変化する。\n経験豊富なあなたは、各タスクの要求技能レベルを正確に把握することが出来るが、就任したばかりのため、各チームメンバーの技能レベルはまだ全く分かっていない。\nチームメンバーの技能レベルを徐々に見極めながら、適切にタスクを割り振ってほしい。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N</var> 個のタスクを <var>M</var> 人のチームメンバーに割り振りたい。\n各タスクは高々1人に割り振り、タスクが割り振られたチームメンバーにはそのタスクが完了するまで他のタスクを割り振ることは出来ない。\n全部で <var>K</var> 種類の技能があり、各チームメンバー <var>j</var> には技能レベルを表す非負整数ベクトル <var>\\bm{s_j} = (s_{j,1},\\cdots,s_{j,K})</var> が、各タスク <var>i</var> には要求技能レベルを表す非負整数ベクトル <var>\\bm{d_i} = (d_{i,1},\\cdots,d_{i,K})</var> がそれぞれ定まっている。\nこのうち、各チームメンバーの技能レベル <var>\\bm{s_1},\\cdots,\\bm{s_M}</var> は入力として与えられない。</p>\n<p><var>w_{i,j}:=\\sum_{k=1}^K \\max(0,d_{i,k}-s_{j,k})</var> と定める。\nチームメンバー <var>j</var> にタスク <var>i</var> を割り振った時、タスクの完了までには以下のように定める <var>t_{i,j}</var> 日かかる。</p>\n<ol>\n<li><var>w_{i,j}=0</var> の場合、<var>t_{i,j}=1</var>。</li>\n<li><var>w_{i,j}&gt;0</var> の場合、<var>-3</var> 以上 <var>3</var> 以下の整数値をとる一様乱数を <var>r_i</var> として、<var>t_{i,j}=\\max(1,w_{i,j}+r_i)</var>。</li>\n</ol>\n<p><var>t</var> 日かかるタスクを <var>d</var> 日目に開始した場合、<var>d+t-1</var> 日目の終わりにそのタスクは完了する。\nタスク間には依存関係があり、あるタスクを開始するためには、依存する全てのタスクが前日の終わりまでに完了していなければならない。\n出来るだけ短い日数で全てのタスクを完了してほしい。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入出力</h3><p>各入力値の範囲については入力生成の項を参照せよ。</p>\n<p>まずはじめに、タスク数 <var>N</var>、チームメンバー数 <var>M</var>、技能数 <var>K</var>、依存関係数 <var>R</var>、各タスクの要求技能レベル <var>\\bm{d_1},\\cdots,\\bm{d_N}</var>、依存するタスクの組のリスト <var>(u_1,v_1),\\cdots,(u_R,v_R)</var> が以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var> <var>M</var> <var>K</var> <var>R</var>\n<var>d_{1,1}</var> <var>\\cdots</var> <var>d_{1,K}</var>\n<var>\\vdots</var>\n<var>d_{N,1}</var> <var>\\cdots</var> <var>d_{N,K}</var>\n<var>u_1</var> <var>v_1</var>\n<var>\\vdots</var>\n<var>u_R</var> <var>v_R</var>\n</pre>\n\n<p><var>(u_i,v_i)</var> は、タスク <var>v_i</var> (<var>1\\leq v_i\\leq N</var>) がタスク <var>u_i</var> (<var>1\\leq u_i\\leq N</var>) に依存しており、<var>v_i</var> を開始する前に <var>u_i</var> を完了しなければならないことを示している。\n<var>u_i&lt;v_i</var> を満たし、同じ<var>(u_i,v_i)</var>のペアは高々一回しか入力に含まれない。</p>\n<p>次に、1日目から始め、毎日以下の2つの処理をせよ。</p>\n<p>まず、その日にタスクを開始するチームメンバー <var>a_i</var> (<var>1\\leq a_i\\leq M</var>) と担当するタスク <var>b_i</var> (<var>1\\leq b_i\\leq N</var>) の組のリスト <var>(a_1,b_1),\\cdots,(a_m,b_m)</var> を以下の形式で標準出力に1行に出力せよ。</p>\n<pre><var>m</var> <var>a_1</var> <var>b_1</var> <var>\\cdots</var> <var>a_m</var> <var>b_m</var>\n</pre>\n\n<p><font color=\"red\"><strong>出力のあとは標準出力を flush しなければならない。</strong></font>そうしない場合、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる可能性がある。</p>\n<p>次に、その日の終わりにタスクを完了したチームメンバーのリスト <var>f_1,\\cdots,f_n</var> (<var>1\\leq f_1&lt;\\cdots&lt;f_n\\leq M</var>) が以下の形式で標準入力から1行で与えられる。</p>\n<pre><var>n</var> <var>f_1</var> <var>\\cdots</var> <var>f_n</var>\n</pre>\n\n<p>全てのタスクが完了するか、<var>2000</var> 日目が終了した場合、上記の入力の代わりに <code>-1</code> のみからなる行が入力として与えられるので、プログラムを終了せよ。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>例</h3><table class=\"table table-bordered\">\n<thead>\n<tr>\n<th align=\"left\">日数</th>\n<th align=\"left\">Output</th>\n<th align=\"left\">Input</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">事前情報</td>\n<td align=\"left\"></td>\n<td align=\"left\"><pre>3 2 2 1\n0 1\n2 0\n1 1\n2 3\n</pre></td>\n</tr><tr>\n<td align=\"left\">1日目</td>\n<td align=\"left\"><pre>2 1 1 2 2</pre></td>\n<td align=\"left\"><pre>1 1</pre></td>\n</tr>\n<tr>\n<td align=\"left\">2日目</td>\n<td align=\"left\"><pre>0</pre></td>\n<td align=\"left\"><pre>1 2</pre></td>\n</tr>\n<tr>\n<td align=\"left\">3日目</td>\n<td align=\"left\"><pre>1 1 3</pre></td>\n<td align=\"left\"><pre>0</pre></td>\n</tr>\n<tr>\n<td align=\"left\">4日目</td>\n<td align=\"left\"><pre>0</pre></td>\n<td align=\"left\"><pre>0</pre></td>\n</tr>\n<tr>\n<td align=\"left\">5日目</td>\n<td align=\"left\"><pre>0</pre></td>\n<td align=\"left\"><pre>-1</pre></td>\n</tr>\n</tbody>\n</table>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p><var>D</var> (<var>1\\leq D\\leq 2000</var>)日目の終わりに全てのタスクを完了した場合、<var>N+2000-D</var> の得点が得られる。\n<var>2000</var> 日以内にタスクを全て完了出来なかった場合は、完了したタスクの総数を <var>T(&lt;N)</var> として、<var>T</var> の得点が得られる。</p>\n<h4>テストケース数</h4>\n<ul>\n<li>暫定テスト 50個</li>\n<li>システムテスト 3000個、 コンテスト終了後に<a href=\"https://img.atcoder.jp/future-contest-2022-qual/seeds.txt\">seeds.txt</a>(md5=a90d2e3883a546dfb66a4215b8d7a995)を公開</li>\n</ul>\n<p>各テストケースの得点の合計が提出の得点となる。\n暫定テストでは、一つ以上のテストケースで不正な出力や制限時間超過をした場合、提出全体の判定が<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span>や<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる。\nシステムテストでは、不正な出力や制限時間超過をした場合、そのテストケースのみ0点となる。\n提出プログラムが異常終了した場合、 <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時エラー\">RE</span> ではなく <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span> と判定される場合があるので注意せよ。</p>\n<h4>実行時間について</h4>\n<p>実行時間には多少のブレが生じます。\nまた、システムテストでは同時に大量の実行を行うため、暫定テストに比べて数%程度実行時間が伸びる現象が確認されています。\nそのため、実行時間制限ギリギリの提出がシステムテストで<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる可能性があります。\nプログラム内で時間を計測して処理を打ち切るか、実行時間に余裕を持たせるようお願いします。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><p><var>L</var> 以上 <var>U</var> 以下の整数値を一様ランダムに生成する関数を <var>\\mathrm{randint}(L, U)</var>、\n<var>L</var> 以上 <var>U</var> 未満の浮動小数値を一様ランダムに生成する関数を <var>\\mathrm{randdouble}(L, U)</var>、\n<a href=\"https://ja.wikipedia.org/wiki/%E6%AD%A3%E8%A6%8F%E5%88%86%E5%B8%83#%E6%A8%99%E6%BA%96%E6%AD%A3%E8%A6%8F%E5%88%86%E5%B8%83\">標準正規分布</a>から値を生成する関数を <var>\\mathrm{randnormal}()</var> と定義する。</p>\n<h4><var>N</var>、<var>M</var>、<var>K</var>、<var>R</var> の生成</h4>\n<ul>\n<li><var>N=1000</var> で固定</li>\n<li><var>M=20</var> で固定</li>\n<li><var>K=\\mathrm{randint}(10, 20)</var></li>\n<li><var>R=\\mathrm{randint}(1000, 3000)</var></li>\n</ul>\n<h4><var>d_{i,j}</var> の生成</h4>\n<p>各 <var>i=1,\\cdots,N</var> に対して、以下のようにして <var>\\bm{d_i} = (d_{i,1},\\cdots,d_{i,K})</var> を生成する。</p>\n<p><var>K</var> 次元のベクトル <var>(d_{i,1}',\\cdots,d_{i,K}')</var> を <var>d_{i,j}'=|\\mathrm{randnormal}()|</var> により生成する。\n<var>p_i=\\frac{\\mathrm{randdouble}(10,40)}{\\sqrt{\\sum_{j=1}^K d_{i,j}'^2}}</var> を生成し、\n<var>d_{i,j}=\\mathrm{round}(p_i d'_{i,j})</var> とする。</p>\n<h4><var>s_{i,j}</var> の生成</h4>\n<p>各 <var>i=1,\\cdots,M</var> に対して、以下のようにして <var>\\bm{s_i} = (s_{i,1},\\cdots,s_{i,K})</var> を生成する。</p>\n<p><var>K</var> 次元のベクトル <var>(s_{i,1}',\\cdots,s_{i,K}')</var> を <var>s_{i,j}'=|\\mathrm{randnormal}()|</var> により生成する。\n<var>q_i=\\frac{\\mathrm{randdouble}(20,60)}{\\sqrt{\\sum_{j=1}^K s_{i,j}'^2}}</var> を生成し、\n<var>s_{i,j}=\\mathrm{round}(q_i s'_{i,j})</var> とする。</p>\n<h4><var>(u_i,v_i)</var> の生成</h4>\n<p>空集合 <var>E=\\emptyset</var> から開始し、<var>|E|=R</var> になるまで以下の処理を繰り返すことで、依存するタスクの組の集合 <var>E=\\{(u_1,v_1),\\cdots,(u_R,v_R)\\}</var> を生成する。</p>\n<p><var>h=\\mathrm{randint}(1,100)</var> と <var>v=\\mathrm{randint}(h+1,N)</var> を生成し、<var>u=v-h</var> として、<var>(u,v)</var> を <var>E</var> に追加する。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール</h3><ul>\n<li><a href=\"https://img.atcoder.jp/future-contest-2022-qual/f4ca7c3336de23e5c8d1338981e38375.zip\">ローカルテスター</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。</li>\n<li><a href=\"https://img.atcoder.jp/future-contest-2022-qual/f4ca7c3336de23e5c8d1338981e38375.html\">Web版ビジュアライザ</a></li>\n</ul>\n<h4>ツールで用いられる入出力ファイルの仕様</h4>\n<p></p><details>\nこれらのツールでは、事前情報に加えて、隠れ情報である技能レベル <var>\\bm{s_i}</var> と、チームメンバー <var>j</var> がタスク <var>i</var> を完了するのに実際にかかる日数 <var>t_{i,j}</var> を含む以下の形式の入力ファイルを用いています。<p></p>\n<pre><var>N</var> <var>M</var> <var>K</var> <var>R</var>\n<var>d_{1,1}</var> <var>\\cdots</var> <var>d_{1,K}</var>\n<var>\\vdots</var>\n<var>d_{N,1}</var> <var>\\cdots</var> <var>d_{N,K}</var>\n<var>u_1</var> <var>v_1</var>\n<var>\\vdots</var>\n<var>u_R</var> <var>v_R</var>\n<var>s_{1,1}</var> <var>\\cdots</var> <var>s_{1,K}</var>\n<var>\\vdots</var>\n<var>s_{M,1}</var> <var>\\cdots</var> <var>s_{M,K}</var>\n<var>t_{1,1}</var> <var>\\cdots</var> <var>t_{1,M}</var>\n<var>\\vdots</var>\n<var>t_{N,1}</var> <var>\\cdots</var> <var>t_{N,M}</var>\n</pre>\n\n<p>これらの情報があれば、提供されたテスターを用いる代わりに同等のテスターを各自実装することも可能です。</p>\n<p>また、プログラムの出力において <code>#</code> から始まる行はコメントとして無視されます。\n特に、<code>#s</code> から始まる行は、以下の形式で記述された技能レベルの予測値であると解釈され、ビジュアライズ時に使用されます。\n</p><pre>#s <var>i</var> <var>s_{i,1}</var> <var>\\cdots</var> <var>s_{i,K}</var>\n</pre>\n予測値は何度でも出力でき、同じ <var>i</var> に対する予測値は上書き更新されます。\nWeb版のビジュアライザでは予測値の変化をアニメーションで確認できます。<p></p>\n<p>例えば例で示した出力にコメント行を以下のように挿入することで、1日目に <var>s_1</var> の予測値を <var>(0, 1)</var> に、2日目に <var>s_2</var> の予測値を <var>(1, 0)</var> に更新することが出来ます。\n</p><pre>2 1 1 2 2\n#s 1 0 1\n0\n#s 2 1 0\n1 1 3\n0\n0\n</pre><p></p>\n<p>コメント行は実際の提出でも無視されるため、そのままのプログラムを提出可能です。\n</p></details><p></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>サンプルプログラム(Python)</h3><pre><code class=\"prettyprint\"># assign random tasks to team member 1.\nimport sys\nimport random\n# Prior information\nn, m, d, r = list(map(int, input().split()))\ntask_difficulty = []\nfor i in range(n):\n    task_difficulty.append(list(map(int, input().split())))\ntask_dependency = [[] for _ in range(n)]\nfor i in range(r):\n    temp = list(map(int, input().split()))\n    task_dependency[temp[1] - 1].append(temp[0] - 1)\n# -1: not started\n#  0: started\n#  1: completed\ntask_status = [-1] * n\n# -1: not assigned\n#  k: assigned task k (1 &lt;= k &lt;= N)\nmember_status = -1\nday = 0\nwhile True:\n    day += 1\n    output = [0]\n    # random search for tasks\n    if member_status &lt; 0:\n        tasklist = list(range(n))\n        random.shuffle(tasklist)\n        for task in tasklist:\n            if task_status[task] != -1:\n                continue\n            ok = True\n            for necessary in task_dependency[task]:\n                if task_status[necessary] != 1:\n                    # the dependent tasks have not been completed\n                    ok = False\n                    break\n            if ok:\n                # assign the task to team member 1\n                task_status[task] = 0\n                member_status = task\n                output = [1, 1, task + 1]\n                break\n    str_output = map(str, output)\n    print(\" \".join(str_output))\n    # After the output, you have to flush Standard Output\n    sys.stdout.flush()\n    temp = list(map(int, input().split()))\n    if len(temp) == 1:\n        if temp[0] == -1:\n            # elapsed days == 2000, or all the tasks have been completed\n            exit()\n        else:\n            # no change in state\n            pass\n    else:\n        # one task has been completed\n        task = member_status\n        task_status[task] = 1\n        member_status = -1\n</code></pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Story</h3><p>You have been hired as a project leader of F Corporation. Your job is to assign tasks to team members appropriately.\nThe current project consists of a number of tasks.\nThe expected number of days for a team member to complete a task depends on skill levels of the team member and required skill levels for the task.\nYou are highly experienced and can accurately estimate the required skill levels for each task, but since you have just joined the team, you do not yet know the skill levels of each team member at all.\nPlease assign tasks appropriately while gradually evaluating the skill levels of team members.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You want to assign <var>N</var> tasks to <var>M</var> team members.\nYou can assign each task to at most one team member, and once you assign a task to a team member, you cannot assign another task to him/her until he/she completes the task.\nThere are <var>K</var> types of skills.\nEach team member <var>j</var> has a non-negative integer vector <var>\\bm{s_j} = (s_{j,1},\\cdots,s_{j,K})</var> representing skill levels, and each task <var>i</var> has a non-negative integer vector <var>\\bm{d_i} = (d_{i,1},\\cdots,d_{i,K})</var> representing required skill levels.\nAmong these, the skill levels <var>\\bm{s_1},\\cdots,\\bm{s_M}</var> are not given as input.</p>\n<p>We define <var>w_{i,j}:=\\sum_{k=1}^K \\max(0,d_{i,k}-s_{j,k})</var>.\nThen, it takes <var>t_{i,j}</var> days for team member <var>j</var> to complete task <var>i</var>, where <var>t_{i,j}</var> is defined as follows.</p>\n<ol>\n<li>If <var>w_{i,j}=0</var>, <var>t_{i,j}=1</var>.</li>\n<li>If <var>w_{i,j}&gt;0</var>, <var>t_{i,j}=\\max(1,w_{i,j}+r_i)</var>, where <var>r_i</var> is a uniform random integer between <var>-3</var> and <var>3</var>, inclusive.</li>\n</ol>\n<p>When a task taking <var>t</var> days is started on day <var>d</var>, the task will be completed at the end of day <var>d+t-1</var>.\nThere are dependencies between tasks, and before starting a task, all of its dependent tasks must have been completed by the end of the previous day.\nPlease complete all tasks in as few days as possible.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input and Output</h3><p>For the range of each input value, see Input Generation.</p>\n<p>At the start of the execution, the number of tasks <var>N</var>, the number of team members <var>M</var>, the number of skills <var>K</var>, the number of dependencies <var>R</var>, required skill levels for each task <var>\\bm{d_1},\\cdots,\\bm{d_N}</var>, and a list of pairs of dependent tasks <var>(u_1,v_1),\\cdots,(u_R,v_R)</var> are given from Standard Input in the following format.</p>\n<pre><var>N</var> <var>M</var> <var>K</var> <var>R</var>\n<var>d_{1,1}</var> <var>\\cdots</var> <var>d_{1,K}</var>\n<var>\\vdots</var>\n<var>d_{N,1}</var> <var>\\cdots</var> <var>d_{N,K}</var>\n<var>u_1</var> <var>v_1</var>\n<var>\\vdots</var>\n<var>u_R</var> <var>v_R</var>\n</pre>\n\n<p><var>(u_i,v_i)</var> indicates that the task <var>v_i</var> (<var>1\\leq v_i\\leq N</var>) depends on the task <var>u_i</var> (<var>1\\leq u_i\\leq N</var>) and that <var>u_i</var> must be completed before starting <var>v_i</var>.\nIt satisfies <var>u_i&lt;v_i</var>, and the same <var>(u_i,v_i)</var> pair appears at most once in the input.</p>\n<p>Then, starting from day 1, do the following two processes every day.</p>\n<p>First, output to Standard Output a list of pairs <var>(a_1,b_1),\\cdots,(a_m,b_m)</var> such that team member <var>a_i</var> (<var>1\\leq a_i\\leq M</var>) starts task <var>b_i</var> (<var>1\\leq b_i\\leq N</var>) on that day in one line in the following format.</p>\n<pre><var>m</var> <var>a_1</var> <var>b_1</var> <var>\\cdots</var> <var>a_m</var> <var>b_m</var>\n</pre>\n\n<p><font color=\"red\"><strong>After the output, you have to flush Standard Output.</strong></font> Otherwise, the submission might be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> .</p>\n<p>Next, a list of team members who have completed their tasks at the end of that day <var>f_1,\\cdots,f_n</var> (<var>1\\leq f_1&lt;\\cdots&lt;f_n\\leq M</var>) is given in one line from Standard Input in the following format.</p>\n<pre><var>n</var> <var>f_1</var> <var>\\cdots</var> <var>f_n</var>\n</pre>\n\n<p>If all tasks are completed or day <var>2000</var> is over, a line containing only <code>-1</code> will be given as input instead of the above input, and you should exit the program.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Example</h3><table class=\"table table-bordered\">\n<thead>\n<tr>\n<th align=\"left\">Day</th>\n<th align=\"left\">Output</th>\n<th align=\"left\">Input</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Prior information</td>\n<td align=\"left\"></td>\n<td align=\"left\"><pre>3 2 2 1\n0 1\n2 0\n1 1\n2 3\n</pre></td>\n</tr><tr>\n<td align=\"left\">Day 1</td>\n<td align=\"left\"><pre>2 1 1 2 2</pre></td>\n<td align=\"left\"><pre>1 1</pre></td>\n</tr>\n<tr>\n<td align=\"left\">Day 2</td>\n<td align=\"left\"><pre>0</pre></td>\n<td align=\"left\"><pre>1 2</pre></td>\n</tr>\n<tr>\n<td align=\"left\">Day 3</td>\n<td align=\"left\"><pre>1 1 3</pre></td>\n<td align=\"left\"><pre>0</pre></td>\n</tr>\n<tr>\n<td align=\"left\">Day 4</td>\n<td align=\"left\"><pre>0</pre></td>\n<td align=\"left\"><pre>0</pre></td>\n</tr>\n<tr>\n<td align=\"left\">Day 5</td>\n<td align=\"left\"><pre>0</pre></td>\n<td align=\"left\"><pre>-1</pre></td>\n</tr>\n</tbody>\n</table>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>If you complete all the tasks at the end of day <var>D</var> (<var>1\\leq D\\leq 2000</var>), you will get a score of <var>N+2000-D</var>.\nIf you fail to complete all the tasks within <var>2000</var> days, you will get a score of <var>T</var>, where <var>T(&lt;N)</var> is the total number of completed tasks.</p>\n<h4>Number of test cases</h4>\n<ul>\n<li>Provisional test: 50</li>\n<li>System test: 3000. We will publish <a href=\"https://img.atcoder.jp/future-contest-2022-qual/seeds.txt\">seeds.txt</a> (md5=a90d2e3883a546dfb66a4215b8d7a995) after the contest is over.</li>\n</ul>\n<p>The score of a submission is the total scores for each test case.\nIn the provisional test, if your submission produces illegal output or exceeds the time limit for some test cases, the submission itself will be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Wrong Answer\">WA</span> or <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> , and the score of the submission will be zero.\nIn the system test, if your submission produces illegal output or exceeds the time limit for some test cases, only the score for those test cases will be zero.\nNote that if your program terminates abnormally, it may be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Wrong Answer\">WA</span> instead of <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Runtime Error\">RE</span>.</p>\n<h4>About execution time</h4>\n<p>Execution time may vary slightly from run to run.\nIn addition, since system tests simultaneously perform a large number of executions, it has been observed that execution time increases by several percent compared to provisional tests.\nFor these reasons, submissions that are very close to the time limit may result in <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> in the system test.\nPlease measure the execution time in your program to terminate the process, or have enough margin in the execution time.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><p>Let <var>\\mathrm{randint}(L, U)</var> be a function that generates a uniform random integer between <var>L</var> and <var>U</var>, inclusive.\nLet <var>\\mathrm{randdouble}(L,U)</var> be a function that generates a uniform random floating point number between <var>L</var> and <var>U</var>.\nLet <var>\\mathrm{randnormal}()</var> be a function that generates a random value from <a href=\"https://en.wikipedia.org/wiki/Normal_distribution#Standard_normal_distribution\">the standard normal distribution</a>.</p>\n<h4>Generation of <var>N</var>, <var>M</var>, <var>K</var>, and <var>R</var></h4>\n<ul>\n<li><var>N=1000</var> (fixed for all test cases)</li>\n<li><var>M=20</var> (fixed for all test cases)</li>\n<li><var>K=\\mathrm{randint}(10, 20)</var></li>\n<li><var>R=\\mathrm{randint}(1000, 3000)</var></li>\n</ul>\n<h4>Generation of <var>d_{i,j}</var></h4>\n<p>For each <var>i=1,\\cdots,N</var>, we generate <var>\\bm{d_i} = (d_{i,1},\\cdots,d_{i,K})</var> as follows.</p>\n<p>We generate <var>K</var>-dimensional vector <var>(d_{i,1}',\\cdots,d_{i,K}')</var> by generating <var>d_{i,j}'=|\\mathrm{randnormal}()|</var>.\nLet <var>p_i=\\frac{\\mathrm{randdouble}(10,40)}{\\sqrt{\\sum_{j=1}^K d_{i,j}'^2}}</var>.\nThen, we set <var>d_{i,j}=\\mathrm{round}(p_i d'_{i,j})</var>.</p>\n<h4>Generation of <var>s_{i,j}</var></h4>\n<p>For each <var>i=1,\\cdots,M</var>, we generate <var>\\bm{s_i} = (s_{i,1},\\cdots,s_{i,K})</var> as follows.</p>\n<p>We generate <var>K</var>-dimensional vector <var>(s_{i,1}',\\cdots,s_{i,K}')</var> by generating <var>s_{i,j}'=|\\mathrm{randnormal}()|</var>.\nLet <var>q_i=\\frac{\\mathrm{randdouble}(20,60)}{\\sqrt{\\sum_{j=1}^K s_{i,j}'^2}}</var>.\nThen, we set <var>s_{i,j}=\\mathrm{round}(q_i s'_{i,j})</var>.</p>\n<h4>Generation of <var>(u_i,v_i)</var></h4>\n<p>Starting from an empty set <var>E=\\emptyset</var>, we generate a set of dependent task pairs <var>E=\\{(u_1,v_1),\\cdots,(u_R,v_R)\\}</var> by repeating the following process until <var>|E|=R</var>.</p>\n<p>Generate <var>h=\\mathrm{randint}(1,100)</var> and <var>v=\\mathrm{randint}(h+1,N)</var>.\nLet <var>u=v-h</var> and insert <var>(u,v)</var> into <var>E</var>.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools</h3><ul>\n<li><a href=\"https://img.atcoder.jp/future-contest-2022-qual/f4ca7c3336de23e5c8d1338981e38375.zip\">Local Tester</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.</li>\n<li><a href=\"https://img.atcoder.jp/future-contest-2022-qual/f4ca7c3336de23e5c8d1338981e38375_en.html\">Visualizer on the web</a></li>\n</ul>\n<h4>Specification of input/output files used by the tools</h4>\n<p></p><details>\nThese tools use an input file of the following format that contains, in addition to the prior information, the hidden information: skill level <var>\\bm{s_i}</var> and the number of days <var>t_{i,j}</var> it actually takes for team member <var>j</var> to complete task <var>i</var>.<p></p>\n<pre><var>N</var> <var>M</var> <var>K</var> <var>R</var>\n<var>d_{1,1}</var> <var>\\cdots</var> <var>d_{1,K}</var>\n<var>\\vdots</var>\n<var>d_{N,1}</var> <var>\\cdots</var> <var>d_{N,K}</var>\n<var>u_1</var> <var>v_1</var>\n<var>\\vdots</var>\n<var>u_R</var> <var>v_R</var>\n<var>s_{1,1}</var> <var>\\cdots</var> <var>s_{1,K}</var>\n<var>\\vdots</var>\n<var>s_{M,1}</var> <var>\\cdots</var> <var>s_{M,K}</var>\n<var>t_{1,1}</var> <var>\\cdots</var> <var>t_{1,M}</var>\n<var>\\vdots</var>\n<var>t_{N,1}</var> <var>\\cdots</var> <var>t_{N,M}</var>\n</pre>\n\n<p>With this information, instead of using the provided tester, you can implement your own tester that is equivalent to the provided one.</p>\n<p>In outputs of your program, lines starting with <code>#</code> are ignored as comments.\nIn particular, lines starting with <code>#s</code> are interpreted as predictions of skill levels described in the following format, and are used for visualization.\n</p><pre>#s <var>i</var> <var>s_{i,1}</var> <var>\\cdots</var> <var>s_{i,K}</var>\n</pre>\nPredictions can be output as many times as you like, and predictions for the same <var>i</var> will be overwritten.\nThe visualizer on the web provides an animation of the predictions.<p></p>\n<p>For example, by inserting comment lines in the output shown in Example as follows, you can update the prediction of <var>s_1</var> to <var>(0, 1)</var> on day 1, and the prediction of <var>s_2</var> to <var>(1, 0)</var> on day 2.\n</p><pre>2 1 1 2 2\n#s 1 0 1\n0\n#s 2 1 0\n1 1 3\n0\n0\n</pre><p></p>\n<p>Comment lines are also ignored in the judge, so you can submit the same program.\n</p></details><p></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Program(Python)</h3><pre><code class=\"prettyprint\"># assign random tasks to team member 1.\nimport sys\nimport random\n# Prior information\nn, m, d, r = list(map(int, input().split()))\ntask_difficulty = []\nfor i in range(n):\n    task_difficulty.append(list(map(int, input().split())))\ntask_dependency = [[] for _ in range(n)]\nfor i in range(r):\n    temp = list(map(int, input().split()))\n    task_dependency[temp[1] - 1].append(temp[0] - 1)\n# -1: not started\n#  0: started\n#  1: completed\ntask_status = [-1] * n\n# -1: not assigned\n#  k: assigned task k (1 &lt;= k &lt;= N)\nmember_status = -1\nday = 0\nwhile True:\n    day += 1\n    output = [0]\n    # random search for tasks\n    if member_status &lt; 0:\n        tasklist = list(range(n))\n        random.shuffle(tasklist)\n        for task in tasklist:\n            if task_status[task] != -1:\n                continue\n            ok = True\n            for necessary in task_dependency[task]:\n                if task_status[necessary] != 1:\n                    # the dependent tasks have not been completed\n                    ok = False\n                    break\n            if ok:\n                # assign the task to team member 1\n                task_status[task] = 0\n                member_status = task\n                output = [1, 1, task + 1]\n                break\n    str_output = map(str, output)\n    print(\" \".join(str_output))\n    # After the output, you have to flush Standard Output\n    sys.stdout.flush()\n    temp = list(map(int, input().split()))\n    if len(temp) == 1:\n        if temp[0] == -1:\n            # elapsed days == 2000, or all the tasks have been completed\n            exit()\n        else:\n            # no change in state\n            pass\n    else:\n        # one task has been completed\n        task = member_status\n        task_status[task] = 1\n        member_status = -1\n</code></pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/future-contest-2022-qual/tasks/future_contest_2022_qual_a"}