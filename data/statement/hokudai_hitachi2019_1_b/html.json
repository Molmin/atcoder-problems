{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3> 問題概要 </h3>\n<ul>\n<li><strong>問題のねらい</strong>: 本プログラミングコンテストは、買い物支援(配達)サービスの最適化をテーマとしている。本サービスを利用する顧客はそれぞれ異なる品物をお店に注文する（顧客からの注文には固有の<var>\\text{ID}</var>が割り振られる）。お店が利用できる車は一台のため、配達中に注文された商品については、お店に戻ってその商品を車に積んでから、顧客のもと商品を届けなければならない。</li>\n<li><strong>得点</strong>: 最適化の目的は、制限時間 <var>T_{\\max}</var> の間に「できるだけ多くの」商品を「できるだけ早く」顧客に届けることである。なお、注文は時刻 <var>0</var> から時刻 <var>0.95 \\times T_{\\max}</var> の間に発生する可能性がある。</li>\n<li><strong>諸制約</strong>: 本コンテストでは、車に積むことのできる商品の数に制限はない。ただし、ある注文に対応する商品をお店まで取りに行き、車に積めるのは、<strong>その商品が注文された以降の時刻に限る</strong> ことに注意せよ。</li>\n<li><strong>問題 A</strong>: この問題においては、注文が発生する時刻及び、注文がどの頂点で発生したかなど、注文に関する情報が事前に与えられる。</li>\n<li><strong>問題 B</strong>: この問題においては、事前に注文に関する情報は与えられず、全ての注文は配達中にオンラインで発生する。</li>\n</ul>\n<div style=\"text-align:center;\">\n<img src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/7faf401c00c790b9a8cb5c6968dc80c3.png\">\n</div>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>時間・空間について</h3>\n<ul>\n<li><strong>時間</strong>: <var>t</var> は <var>0 \\leq t &lt; T_{\\max}</var> を満たす整数時刻であるとし、各 <var>t</var> において、あなたは時刻 <var>t</var> から <var>t+1</var> にかけての行動を決定しなければならない。</li>\n<li><strong>空間</strong>: 単純かつ無向であるグラフ <var>G = (V, E)</var> を考える。ここで <var>V</var> は頂点集合、<var>E</var> は辺集合である。車の移動・注文の発生はすべて、このグラフ内で起こるものとする。</li>\n<li><strong>店および顧客の位置</strong>: それぞれの頂点 <var>u \\in V</var> は <var>1</var> から <var>|V|</var> までで番号付けられている。頂点 <var>u = 1</var> は店がある頂点であるとし、<var>u = 2, \\dots, |V|</var> は顧客がいる頂点であるとする。</li>\n<li><strong>道路</strong>: それぞれの辺 <var>\\left\\{ u, v \\right\\}</var> は、頂点 <var>u</var> と頂点 <var>v</var> を直接結ぶ道路であるとする。辺には整数距離が定められており、これを <var>d_{u, v} \\geq 1</var> と表記する。</li>\n<li><strong>グラフの生成方法</strong>: 地図を表すグラフは、後述のアルゴリズムによってランダムに生成される。</li>\n</ul>\n<details>\n<summary style=\"display:list-item\"> グラフ <var>G</var> の生成について </summary>\n\nすべてのテストケースにおいて、与えられるグラフ <var>G = (V, E)</var> は以下のアルゴリズムによって生成される。\n\n<ul>\n<li> <b>入力:</b><var>|V|</var>, <var>|E|</var>, <var>\\mathrm{MaxDegree}=5</var>(最大次数)</li>\n<li> <b>頂点(店舗＋顧客)の生成方法:</b>\n<ul>\n  <li> はじめに、<var>|V| = R^{2} + r</var> を満たす最大の非負整数<var>R</var> を見つける（ただし、<var>r</var> も非負整数とする）。</li>\n  <li> 次に、<var>0 \\leq x, y &lt; R</var> を満たす<var>xy</var>座標平面上の全ての格子点に対して、点 <var>(x, y)</var> をプロットする。</li>\n  <li> 各点の座標を <var>(x, y) \\leftarrow (x + dx, y + dy)</var> とずらす。ここで <var>dx, dy</var> は <var>dx, dy \\in [0, 1]</var> を満たす一様ランダムな実数である。つまり、移動後の座標は<var>(x + dx, y + dy)\\in [0,R] \\times [0,R]</var>を満たす。</li>\n  <li> 残りの <var>r</var> 個の点それぞれについて、座標 <var>(x', y')</var> (<var>0 \\leq x', y' \\leq R</var> の一様ランダムな実数) を定めてプロットする。</li>\n  <li> 各点に対して、<var>1</var>から<var>|V|</var>までの番号をランダムに割り振る。番号<var>1</var>を割り振られた頂点を店舗とする。</li>\n</ul>\n</li>\n\n<li> <b>高速道路の作成方法:</b>\n<ul>\n  <li> 頂点間をつなぐ道路のうち、まず高速道路を作成する。生成した頂点集合 <var>u \\in V</var> に対して、完全グラフ <var>G_{\\text{comp}}</var> を生成する。各頂点ペア <var>u, v \\in V \\times V</var> に対する頂点間のユークリッド距離を、完全グラフにおける辺の重み <var>W_{u, v}</var> と定める。</li>\n  <li> 次に、完全グラフ <var>G_{\\text{comp}}</var> に対して、<a href=\"https://ja.wikipedia.org/wiki/%E5%85%A8%E5%9F%9F%E6%9C%A8#%E6%9C%80%E5%B0%8F%E5%85%A8%E5%9F%9F%E6%9C%A8\">最小全域木</a> を生成する。最小全域木の <var>|V|-1</var> 本の辺がグラフ <var>G</var> の高速道路網となる。これらの辺の重み <var>d_{u,v}</var> を <var>d_{u,v} \\leftarrow \\lceil 2 \\times W_{u, v} \\rceil </var>と定める。\n  </li>\n</ul>\n</li>\n\n<li> <b>残りの道路の作成方法:</b>\n<ul>\n  <li> (高速道路以外の)残りの <var>|E|-(|V|-1)</var> 本の道路は、次の手順で<var>1</var>本ずつ生成される。\n  <ul>\n    <li> <var>\\mathrm{cost}(u,v)</var>を更新する。 </li>\n    <li> グラフGの辺でつながっていない<var>u</var>, <var>v</var>のペアの内、<var>\\mathrm{cost(u,v)}</var>の最小を与えるペアをつなぐ辺<var>\\left\\{ u, v \\right\\}</var>をグラフGに加える。</li>\n    <li> 選ばれた辺の重み <var>d_{u,v}</var> を <var>d_{u,v} \\leftarrow \\lceil 4 \\times W_{u, v} \\rceil </var> と定める。</li>\n  </ul>\n  </li>\n  <li>\n  ここで <var>\\mathrm{cost}(u,v)</var> のベースは頂点間のユークリッド距離だが、低い次数の頂点が選ばれやすくなるように、また、できる限り道の交差を避けるため、斜め方向よりも縦横方向の道が選ばれやすくなるように <var>\\mathrm{cost}(u,v)</var> を定める。以下に <var>\\mathrm{cost}(u,v)</var> の計算方法の詳細を示す。\n  <ul>\n    <li> 各頂点 <var>u\\in V</var> の次数 <var>\\mathrm{degree}(u)</var> を計算する。次数 <var>\\mathrm{degree}(u)</var> は <var>u\\in V</var> をいずれかの端点に含むグラフ <var>G</var> の辺の本数である。</li>\n    <li> 各頂点 <var>u\\in V</var> の色を、頂点の初めの(ずらす前の)座標 <var>(x,y)</var> をもとに、下記のように定める。まずは <var>|V|</var> 個の頂点のうち、<var>R^{2}</var> 個の頂点に対し、\n    <ul>\n      <li> <var>x+y</var> が偶数の場合 : <var>\\mathrm{color}(u) = 0</var> </li>\n      <li> <var>x+y</var> が奇数の場合 : <var>\\mathrm{color}(u) = 1</var> </li>\n      <li> と定める。残りの <var>r</var> 個の頂点には、ランダムに<var>0</var>もしくは<var>1</var>の色を割り当てる。</li>\n    </ul>\n    </li>\n    <li> ファクター <var>f(u,v)</var> を以下のように定める:\n    <ul>\n      <li> <var>\\mathrm{color}(u)</var> と <var>\\mathrm{color}(v)</var> が同じ場合： <var>\\mathrm{f}(u,v) = 5</var> </li>\n      <li> <var>\\mathrm{color}(u)</var> と <var>\\mathrm{color}(v)</var> が異なる場合： <var>\\mathrm{f}(u,v) = 1</var> </li>\n    </ul>\n    </li>\n    <li> ファクター <var>g(u)</var> を以下のように定める:\n    <ul>\n      <li> <var>\\mathrm{degree}(u) \\lt \\mathrm{MaxDegree}</var> の場合: <var>g(u)=1</var> </li>\n      <li> <var>\\mathrm{degree}(u) \\geq \\mathrm{MaxDegree}</var> の場合: <var>g(u)=\\infty</var> </li>\n    </ul>\n    </li>\n    <li> <var>\\mathrm{cost}(u,v)</var> を以下のように計算する。：\n    <ul>\n      <li> <var>\\mathrm{cost}(u,v) = W_{u,v}\\times \\mathrm{degree}(u) \\times \\mathrm{degree}(v) \\times f(u,v) \\times g(u) \\times g(v)</var>. </li>\n    </ul>\n    </li>\n  </ul>\n  </li>\n</ul>\n</li>\n\n<li> <b> 各顧客の注文頻度の決定方法: </b>\n<ul>\n  <li> まず、各頂点 <var>u \\in V</var> に注文頻度 <var>f_u \\in \\left\\{0,1,2\\right\\}</var> を割り当てる。</li>\n  <li> 店舗の注文頻度を<var>0</var>に初期化する: <var>f_1 \\leftarrow 0</var>. </li>\n  <li> 顧客の注文頻度を<var>1</var>に初期化する: <var>f_u \\leftarrow 1</var></li>\n  <li> 以下、注文頻度<var>2</var>の顧客を定める。そのためにまず、座標平面上の <var>[R/4,3R/4]\\times[R/4,3R/4]</var> の領域内に一様ランダムに1点、中心点 <var>c=(c_x,c_y)</var> をプロットする（<var>c=(c_x,c_y)\\in [R/4,3R/4]\\times[R/4,3R/4]</var>）。次に全ての顧客 <var>u=2,...,|V|</var> に対して以下の処理を行う:  \n    <ul>\n    <li> <var>\\mathrm{EuclideanDistance}(c,u)\\le R/8 + \\mathrm{uniformRandom}[0,R/8]</var> の場合、 <var>f_{u} \\leftarrow 2</var> とする。</li>\n    </ul>\n  </li>\n</ul>\n</li>\n\n</ul>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>車の位置と移動について</h3>\n<p>配達には車を利用する必要がある。車の位置は次に示すように二種類に分類される。</p>\n<ul>\n<li><strong>車の位置</strong>: 以下の二種類に分類される。<ul>\n<li>頂点 <var>u \\in V</var> 上にいる場合</li>\n<li>辺 <var>\\left\\{ u, v \\right\\}</var> 上にいる場合。より具体的に言えば、<var>u</var> から <var>v</var> の方向に <var>x</var> <var>(0 &lt; x &lt; d_{u, v})</var> だけ離れている場合である</li>\n</ul>\n</li>\n</ul>\n<p>また、毎時刻 <var>t</var> において、あなたは以下に示すとおりに車を操作できる。</p>\n<ul>\n<li>\n<p><strong>車の移動</strong>: あなたが取れる行動は以下の二種類である。</p>\n<ul>\n<li><code>stay</code>: 移動せずその場にとどまる</li>\n<li><code>move w</code>: <var>w \\in V</var> の方向に向かって距離 <var>1</var> だけ進む</li>\n</ul>\n<p><code>move w</code> を選択するとき、<var>w</var> は以下の条件を満たさなければならない。これらの条件を満たさない場合は <code>WA</code> (Wrong Answer) となることに注意せよ。\n</p><ul>\n  <li><var>w</var> は <var>w \\in V</var> を満たす頂点である</li>\n  <li>車が頂点 <var>u \\in V</var> 上にいる場合、頂点対 <var>\\left\\{ u, w \\right\\}</var> がグラフの辺集合に含まれていなければならない。すなわち、<var>\\left\\{ u, w \\right\\} \\in E</var> でなければならない</li>\n  <li>車が辺 <var>\\left\\{ u, v \\right\\}</var> 上にいる場合、<var>w = u</var> または <var>w = v</var> でなければならない</li>\n</ul><p></p>\n</li>\n</ul>\n<div style=\"text-align:center;\">\n<img src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/4b904efabb268a2ee89f423e61c869f9.png\">\n</div>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>注文・配達等について</h3>\n<ul>\n<li><strong>注文</strong>: それぞれの注文は「注文 ID」「配達先 <var>v \\in V</var>」「注文が発生した時刻 <var>t</var>」の三種類の情報を持つ。詳しくは、後述の入力フォーマットを参照のこと。</li>\n<li><strong>注文発生について</strong>: 顧客からの新しい注文は、<var>0 \\leq t \\leq T_{\\mathrm{last}} = 0.95 \\times T_{\\max}</var> を満たす時刻 <var>t</var> において確率 <var>p_{\\mathrm{order}}(t)</var> で発生する。それぞれの頂点には注文頻度 <var>f_i</var> が定められており、注文が発生するときにその配送先が頂点 <var>i</var> となる確率は <var>\\frac{f_i}{\\sum_{k} f_k}</var> である。詳しくは以下の疑似コードまたはサンプルコードを参考のこと。</li>\n</ul>\n<p>\n</p><details>\n  <summary style=\"display:list-item\"> 注文発生について </summary>\n\n  <ul>\n    <li> <b>入力:</b> 注文が発生しうる時刻の最大値 <var>T_{\\mathrm{last}}</var> と、時刻ごとの注文発生確率を表す関数 <var>p_{\\mathrm{order}}(t)</var>. </li>\n    <li> <b>初期化:</b> <var>\\mathrm{ID} \\leftarrow 0</var> </li>\n    <li> 各時間ステップ <var>t = 0, ..., T_{\\mathrm{last}} </var> で以下を実行する:\n    <ul>\n      <li> 実数 <var>r \\in \\left[ 0,1 \\right]</var> を一様ランダムに生成する</li>\n      <li> <b><var> r \\le p_{\\mathrm{order}}(t) </var> の場合</b>:\n        <ul>\n          <li>1つの頂点 <var>u</var> (<var>u \\in V, u \\neq 1</var>) を、それぞれの頂点に割り当てられた頻度 <var>f_{u}</var> で重み付けをしてランダムに選択する</li>\n          <li> <var>\\mathrm{ID} \\leftarrow \\mathrm{ID} + 1</var> </li>\n          <li> 注文を発生させる。ここで注文は(注文ID, 注文時間 <var>t</var>, (お届け先の)頂点番号 <var>u \\in V</var>)を含む。\n          </li>\n        </ul>\n      </li>\n      <li> <b>上記以外 (<var> r \\gt p_{\\mathrm{order}}(t)</var>) の場合</b>: 注文は発生しない</li>\n    </ul>\n  </li></ul>\n\n  <ul style=\"list-style:none;\">\n    <li> 時刻ごとの注文発生確率を表す関数 <var>p_{\\mathrm{order}}(t)</var> を下記のように定める:</li>\n    <li>\n    <var> p_{\\text{order}}(t) =\n    \\begin{cases}\n    t / T_{\\text{peak}},  &amp;\n    \\text{if } 0\\le t \\lt T_{\\text{peak}}, \\\\\n    (T_{\\text{last}} - t) / (T_{\\text{last}}- T_{\\text{peak}}),  &amp;\n    \\text{if } T_{\\text{peak}} \\le t \\lt T_{\\text{last}}, \\\\\n    0, &amp;\n    \\text{if } T_{\\text{last}} \\le t,\n    \\end{cases}\n    </var></li>\n    <li>ここで <var>T_{\\text{last}}:=0.95 \\times T_{\\max}</var> であり、 <var>T_{\\text{peak}}</var> は区間 <var>[0, T_{\\text{last}}]</var> から一様ランダムに定める</li>\n    <li><span style=\"font-weight:bold;\">注意: <var>T_{\\text{peak}}</var> の値は、入力では与えられない。</span></li>\n  </ul>\n\n  <div style=\"text-align:center;\">\n  <img src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/caa24f9e6a715e0d1a778f1fdfe4e14b.png\">\n  </div>\n\n</details>\n<p></p>\n\n<ul>\n<li><strong>配達</strong>: 注文を受けて、それに対応する商品を顧客まで配達するためには、注文が発生した後に次に示す手順を踏む必要がある。<ol>\n<li><strong>車を店まで移動させる</strong>: 車が店まで到達すると、現在時刻を同じかそれより前に発生した注文について、それに対応する商品をすべて車に積むことができる。将来にやってくる注文に関して、商品を車に積むことができないことに注意せよ。</li>\n<li><strong>車を顧客がいる場所まで移動させる</strong>: 配達を完了させるためには、顧客がいる頂点まで車を移動させる必要がある。ここで、その顧客の注文に対応する商品が車に積まれていない場合は、たとえ顧客がいる頂点まで車を移動させたとしても配達が完了しないことに注意せよ。</li>\n</ol>\n</li>\n</ul>\n<div style=\"text-align:center;\">\n<img src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/5dff370a11a242d3ac15adb486ef2e85.png\">\n</div>\n\n<ul>\n<li><strong>注意すべき制約</strong>: 注文 ID は注文を識別するためのものであり、互いに異なる整数が割り当てられる。また、一度に車に積むことのできる商品の数には上限がないことに注意されたい。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>採点方法</h3>\n<ul>\n<li>各テストケースの得点の合計がその解答プログラムの得点となる。コンテスト中には 30 個のテストケースが存在する。</li>\n<li>コンテスト終了後に 100 個の(コンテスト中とは異なる)テストケースに対してシステムテストを行い、その得点を最終得点とする。</li>\n<li>各テストケースについて、以下のように得点(Score)を計算する。\n<p style=\"text-align:center;\">\n    <var> \\text{Score} = \\sum_{i \\in D} {(T_{\\max})}^{2} - {(\\mathrm{waitingTime}_i)}^{2}, </var>\n</p>\nここで、\n<ul>\n<li> <var> D </var> は、時刻  <var>t=T_{\\max}</var> までに配達を完了した注文の集合である。</li>\n<li> <var>i</var> 番目の注文の待ち時間: <var>\\mathrm{waitingTime}_i = \\mathrm{deliveredTime}_i - \\mathrm{orderedTime}_i</var>.</li>\n<li> <code>WA</code>（不正解）となったテストケースが存在した場合、そのケースの得点は <var>0</var> 点になる。</li>\n</ul>\n</li></ul></section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文 B</h3><p>問題Bは<span style=\"color:red; font-weight:bold;\">インタラクティブな</span>問題です。\nこの問題において、時刻 <var>t=0,...,T_{\\text{last}}-1</var> で発生する顧客からの注文は、時刻 <var>t</var> におけるあなたの行動を決定する <strong>直前に</strong> 与えられる。\nより具体的には、コンテスタント側とジャッジ側が以下で示す流れに沿って処理を行う。</p>\n<table class=\"table table-bordered\">\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th>コンテスタント</th>\n<th>ジャッジ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"></td>\n<td></td>\n<td>グラフ <var>G</var> を出力</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td></td>\n<td>時刻 <var>t</var> で新たに発生した注文情報を出力</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td></td>\n<td>時刻 <var>t</var> で新たに車に積まれた商品に対応する注文情報を出力</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td>時刻 <var>t</var> における行動を決定して出力</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td></td>\n<td>その行動が実行可能であるかを判定し、実行可能でなければ<code>NG</code>を出力し、実行可能であれば<code>OK</code>を出力</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td></td>\n<td>時刻 <var>t+1</var> で配達が完了した注文情報を出力</td>\n</tr>\n</tbody>\n</table>\n<p>ジャッジによるグラフの出力は、はじめに一回のみ行われる。表の左に \"+\" が書かれている処理は繰り返し処理であり、<var>0 \\leq t \\lt T_{\\max}</var> を満たす整数 <var>t</var> において、表で示した順番通りに毎回行われる。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入出力形式</h3>\n<p>はじめに、ジャッジ側からグラフ <var>G</var> と、それぞれの頂点に対する注文発生頻度 <var>f_i</var> と、あなたが行動する時間の最大値 <var>T_{\\max}</var> が以下の形式で標準入力に与えられる。</p>\n<pre><var>|V|</var> <var>|E|</var>\n<var>u_1</var> <var>v_1</var> <var>d_{u_1, v_1}</var>\n<var>u_2</var> <var>v_2</var> <var>d_{u_2, v_2}</var>\n<var>\\vdots</var>\n<var>u_{|E|}</var> <var>v_{|E|}</var> <var>d_{u_{|E|}, v_{|E|}}</var>\n<var>f_1</var> <var>f_2</var> <var>\\ldots</var> <var>f_{|V|}</var>\n<var>T_{\\max}</var>\n</pre>\n\n<ul>\n<li><var>1</var> 行目の <var>|V|</var> はグラフの頂点数、<var>|E|</var> はグラフの辺数を表す。</li>\n<li>続く <var>|E|</var> 行で、グラフの辺が与えられる。<var>|E|</var> 行のうち <var>i</var> 行目は、頂点 <var>u_i</var> と <var>v_i</var> の間に距離 <var>d_{u_i, v_i}</var> の辺が存在することを表す。</li>\n<li>続く <var>1</var> 行で、それぞれの頂点について新たな注文が発生する頻度が与えられる。<var>i</var> 番目に与えられる整数は、頂点 <var>i</var> に新たな注文が発生する頻度が <var>f_i</var> であることを表す。</li>\n<li>続く <var>1</var> 行で、コンテスタント側とジャッジ側が互いに処理を行う時間の最大値 <var>T_{\\max}</var> が与えられる。</li>\n</ul>\n<p>時刻 <var>t</var> から <var>t+1</var> へ移る際の処理を示す。まずはじめに、時刻 <var>t</var> に関する以下の情報が標準入力に与えられる。</p>\n<pre><var>N_{\\text{new}}</var>\n<var>\\mathrm{new\\_id}_1</var> <var>\\mathrm{dst}_1</var>\n<var>\\mathrm{new\\_id}_2</var> <var>\\mathrm{dst}_2</var>\n<var>\\vdots</var>\n<var>\\mathrm{new\\_id}_{N_{\\text{new}}}</var> <var>\\mathrm{dst}_{N_{\\text{new}}}</var>\n<var>N_{\\text{put}}</var>\n<var>\\mathrm{put\\_id}_1</var>\n<var>\\mathrm{put\\_id}_2</var>\n<var>\\mathrm{put\\_id}_{N_{\\text{put}}}</var>\n</pre>\n\n<ul>\n<li><var>N_{\\text{new}}</var> は、その時刻において新たに発生した注文の数を表す。</li>\n<li>続く <var>N_{\\text{new}}</var> 行で、新たに発生した注文情報が与えられる。<var>i</var> 番目に与えられる注文情報は、注文 ID が <var>\\mathrm{new\\_id}_i</var> であり、その注文の発生元 (お届け先) が頂点 <var>\\mathrm{dst}_i</var> であることを表す。</li>\n<li><var>N_{\\text{put}}</var> は、その時刻において店舗で新たに車に積まれた商品の数を表す。<ul>\n<li>その時点で車が店舗にいなければ、<var>N_{\\text{put}}</var> は <var>0</var> である。</li>\n</ul>\n</li>\n<li>続く <var>N_{\\text{put}}</var> 行で、新たに車に積まれた商品に対応する注文情報が与えられる。<var>i</var> 番目に与えられる注文情報は、車に積まれた商品に対応する注文 ID が <var>\\mathrm{put\\_id}_i</var> であることを表す。</li>\n</ul>\n<p>あなたは、時刻 <var>t</var> (<var>0 \\leq t \\lt T_{\\max}</var>) における行動を表す整数 <var>\\mathrm{command}</var> を以下の形式で標準出力に出力しなければならない。</p>\n<pre><var>\\mathrm{command}</var>\n</pre>\n\n<p>ここで、<var>\\mathrm{command}</var> は以下の形式でなければならない。</p>\n<ul>\n<li><code>stay</code> を行う場合: <code>-1</code> と <var>1</var> 行で出力</li>\n<li><code>move w</code> を行う場合: <code>w</code> と <var>1</var> 行で出力</li>\n</ul>\n<p>ただし、<code>move w</code> を行う場合、<var>w</var> は以下の条件をすべて満たす必要がある。条件に違反している場合は <code>WA</code> (不正解) となる。</p>\n<ul>\n<li><var>w</var> は <var>1 \\leq w \\leq |V|</var> を満たす整数である</li>\n<li>車が頂点 <var>u</var> 上にいる場合、<var>\\left\\{ u, w \\right\\} \\in E</var> が成り立つ</li>\n<li>車が辺 <var>\\left\\{ u, v \\right\\}</var> 上にいる場合、<var>w = u</var> または <var>w = v</var> が成り立つ</li>\n</ul>\n<p>時刻 <var>t</var> におけるあなたの行動が出力された直後に、ジャッジ側から時刻 <var>t+1</var> に関する以下の情報が標準入力に与えられる。</p>\n<pre><var>\\mathrm{verdict}</var>\n<var>N_{\\text{achieve}}</var>\n<var>\\mathrm{achieve\\_id}_1</var>\n<var>\\mathrm{achieve\\_id}_2</var>\n<var>\\vdots</var>\n<var>\\mathrm{achieve\\_id}_{N_{\\text{achieve}}}</var>\n</pre>\n\n<ul>\n<li><var>\\mathrm{verdict}</var> は、時刻 <var>t</var> におけるあなたの行動が実行可能であるかを表す文字列であり、以下の <var>2</var> 種類のいずれかである。<ul>\n<li><code>OK</code>: あなたの行動が実行可能であることを表す。</li>\n<li><code>NG</code>: あなたの行動が実行不可能であることを表す。この入力を受け取った場合、あなたは <strong>プログラムを即座に終了させなければならない。</strong> 即座に終了させた場合は <code>WA</code> (不正解) となることが保証されるが、そうでない場合の動作は未定義である。</li>\n</ul>\n</li>\n<li><var>N_{\\text{achieve}}</var> は、その時刻において配達が完了した注文の数を表す。<ul>\n<li>その時点で車が頂点上にいなければ、<var>N_{\\text{achieve}}</var> は <var>0</var> である。</li>\n</ul>\n</li>\n<li>続く <var>N_{\\text{achieve}}</var> 行で、配達が完了した注文情報が与えられる。<var>i</var> 番目に与えられる注文情報は、注文 ID が <var>\\mathrm{achieve\\_id}_i</var> であることを表す。</li>\n</ul>\n<p>また、<var>T_{\\max}</var> 回目の行動に対するジャッジからの入力を受け取ったあと、あなたは <strong>プログラムを即座に終了させなければならない。</strong></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3>\n<h4>入出力制約</h4>\n<ul>\n<li> 入力で与えられる数値はすべて整数である </li>\n<li> 出力はすべて整数でなければならない </li>\n<li><var>T_{\\text{max}} = 10000</var> </li>\n<li> <var>200 \\leq |V| \\leq 400</var> </li>\n<li> <var>1.5 |V| \\leq |E| \\leq 2 |V|</var></li>\n<li><var>1 \\leq u_{i}, v_{i} \\leq |V|</var> <var>(1 \\leq i \\leq |E|)</var></li>\n<li><var>1 \\leq d_{u_i, v_i} \\leq \\lceil 4\\sqrt{2|V|} \\rceil</var> <var>(1 \\leq i \\leq |E|)</var></li>\n<li>与えられるグラフは自己ループ・多重辺が存在せず、連結であることが保証される</li>\n<li> <var>f_1 = 0</var> </li>\n<li> <var>f_i \\in \\left\\{ 1, 2 \\right\\}</var> (<var>2 \\leq i \\leq |V|</var>) </li>\n<li> <var>\\mathrm{verdict} \\in \\left\\{ \\text{\"OK\"}, \\text{\"NG\"} \\right\\}</var> </li>\n<li><var>0 \\leq N_{\\text{new}} \\leq 1</var></li>\n<li><var>1 \\leq \\mathrm{new\\_id}_{i} \\leq T_{\\text{last}}+1</var> <var>(1 \\leq i \\leq N_{\\text{new}})</var> </li>\n<ul>\n<li>注意: 上で説明されたルールに従って注文が生成されたとき、発生する注文の件数の最大値は <var>T_{\\text{last}} + 1</var> となる。ゆえに、<var>\\mathrm{new\\_id}_{i}</var> の取りうる値は <var>1</var> から <var>T_{\\text{last}} + 1</var> までの整数である。</li>\n</ul>\n<li>ジャッジからの出力全体を通して、<var>\\mathrm{new\\_{id}}_i</var> はそれぞれ相異なる整数である </li>\n<li><var>2 \\leq \\mathrm{dst}_i \\leq |V|</var> <var>(1 \\leq i \\leq N_{\\text{new}})</var></li>\n<li> 新たに車に積まれた商品に対応する注文と、配達が完了した注文について、矛盾した入力は与えられない </li>\n<li> 時刻 <var>t</var> におけるあなたの行動を表す整数は <var>-1</var> または <var>1 \\leq w \\leq |V|</var> を満たす整数 <var>w</var> でなければならない </li>\n</ul>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入出力例</h3>\n<style>\n.pre-sample-inout {\n  margin: 0;\n}\n</style>\n\n<table class=\"table table-striped table-bordered\">\n<tbody><tr>\n  <th>時間</th>\n  <th>コンテスタント</th>\n  <th>ジャッジ</th>\n  <th>説明</th>\n</tr>\n<tr>\n  <td></td>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">5 7\n1 2 5\n5 3 4\n2 4 8\n1 5 1\n2 3 3\n4 5 3\n4 3 9\n0 1 1 5 5\n500\n</pre>\n  </td>\n  <td>はじめに、ジャッジ側からグラフが与えられる。この例では <var>|V| = 5, |E| = 7</var> のグラフである。次に、それぞれの頂点について注文頻度が <var>1</var> 行で与えられる。最後に、<var>T_{\\max}</var> が与えられる。</td>\n</tr>\n<tr>\n  <td rowspan=\"3\"><var>0 \\rightarrow 1</var></td>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">1\n1 5\n1\n1\n</pre>\n  </td>\n  <td>時刻 <var>0</var> では <var>1</var> つの注文が発生しており、その注文の情報は (注文 ID <var>=1</var>, お届け先 <var>=5</var>) である。車は店舗の頂点にいるため、注文 <var>1</var> に対応する商品を車に積む。このように、注文が発生した時にすでに店舗にいた場合、それに対応する商品を即時に車に積むことができる。</td>\n</tr>\n<tr>\n  <td>\n<pre class=\"pre-sample-inout\">2\n</pre>\n  </td>\n  <td></td>\n  <td>初期状態では、車は頂点 <var>1</var> にいる。この出力は、時刻 <var>0</var> から <var>1</var> の間にコンテスタントが取る行動が「頂点 <var>2</var> に向かって距離 <var>1</var> 進む」ことであることを表す。</td>\n</tr>\n<tr>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">OK\n0\n</pre>\n    </td>\n  <td><var>1</var> 行目は、コンテスタントの行動が実行可能であることを表す。配達が完了した注文はない。</td>\n</tr>\n<tr>\n  <td rowspan=\"3\"><var>1 \\rightarrow 2</var></td>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">1\n2 2\n0\n</pre>\n  </td>\n  <td>新たに (注文 ID <var>=2</var>, お届け先 <var>=2</var>) という注文が発生している。車は頂点 <var>1</var> と頂点 <var>2</var> を結ぶ辺上にいるため、注文 <var>2</var> に対応する商品を車に積むことはできない。</td>\n</tr>\n<tr>\n  <td>\n<pre class=\"pre-sample-inout\">-1\n</pre>\n  </td>\n  <td></td>\n  <td>この出力は、車がその場にとどまることを表す。頂点上・辺上いずれの場合でもとどまることができる。</td>\n</tr>\n<tr>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">OK\n0\n</pre>\n  </td>\n  <td>注文 <var>2</var> に対応する商品を車に積んでいないため、注文 <var>2</var> の配達が完了しないことに注意せよ。</td>\n</tr>\n<tr>\n  <td rowspan=\"3\"><var>2 \\rightarrow 3</var></td>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">1\n3 4\n0\n</pre>\n  </td>\n  <td>新たに (注文 ID <var>=3</var>, お届け先 <var>=4</var>) という注文が発生している。</td>\n</tr>\n<tr>\n  <td>\n<pre class=\"pre-sample-inout\">1\n</pre>\n  </td>\n  <td></td>\n  <td>コンテスタントは頂点 <var>1</var> に向かって進もうとしている。このように、来た道を U ターンすることは可能である。</td>\n</tr>\n<tr>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">OK\n0\n</pre>\n  </td>\n  <td>配達が完了した注文はない。</td>\n</tr>\n<tr>\n  <td rowspan=\"3\"><var>3 \\rightarrow 4</var></td>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">0\n2\n2\n3\n</pre>\n  </td>\n  <td>車が店舗の頂点に戻ってきたため、注文 <var>2, 3</var> に対応する商品を車に積む。</td>\n</tr>\n<tr>\n  <td>\n<pre class=\"pre-sample-inout\">5\n</pre>\n  </td>\n  <td></td>\n  <td>コンテスタントは頂点 <var>5</var> に向かって進もうとしている。</td>\n</tr>\n<tr>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">OK\n1\n1\n</pre>\n  </td>\n  <td>注文 <var>1</var> に対応する商品が車に存在した状態で頂点 <var>5</var> を訪れたため、ID が <var>1</var> である注文について、配達が完了した。</td>\n</tr>\n<tr>\n  <td rowspan=\"3\"><var>4 \\rightarrow 5</var></td>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">0\n0\n</pre>\n  </td>\n  <td>新たな注文は何も発生していない。</td>\n</tr>\n<tr>\n  <td>\n<pre class=\"pre-sample-inout\">5\n</pre>\n  </td>\n  <td></td>\n  <td>コンテスタントは頂点 <var>5</var> に向かって進もうとしている。</td>\n</tr>\n<tr>\n  <td></td>\n  <td>\n<pre>NG\n</pre>\n  </td>\n  <td>このような行動は許されていない。自分自身への <code>move</code> が許されないことに注意せよ。</td>\n</tr>\n</tbody></table>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力の flush について</h3>\n<p>この問題では出力を flush する必要がある。例として、主要言語において <code>-1</code> と出力して flush する例は以下の通りである。</p>\n<h4>C++</h4>\n<pre class=\"prettyprint\">std::cout &lt;&lt; \"-1\" &lt;&lt; std::endl;\n</pre>\n\n<h4>Java</h4>\n<p></p><pre class=\"prettyprint\">System.out.println(\"-1\");\n</pre><p></p>\n<h4>Python 3.4</h4>\n<p></p><pre class=\"prettyprint\">print(\"-1\", flush=True)\n</pre><p></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>サンプルコード B</h3>\n<p>この問題について、以下のツールキット一式は<a href=\"https://img.atcoder.jp/hokudai-hitachi2019-1/7742d79123e4cd369848aebec76fbc63.zip\">ここ</a>からダウンロードできる。</p>\n<ul>\n<li>入力サンプルジェネレータ</li>\n<li>テスター</li>\n<li>ビキナー向けのサンプルコード</li>\n</ul>\n<p>また、ビシュアライザも<a href=\"https://img.atcoder.jp/hokudai-hitachi2019-1/d2dded0de70ff38cbb8aa6dbfb88dfc3.zip\">ここ</a>にご用意しております。</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Problem Setting</h3></section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Overview</h3>\n<ul>\n<li><strong>Concept:</strong> In this programming contest, you will run a delivery service. Customers will place orders with your shop. Each order has a unique <var>\\text{ID}</var> and should be delivered to the corresponding customer. Your delivery service has one car. The car will fetch the ordered item from the shop and deliver it to the customer.</li>\n<li><strong>Score:</strong> Your goal is to deliver as many items as possible, as quickly as possible in a given amount of time <var>T_{\\text{max}}</var>. (Orders are expected until <var>0.95 \\times T_{\\text{max}}</var>).</li>\n<li><strong>Constraint:</strong> In this contest there is no constraint on the number of items you can place in the car. However, an item can only be loaded in the car, by fetching it from the shop, after the order has been placed.</li>\n<li><strong>Problem A/B:</strong> In problem A all order positions and times are given to the contestant in advance and the contestant algorithm shall optimize the moves of the car to make as many deliveries as possible as fast as possible. On the other hand, in problem B orders appear online, that is new orders appear, while you move your car to make as many deliveries as possible as fast as possible.</li>\n</ul>\n<div style=\"text-align:center;\">\n<img alt=\"overview\" src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/7faf401c00c790b9a8cb5c6968dc80c3.png\" title=\"overview\">\n</div>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Specification of Time and Space:</h3>\n<ul>\n<li><strong>Time:</strong> In this contest we model the progress of time by integer values <var>0 \\le t &lt; T_{\\text{max}}</var>.</li>\n<li><strong>Map:</strong> In this contest we model a map by a simple, undirected, and connected graph <var>G=(V, E)</var>, consisting of a set of vertices <var>V</var> and a set of edges <var>E</var></li>\n<li><strong>Shop and customer locations:</strong> The vertices <var>u \\in V</var> are labeled from <var>1</var> to <var>|V|</var> and the vertex <var>u=1</var> denotes the location of your shop, while vertices <var>u = 2,...,|V|</var> denote locations of potential customers. Here, <var>|V|</var> denotes the number of elements of the set <var>V</var>.</li>\n<li><strong>Streets:</strong> Each edge <var>\\left\\{ u, v \\right\\} \\in E</var> represents a street connecting the vertices <var>u, v \\in V</var>. The corresponding length is given by an integer edge weight <var>d_{u, v} \\ge 1</var>.</li>\n<li><strong>Graph creation:</strong> The algorithm for generating the map graph based on a random seed is specified in the following pseudo-code. For further details, please see the sample code below.</li>\n</ul>\n<details>\n<summary style=\"display:list-item\"> <b>Pseudo code:</b> Map graph generator </summary>\n\n<ul>\n\n<li> <b>Input:</b><var>|V|</var>, <var>|E|</var>, <var>\\mathrm{MaxDegree}=5</var></li>\n\n<li> <b>2d vertex grid:</b>\n<ul>\n  <li> First, find the largest integer <var>R&gt;0</var> such that <var>|V| = R^{2} + r</var>, with <var>r</var> being the smallest possible non-negative integer.</li>\n  <li> Then we plot points <var>(x, y)</var> on the 2d vertex grid <var>(0 \\leq x, y \\lt R)</var>.</li>\n  <li> For each point <var>(x, y)</var> add a uniform random offset <var>dx, dy \\in [0, 1] </var>, giving the final vertex position <var>(x + dx, y + dy)\\in [0,R] \\times [0,R]</var>.</li>\n  <li> Finally, add the remaining <var>r</var> vertices at a uniform random position <var>(x, y)</var> with <var>0 \\leq x, y \\leq R</var>.</li>\n  <li> Vertex labels <var>u \\in V</var> are assigned by random shuffling. The shop is the vertex <var>u=1</var>.</li>\n</ul>\n</li>\n\n<li> <b>How we create Highways:</b>\n<ul>\n  <li> To generate a highway network, we create a complete graph <var>G_{\\text{comp}}</var> on the vertex set <var>u \\in V</var>, assigning each vertex pair <var>u, v \\in V \\times V</var> the Euclidean distance <var>W_{u, v}</var> as an edge weight.</li>\n  <li> Next, we construct a <a href=\"https://en.wikipedia.org/wiki/Minimum_spanning_tree\"> minimum spanning </a> tree of <var>G_{\\text{comp}}</var>. The <var>|V|-1</var> edges of the minimum spanning tree are the highway network of the graph <var>G</var>. We assign each of those edges <var>\\left\\{ u, v \\right\\}</var> an edge weight <var>d_{u,v} \\leftarrow \\lceil 2 \\times W_{u, v} \\rceil </var>.\n  </li>\n</ul>\n</li>\n\n<li> <b>How we add side roads:</b>\n<ul>\n  <li> To create a network of side roads, we successively add <var>|E|-(|V|-1)</var> edges to the graph <var>G</var> as follows:\n  <ul>\n    <li> Update <var>\\mathrm{cost}(u,v)</var>. </li>\n    <li> Among the vertex pairs <var>\\left( u, v \\right) \\in V\\times V</var>, not yet connected by an edge, select a pair with minimal <var>\\mathrm{cost}(u,v)</var>.</li>\n    <li> Assign the edge weight <var>d_{u,v} \\leftarrow \\lceil 4 \\times W_{u, v} \\rceil </var>.</li>\n  </ul>\n  </li>\n  <li>\n  Here, <var>\\mathrm{cost}(u,v)</var> is essentially based on the Euclidean distance of vertices, giving preference to connecting nearby vertices with low degree. In addition, preference is given to side roads along the rectangular grid, to avoid too many bridges. The detailed definitions are as follows:\n  <ul>\n    <li> Define <var>\\mathrm{degree}(u)</var>, the degree of vertex <var>u\\in V</var> as the number of incident edges. </li>\n    <li> Define <var>\\mathrm{color}(u)</var> for each vertex <var>u\\in V</var> according to its original position <var>(x,y)</var> on the vertex grid as:\n    <ul>\n      <li> If <var>x+y</var> is even : <var>\\mathrm{color}(u) = 0</var> </li>\n      <li> If <var>x+y</var> is odd : <var>\\mathrm{color}(u) = 1</var> </li>\n      <li> For the remaining <var>r</var> vertices : Assign a color <var>\\mathrm{color}(u) \\in \\left\\{0,1\\right\\}</var> at random. </li>\n    </ul>\n    </li>\n    <li> Define a factor <var>f(u,v)</var> as follows:\n    <ul>\n      <li> If <var>\\mathrm{color}(u)</var> and <var>\\mathrm{color}(v)</var> are the same : Set <var>\\mathrm{f}(u,v) = 5</var> </li>\n      <li> If <var>\\mathrm{color}(u)</var> and <var>\\mathrm{color}(v)</var> are different : Set <var>\\mathrm{f}(u,v) = 1</var> </li>\n    </ul>\n    </li>\n    <li> Define a factor <var>g(u)</var> as follows:\n    <ul>\n      <li> If <var>\\mathrm{degree}(u) \\lt \\mathrm{MaxDegree}</var> : Set <var>g(u)=1</var> </li>\n      <li> If <var>\\mathrm{degree}(u) \\geq \\mathrm{MaxDegree}</var> : Set <var>g(u)=\\infty</var> </li>\n    </ul>\n    </li>\n    <li> Finally, the cost is defined as follows:\n    <ul>\n      <li> <var>\\mathrm{cost}(u,v) = W_{u,v}\\times \\mathrm{degree}(u) \\times \\mathrm{degree}(v) \\times f(u,v) \\times g(u) \\times g(v)</var>. </li>\n    </ul>\n    </li>\n  </ul>\n  </li>\n</ul>\n</li>\n\n<li> <b> How we assign order frequencies: </b>\n<ul>\n  <li> Assign each vertex <var>u \\in V</var> an order frequency <var>f_u \\in \\left\\{0,1,2\\right\\}</var>.</li>\n  <li> Init the order frequency of the shop vertex: <var>f_1 \\leftarrow 0</var>. </li>\n  <li> Init the order frequency of the other vertices: <var>f_u \\leftarrow 1</var></li>\n  <li> Now determine vertices with order frequency 2. For this draw a uniform random center point <var>c=(c_x,c_y)\\in [R/4,3R/4]\\times[R/4,3R/4]</var> and then for all vertices <var>u=2,...,|V|</var> do:  \n    <ul>\n    <li> If <var>\\mathrm{EuclideanDistance}(c,u)\\le R/8 + \\mathrm{uniformRandom}[0,R/8]</var>: <var>f_{u} \\leftarrow 2</var> </li>\n    </ul>\n  </li>\n</ul>\n</li>\n\n</ul>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Specification of Car Locations and Moves:</h3>\n<p>In order to make deliveries you will operate a delivery car, which can take positions and make moves as specified below.</p>\n<ul>\n<li>\n<p><strong>Car position:</strong> A car can generally take two types of position:</p>\n<ul>\n<li>on a vertex <var>u \\in V</var>.</li>\n<li>on an edge <var>\\left\\{ u, v \\right\\} \\in E</var>. More specifically, it is located at a distance <var>x</var> <var>(0 \\lt x \\lt d_{u, v})</var> from <var> u </var> to <var> v </var>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Car move:</strong> At each step  <var> 0 \\le t &lt; T_{\\text{max}} </var> you have to choose one of the following actions in order to control your delivery car.</p>\n<ul>\n<li><code>stay</code>: stay at the current position.</li>\n<li><code>move w</code>: Take one step towards vertex <var>w \\in V</var>.</li>\n</ul>\n<p>In case of choosing <code>move w</code>, <var>w</var> must obey the following constraints. A failure to obey these constraints results in a wrong answer <code>WA</code>.\n</p><ul>\n  <li> <var>w</var> must be a vertex, i.e., <var>w \\in V</var>.</li>\n  <li> If the car is on vertex <var>u \\in V</var>, there must be an edge connecting <var>u</var> and <var>v</var>, i.e., <var>\\left\\{ u, w \\right\\} \\in E</var>.</li>\n  <li> If the car is on the edge <var>\\left\\{ u, v \\right\\} \\in E</var>, <var>w</var> must either be <var>w = u</var> or <var>w = v</var>.</li>\n</ul><p></p>\n</li>\n</ul>\n<div style=\"text-align:center;\">\n<img alt=\"Car position and moves\" title=\"Car position and moves\" src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/60c6d261238fb10fb2bb26d89d275f9c.png\">\n</div>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Orders, Deliveries, and Constraints:</h3>\n<ul>\n<li><strong>Orders:</strong> Throughout the contest each order is characterized by three quantities: A unique order ID, a vertex <var>v \\in V</var> indicating the order destination, and the order time <var>t</var> at which the order appeared. For the detailed format see below.</li>\n<li><strong>Order generation:</strong> At each time <var> 0 \\le t \\le T_{\\text{last}} = 0.95 \\times T_{\\text{max}}</var> up to one new order can appear with probability <var>p_{\\text{order}}(t)</var>. In case there is an order, the order destination <var>i</var> is chosen from the vertex set <var>V</var> with probability proportional to the order frequency <var>f_i</var>. For details, see the pseudo-code below or the sample code further below.</li>\n</ul>\n<details>\n<summary style=\"display:list-item\"> <b>Pseudo code:</b> Order generation </summary>\n<ul>\n  <li> <b>Input:</b> Last order time <var>T_{\\text{last}}</var> and average order probability <var>p_{\\text{order}}(t)</var>. </li>\n  <li> <b>Init:</b> <var> \\mathrm{ID} \\leftarrow 0</var>. </li>\n  <li> For each step <var>t = 0, ..., T_{\\text{last}} </var> do:\n    <ul>\n    <li> Generate a uniform random number <var>r \\in [0,1] </var>. </li>\n    <li> <b>If</b> <var> r \\le p_{\\text{order}}(t) </var>:\n      <ul>\n      <li> Select a vertex position <var> u \\in V </var> at random with probability proportional to the order frequency <var> f_{u} </var> of the vertex. </li>\n      <li> <var>\\mathrm{ID} \\leftarrow \\mathrm{ID} + 1</var> </li>\n      <li> place order (new order ID, order time <var>t</var>, vertex position\n      <var> u \\in V </var>)</li>\n      </ul>\n    </li>\n    <li> <b>Else:</b> place no order</li>\n    </ul>\n  </li>\n</ul>\n\n<ul style=\"list-style:none;\">\n<li> <b>Note:</b> The average order probability is defined as follows:\n</li><li>\n<var> p_{\\text{order}}(t) =\n\\begin{cases}\nt / T_{\\text{peak}},  &amp;\n\\text{if } 0\\le t \\lt T_{\\text{peak}}, \\\\\n(T_{\\text{last}} - t) / (T_{\\text{last}}- T_{\\text{peak}}),  &amp;\n\\text{if } T_{\\text{peak}} \\le t \\lt T_{\\text{last}}, \\\\\n0, &amp;\n\\text{if } T_{\\text{last}} \\le t,\n\\end{cases}\n</var></li>\n<li>where <var>T_{\\text{last}}:=0.95 \\times T_{\\max}</var> and <var>T_{\\text{peak}}</var> is drawn randomly uniform from the interval <var>[0, T_{\\text{last}}]</var>.</li>\n<li> Note: The value of <var>T_{\\text{peak}}</var> will not be given as an input. </li>\n</ul>\n\n<div style=\"text-align:center;\">\n<img src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/caa24f9e6a715e0d1a778f1fdfe4e14b.png\">\n</div>\n</details>\n\n<ul>\n<li><strong>Delivery:</strong> To deliver an order, the contestant must do the following steps after the order has been placed:<ul>\n<li><strong>(1st) Move the car onto the shop:</strong> Note: When moving a car onto the shop, all orders with order time less than or equal to the current time, will be transfered into the car. On the other hand, orders which have not appeared yet, cannot be placed into the car.</li>\n<li><strong>(2nd) Move the car to the customer position:</strong> To finalize a delivery, move the car onto the vertex of the customer position. Note: Orders which have not been transfered into the car yet, will not be delivered, even if you arrive at the customer position.</li>\n</ul>\n</li>\n</ul>\n<div style=\"text-align:center;\">\n<img alt=\"constraint image\" src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/03b28647c6ddc92cc3cbb33ade09f468.png\" title=\"Constraints\">\n</div>\n\n<ul>\n<li><strong>Constraints:</strong> Throughout the contest, we assume each order has a unique <var>\\text{ID}</var> and should be delivered to the corresponding customer. It is further assumed that an unlimited number of orders can be placed in the car.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3>\n<ul>\n<li> During the contest the total score of a submission is determined by summing the score of the submission with respect to 30 input cases.</li>\n<li> After the contest a system test will be performed. To this end, the contestant's <b>last submission</b> will be scored by summing the score of the submission on 100 previously unseen input cases.</li>\n<li> For each input case, the score is calculated as follows:\n<p style=\"text-align:center;\">\n    <var> \\text{Score} =\n    \\sum_{i \\in D} {(T_{\\text{max}})}^{2} - {(\\mathrm{waitingTime}_i)}^{2}, </var>\n</p>\nHere we use the following definitions:\n<ul>\n<li> <var> D </var> : the set of orders delivered until <var>t=T_{\\text{max}}</var></li>\n<li> the waiting time of the <var>i</var>th order: <var>\\mathrm{waitingTime}_i = \\mathrm{deliveredTime}_i - \\mathrm{orderedTime}_i</var>.</li>\n<li>Note that an input case giving the output <code>WA</code> will receive <var>0</var> points.</li>\n</ul>\n</li>\n</ul></section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Particulars of Problem B:</h3>\n<p>\nProblem B is an <span style=\"color:red\"> interactive </span> contest, where the contestant code successively receives updates on newly generated and delivered orders from a host code, while simultaneously servicing the customer by moving the car to a neighboring position in every step <var>t=0,...,T_{\\max}-1</var>. The precise flow which details the interaction of the contestant and host code is shown below.\n</p>\n\n<table class=\"table table-bordered\">\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th>Contestant Code</th>\n<th>Host Code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"></td>\n<td></td>\n<td>Generate and output graph <var>G</var></td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td></td>\n<td>Time <var>t</var>: Generate and output new orders</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td></td>\n<td>Time <var>t</var>: If on shop, output orders loaded into car</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td>Time <var>t</var>: Determine and output a move</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td></td>\n<td>Check feasibility of move; If move unfeasible: output <code>NG</code>, If feasible: output <code>OK</code></td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td></td>\n<td>Time <var>t+1</var>: update and output information on delivered items (if any)</td>\n</tr>\n</tbody>\n</table>\n<p>Note: The host code outputs the graph only once. The processes marked by a \"+\" on the left side of the table are repeated iteratively for integers <var>t</var> in <var> t = 0,..., T_{\\max} - 1</var>.</p>\n<hr>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input/Output Format for the Standard IO</h3>\n<p>At first, the host code will output a graph <var>G</var>, the order frequencies <var>f_{i}</var> for each vertex <var>i</var>, which are proportional to the probability of an order to appear at vertex <var>i</var>, and the total number of steps <var>T_{\\max}</var>.</p>\n<pre><var>|V|</var> <var>|E|</var>\n<var>u_1</var> <var>v_1</var> <var>d_{u_1, v_1}</var>\n<var>u_2</var> <var>v_2</var> <var>d_{u_2, v_2}</var>\n<var>\\vdots</var>\n<var>u_{|E|}</var> <var>v_{|E|}</var> <var>d_{u_{|E|}, v_{|E|}}</var>\n<var>f_1</var> <var>f_2</var> <var>\\ldots</var> <var>f_{|V|}</var>\n<var>T_{\\max}</var>\n</pre>\n\n<ul>\n<li>First line: <var>|V|</var> number of vertices, <var>|E|</var> number of edges</li>\n<li>The next <var>|E|</var> lines: The edges of the graph. In particular, the <var>i</var>th line denotes the vertices <var>u_i</var> and <var>v_i</var> which form an edge, along with the corresponding edge weight <var>d_{u_i, v_i}</var>.</li>\n<li>The next line: The order frequencies <var>f_i</var> which determine the probability of an order at vertex <var>i</var> as <var>p_{i}=\\frac{f_{i}}{\\sum_{i}f_{i}}</var>.</li>\n<li>The last line: The total number of car updates <var>T_{\\max}</var>.</li>\n</ul>\n<p>At time <var>t</var> we first obtain the following information through the standard input.</p>\n<pre><var>N_{\\text{new}}</var>\n<var>\\mathrm{new\\_id}_1</var> <var>\\mathrm{dst}_1</var>\n<var>\\mathrm{new\\_id}_2</var> <var>\\mathrm{dst}_2</var>\n<var>\\vdots</var>\n<var>\\mathrm{new\\_id}_{N_{\\text{new}}}</var> <var>\\mathrm{dst}_{N_{\\text{new}}}</var>\n<var>N_{\\text{put}}</var>\n<var>\\mathrm{put\\_id}_1</var>\n<var>\\mathrm{put\\_id}_2</var>\n<var>\\mathrm{put\\_id}_{N_{\\text{put}}}</var>\n</pre>\n\n<ul>\n<li><var>N_{\\text{new}}</var> represents the number of new orders which appeared at time <var>t</var>.</li>\n<li>The next <var>N_{\\text{new}}</var> lines give the newly generated order information. The <var>i</var>th order information indicates that the order ID <var>\\mathrm{new_{id}}_i</var> of the new order, while <var>\\mathrm{dst}_i</var> denotes the vertex to which the customer wishes the order to be delivered.</li>\n<li><var>N_{\\text{put}}</var> represents the number of items transfered into the car at time <var>t</var>.<ul>\n<li>If the car is not at the vertex of the store <var>N_{\\text{put}}</var> will be zero.</li>\n</ul>\n</li>\n<li>The subsequent <var>N_{\\text{put}}</var> lines indicate the order information for the newly loaded items. In particular, the <var>i</var>th line indicates that the order ID corresponding to the product loaded in the car is <var>\\mathrm{put_{id}}_i</var>.</li>\n</ul>\n<p>Next, in order to move the delivery car to a neighboring position the contestant code must at every time <var>t</var> (<var>0 \\leq t \\lt T_{\\max}</var>) output the following <var>\\mathrm{command}</var> to the standard output.</p>\n<pre><var>\\mathrm{command}</var>\n</pre>\n\n<p>Here, <var>\\mathrm{command}</var> must be of the following form</p>\n<ul>\n<li>If you want the car to <code>stay</code> at its current position, send <code>-1</code> to the standard output</li>\n<li>If you want the car to move one step towards a neigboring vertex <code>move w</code>, send <code>w</code> to the standard output</li>\n</ul>\n<p>Note: In case you choose <code>move w</code>, <var>w</var> must meet all of the following conditions. If any of the following conditions is violated, the host code will output <code>NG</code> and the contestant should terminate the program, ultimately leading to <code>WA</code> (incorrect).</p>\n<ul>\n<li><var>w</var> is a vertex index with <var>w \\in \\left\\{1, ... , |V|\\right\\}</var></li>\n<li>If the car is on a vertex <var>u</var>, the edge <var>\\left\\{ u, w \\right\\} \\in E</var> must exist</li>\n<li>If the car is on an edge <var>\\left\\{ u, v \\right\\}</var>, <var>w</var> must either be <var>w = u</var> or <var>w = v</var></li>\n</ul>\n<p>After your action at time <var> t </var> is send to the standard output, the host code will send the following information about time <var> t + 1 </var> to the standard input.</p>\n<pre><var>\\mathrm{verdict}</var>\n<var>N_{\\text{achieve}}</var>\n<var>\\mathrm{achieve\\_id}_1</var>\n<var>\\mathrm{achieve\\_id}_2</var>\n<var>\\vdots</var>\n<var>\\mathrm{achieve\\_id}_{N_{\\text{achieve}}}</var>\n</pre>\n\n<ul>\n<li><var>\\mathrm{verdict}</var> is a string indicating whether your action at time <var> t </var> was valid. It can be one of the two following options.<ul>\n<li><code>OK</code>: Indicating that your action was feasible</li>\n<li><code>NG</code>: Indicates that your action is infeasible. If you receive this input, <strong>you must terminate the program immediately.</strong> It is guaranteed to be WA (incorrect), if it is terminated immediately.If you do not terminate immediately the behavior is undefined.</li>\n</ul>\n</li>\n<li><var>N_{\\text{achieve}}</var> represents the number of orders that have been delivered at  time <var>t</var>.<ul>\n<li>If the car is not at a delivery vertex, no orders have been delivered and <var>N_{\\text{achieve}}=0</var>.</li>\n</ul>\n</li>\n<li>The subsequent <var>N_{\\text{achieve}}</var> lines indicate the delivered orders. In particular, the <var>i</var>th line indicates the order ID <var>\\mathrm{achieve\\_{id}}_i</var>.</li>\n</ul>\n<p>Finally, after receiving the standard input of the host code after the last step <var>T_{\\max}</var> <strong>you must terminate the program immediately.</strong></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<h4>I/O Constraints</h4>\n<ul>\n<li> All numbers given through the standard input are integers. </li>\n<li> All outputs must be integers </li>\n<li> <var>T_{\\text{max}} = 10000</var> </li>\n<li> <var>200 \\leq |V| \\leq 400</var> </li>\n<li> <var>1.5 |V| \\leq |E| \\leq 2|V|</var></li>\n<li><var>1 \\leq u_{i}, v_{i} \\leq |V|</var> <var>(1 \\leq i \\leq |E|)</var></li>\n<li><var>1 \\leq d_{u_i, v_i} \\leq \\lceil 4\\sqrt{2|V|} \\rceil</var> <var>(1 \\leq i \\leq |E|)</var></li>\n<li>The given graph has no self-loops, no multiple edges and is guaranteed to be connected.</li>\n<li> <var>f_1 = 0</var> </li>\n<li> <var>f_i \\in \\left\\{ 1, 2 \\right\\}</var> (<var>2 \\leq i \\leq |V|</var>) </li>\n<li> <var>\\mathrm{verdict} \\in \\left\\{ \\text{\"OK\"}, \\text{\"NG\"} \\right\\}</var> </li>\n<li><var>0 \\leq N_{\\text{new}} \\leq 1</var></li>\n<li><var>1 \\leq \\mathrm{new\\_id}_{i} \\leq T_{\\text{last}}+1</var> <var>(1 \\leq i \\leq N_{\\text{new}})</var>. Note: If all orders are generated by the order generation rule as explained above, the total number of orders is at most <var>T_{\\text{last}}+1</var>. Therefore, the possible range of <var>\\mathrm{new\\_id}_{i}</var> should be from <var>1</var> to <var>T_{\\text{last}}+1</var>.</li>\n<li>The order IDs <var>\\mathrm{new\\_{id}}_i</var> are unique. </li>\n<li><var>2 \\leq \\mathrm{dst}_i \\leq |V|</var> <var>(1 \\leq i \\leq N_{\\text{new}})</var></li>\n<li> The integer which the contestant outputs to the standard output at time <var>t</var> must either be <var>-1</var> or <var>1 \\leq w \\leq |V|</var> </li>\n</ul>\n\n<hr>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input/Output Example</h3>\n<style>\n.pre-sample-inout {\n  margin: 0;\n}\n</style>\n\n<table class=\"table table-striped table-bordered\">\n<tbody><tr>\n  <th>Time</th>\n  <th>Contestant</th>\n  <th>Host Code</th>\n  <th>Explanation</th>\n</tr>\n<tr>\n  <td></td>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">5 7\n1 2 5\n5 3 4\n2 4 8\n1 5 1\n2 3 3\n4 5 3\n4 3 9\n0 1 1 5 5\n500\n</pre>\n  </td>\n  <td> At first, the host code provides the graph data through the standard input. In this example, the graph has <var>|V| = 5</var> vertices and <var>| E | = 7</var> edges. Next, the order frequency for each vertex is given in one line. Finally, <var>T_{\\max}</var> is given.\n</td>\n</tr>\n<tr>\n  <td rowspan=\"3\"><var>0 \\rightarrow 1</var></td>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">1\n1 5\n1\n1\n</pre>\n  </td>\n  <td> At time <var>t=0</var> we get one order. This order has ID<var>= 1</var> and should be delivered to vertex <var> 5</var>. Because your car is currently at vertex one, the order will be automatically transfered into your car. In this way, when your car is at the shop, all orders which have been made at present and before, will automatically be loaded into your car.</td>\n</tr>\n<tr>\n  <td>\n<pre class=\"pre-sample-inout\">2\n</pre>\n  </td>\n  <td></td>\n  <td>You decided to move one step towards vertex.</td>\n</tr>\n<tr>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">OK\n0\n</pre>\n    </td>\n  <td>The first line indicates that your move was feasible. The second line shows that no orders have been delivered.</td>\n</tr>\n<tr>\n  <td rowspan=\"3\"><var>1 \\rightarrow 2</var></td>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">1\n2 2\n0\n</pre>\n  </td>\n  <td> One new order (ID <var>=2</var>, delivery vertex  <var>=2</var>) has occured. Your car is on the edge between vertex <var>1</var> and <var>2</var>, so zero orders have been transfered to your car.</td>\n</tr>\n<tr>\n  <td>\n<pre class=\"pre-sample-inout\">-1\n</pre>\n  </td>\n  <td></td>\n  <td>You decided to keep your car in the same position.</td>\n</tr>\n<tr>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">OK\n0\n</pre>\n  </td>\n  <td> Your move was valid. No orders will be delivered, because you are not at a delivery item position.</td>\n</tr>\n<tr>\n  <td rowspan=\"3\"><var>2 \\rightarrow 3</var></td>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">1\n3 4\n0\n</pre>\n  </td>\n  <td>A new order (ID <var>=3</var>, delivery vertex <var>=4</var>) has appeared. </td>\n</tr>\n<tr>\n  <td>\n<pre class=\"pre-sample-inout\">1\n</pre>\n  </td>\n  <td></td>\n  <td>You decided to move back one step towards vertex <var>1</var>. In this way you are allowed to perform a U-turn.</td>\n</tr>\n<tr>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">OK\n0\n</pre>\n  </td>\n  <td>No orders have been delivered.</td>\n</tr>\n<tr>\n  <td rowspan=\"3\"><var>3 \\rightarrow 4</var></td>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">0\n2\n2\n3\n</pre>\n  </td>\n  <td>Since the car has returned to the store, products corresponding to order ID 2 and 3 are loaded onto the car.</td>\n</tr>\n<tr>\n  <td>\n<pre class=\"pre-sample-inout\">5\n</pre>\n  </td>\n  <td></td>\n  <td>The contestant has decided to move one step towards vertex 5.</td>\n</tr>\n<tr>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">OK\n1\n1\n</pre>\n  </td>\n  <td>Since you arrived at vertex 5, the order with ID <var>1</var> was delivered.</td>\n</tr>\n<tr>\n  <td rowspan=\"3\"><var>4 \\rightarrow 5</var></td>\n  <td></td>\n  <td>\n<pre class=\"pre-sample-inout\">0\n0\n</pre>\n  </td>\n  <td>There is no new order. </td>\n</tr>\n<tr>\n  <td>\n<pre class=\"pre-sample-inout\">5\n</pre>\n  </td>\n  <td></td>\n  <td>The contestant decides to move one step towards vertex <var>5</var>.</td>\n</tr>\n<tr>\n  <td></td>\n  <td>\n<pre>NG\n</pre>\n  </td>\n  <td>The input was invalid and you should terminate your program. </td>\n</tr>\n</tbody></table>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Using the Standard Output</h3>\n<p>When returning your move instruction to the standard output, please use the flush command. As an example, consider the case where you want to output <code>-1</code>. This is how to do it in some of the major programming languages.</p>\n<h4>C++</h4>\n<pre class=\"prettyprint\">std::cout &lt;&lt; \"-1\" &lt;&lt; std::endl;\n</pre>\n\n<h4>Java</h4>\n<p></p><pre class=\"prettyprint\">System.out.println(\"-1\");\n</pre><p></p>\n<h4>Python 3.4</h4>\n<p></p><pre class=\"prettyprint\">print(\"-1\", flush=True)\n</pre><p></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Code B</h3>\n<p>A software toolkit for generation of input samples, scoring and testing on a local contestant environment, and  sample codes for beginners\nis provided through the following <a href=\"https://img.atcoder.jp/hokudai-hitachi2019-1/7742d79123e4cd369848aebec76fbc63.zip\">link</a>. In addition we provide <a href=\"https://img.atcoder.jp/hokudai-hitachi2019-1/d2dded0de70ff38cbb8aa6dbfb88dfc3.zip\">software for visualizing</a> the contestants results.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/hokudai-hitachi2019-1/tasks/hokudai_hitachi2019_1_b"}