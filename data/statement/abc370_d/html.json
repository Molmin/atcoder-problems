{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>400</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>縦 <var>H</var> マス、横 <var>W</var> マスのグリッドがあります。上から <var>i</var> 行目、左から <var>j</var> 列目のマスを <var>(i, j)</var> と表します。<br>\nはじめ、全てのマスには壁が <var>1</var> 個ずつ立てられています。<br>\n以下で説明されるクエリを <var>Q</var> 個与えられる順に処理した後に、残っている壁の個数を求めてください。</p>\n<p><var>q</var> 番目のクエリでは整数 <var>R_q, C_q</var> が与えられます。<br>\nあなたは <var>(R_q, C_q)</var> に爆弾を置いて壁を爆破します。その結果、以下の処理が行われます。</p>\n<ul>\n<li><var>(R_q, C_q)</var> に壁が存在する場合は、その壁を破壊して処理を終了する。</li>\n<li><var>(R_q, C_q)</var> に壁が存在しない場合は、<var>(R_q, C_q)</var> から上下左右に見て最初に現れる壁を破壊する。厳密に述べると、以下の <var>4</var> 個の処理が同時に行われる。<ul>\n<li><var>(i, C_q)</var> に壁が存在して <var>(k, C_q)</var> <var>(i \\lt k \\lt R_q)</var> に壁が存在しないような <var>i \\lt R_q</var> が存在する時、<var>(i, C_q)</var> に存在する壁を破壊する。</li>\n<li><var>(i, C_q)</var> に壁が存在して <var>(k, C_q)</var> <var>(R_q \\lt k \\lt i)</var> に壁が存在しないような <var>i \\gt R_q</var> が存在する時、<var>(i, C_q)</var> に存在する壁を破壊する。</li>\n<li><var>(R_q, j)</var> に壁が存在して <var>(R_q, k)</var> <var>(j \\lt k \\lt C_q)</var> に壁が存在しないような <var>j \\lt C_q</var> が存在する時、<var>(R_q, j)</var> に存在する壁を破壊する。</li>\n<li><var>(R_q, j)</var> に壁が存在して <var>(R_q, k)</var> <var>(C_q \\lt k \\lt j)</var> に壁が存在しないような <var>j \\gt C_q</var> が存在する時、<var>(R_q, j)</var> に存在する壁を破壊する。</li>\n</ul>\n</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq H, W</var></li>\n<li><var>H \\times W \\leq 4 \\times 10^5</var></li>\n<li><var>1 \\leq Q \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq R_q \\leq H</var></li>\n<li><var>1 \\leq C_q \\leq W</var></li>\n<li>入力される値は全て整数</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>H</var> <var>W</var> <var>Q</var>\n<var>R_1</var> <var>C_1</var>\n<var>R_2</var> <var>C_2</var>\n<var>\\vdots</var>\n<var>R_Q</var> <var>C_Q</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>クエリを全て処理した後に、残っている壁の個数を出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>2 4 3\n1 2\n1 2\n1 3\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>2\n</pre>\n<p>クエリを処理する手順を説明すると次のようになります。</p>\n<ul>\n<li><var>1</var> 番目のクエリでは <var>(R_1, C_1) = (1, 2)</var> である。 <var>(1, 2)</var> に壁は存在するので <var>(1, 2)</var> の壁が爆破される。</li>\n<li><var>2</var> 番目のクエリでは <var>(R_2, C_2) = (1, 2)</var> である。 <var>(1, 2)</var> に壁は存在しないので、<var>(1, 2)</var> から上下左右に見て最初に現れる壁である <var>(2,2),(1,1),(1,3)</var> が爆破される。</li>\n<li><var>3</var> 番目のクエリでは <var>(R_2, C_2) = (1, 3)</var> である。 <var>(1, 3)</var> に壁は存在しないので、<var>(1, 3)</var> から上下左右に見て最初に現れる壁である <var>(2,3),(1,4)</var> が爆破される。</li>\n</ul>\n<p>全てのクエリを処理した後に残っている壁は <var>(2, 1), (2, 4)</var> の <var>2</var> 個です。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>5 5 5\n3 3\n3 3\n3 2\n2 2\n1 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>10\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>4 3 10\n2 2\n4 1\n1 1\n4 2\n2 1\n3 1\n1 3\n1 2\n4 3\n4 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>2\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a grid with <var>H</var> rows and <var>W</var> columns. Let <var>(i, j)</var> denote the cell at the <var>i</var>-th row from the top and <var>j</var>-th column from the left.<br>\nInitially, there is one wall in each cell.<br>\nAfter processing <var>Q</var> queries explained below in the order they are given, find the number of remaining walls.</p>\n<p>In the <var>q</var>-th query, you are given two integers <var>R_q</var> and <var>C_q</var>.<br>\nYou place a bomb at <var>(R_q, C_q)</var> to destroy walls. As a result, the following process occurs.</p>\n<ul>\n<li>If there is a wall at <var>(R_q, C_q)</var>, destroy that wall and end the process.</li>\n<li>If there is no wall at <var>(R_q, C_q)</var>, destroy the first walls that appear when looking up, down, left, and right from <var>(R_q, C_q)</var>. More precisely, the following four processes occur simultaneously:<ul>\n<li>If there exists an <var>i \\lt R_q</var> such that a wall exists at <var>(i, C_q)</var> and no wall exists at <var>(k, C_q)</var> for all <var>i \\lt k \\lt R_q</var>, destroy the wall at <var>(i, C_q)</var>.</li>\n<li>If there exists an <var>i \\gt R_q</var> such that a wall exists at <var>(i, C_q)</var> and no wall exists at <var>(k, C_q)</var> for all <var>R_q \\lt k \\lt i</var>, destroy the wall at <var>(i, C_q)</var>.</li>\n<li>If there exists a <var>j \\lt C_q</var> such that a wall exists at <var>(R_q, j)</var> and no wall exists at <var>(R_q, k)</var> for all <var>j \\lt k \\lt C_q</var>, destroy the wall at <var>(R_q, j)</var>.</li>\n<li>If there exists a <var>j \\gt C_q</var> such that a wall exists at <var>(R_q, j)</var> and no wall exists at <var>(R_q, k)</var> for all <var>C_q \\lt k \\lt j</var>, destroy the wall at <var>(R_q, j)</var>.</li>\n</ul>\n</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H, W</var></li>\n<li><var>H \\times W \\leq 4 \\times 10^5</var></li>\n<li><var>1 \\leq Q \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq R_q \\leq H</var></li>\n<li><var>1 \\leq C_q \\leq W</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var> <var>Q</var>\n<var>R_1</var> <var>C_1</var>\n<var>R_2</var> <var>C_2</var>\n<var>\\vdots</var>\n<var>R_Q</var> <var>C_Q</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of remaining walls after processing all queries.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 4 3\n1 2\n1 2\n1 3\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The process of handling the queries can be explained as follows:</p>\n<ul>\n<li>In the 1st query, <var>(R_1, C_1) = (1, 2)</var>. There is a wall at <var>(1, 2)</var>, so the wall at <var>(1, 2)</var> is destroyed.</li>\n<li>In the 2nd query, <var>(R_2, C_2) = (1, 2)</var>. There is no wall at <var>(1, 2)</var>, so the walls at <var>(2,2),(1,1),(1,3)</var>, which are the first walls that appear when looking up, down, left, and right from <var>(1, 2)</var>, are destroyed.</li>\n<li>In the 3rd query, <var>(R_3, C_3) = (1, 3)</var>. There is no wall at <var>(1, 3)</var>, so the walls at <var>(2,3),(1,4)</var>, which are the first walls that appear when looking up, down, left, and right from <var>(1, 3)</var>, are destroyed.</li>\n</ul>\n<p>After processing all queries, there are two remaining walls, at <var>(2, 1)</var> and <var>(2, 4)</var>.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 5 5\n3 3\n3 3\n3 2\n2 2\n1 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 3 10\n2 2\n4 1\n1 1\n4 2\n2 1\n3 1\n1 3\n1 2\n4 3\n4 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/abc370/tasks/abc370_d"}