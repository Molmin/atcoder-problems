{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>900</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>非負整数からなる集合 <var>X</var> に対し、<var>X</var> に属する <var>2</var> つの整数（同じ整数でもよい）のビット単位 <var>\\mathrm{XOR}</var> として表せるような非負整数からなる集合を <var>f(X)</var> と表します。例えば <var>X=\\lbrace 1, 2, 4\\rbrace</var> に対し <var>f(X)</var> は <var>\\lbrace 0, 3, 5, 6\\rbrace</var> となります。</p>\n<p><var>N</var> 個の <var>2^M</var> 未満の非負整数からなる集合 <var>S=\\lbrace A_1, A_2, \\dots, A_N\\rbrace</var> が与えられます。</p>\n<p>あなたは以下の操作を好きな回数行えます。</p>\n<ul>\n<li><var>S</var> を <var>2</var> つの集合 <var>T_1, T_2</var> に分ける（ <var>T_1, T_2</var> のいずれかが空集合になってもよい）。その後、 <var>S</var> を <var>f(T_1), f(T_2)</var> の和集合で置き換える。</li>\n</ul>\n<p><var>S</var> を <var>\\lbrace 0\\rbrace</var> にするのに必要な最小の操作回数を求めてください。</p>\n<details>\n    <summary>\n        ビット単位 <var>\\mathrm{XOR}</var> 演算とは\n    </summary>\n    <p>\n        非負整数 <var>A, B</var> のビット単位 <var>\\mathrm{XOR}</var> 、<var>A \\oplus B</var> は、以下のように定義されます。\n        </p><ul>\n            <li><var>A \\oplus B</var> を二進表記した際の <var>2^k</var> (<var>k \\geq 0</var>) の位の数は、<var>A, B</var> を二進表記した際の <var>2^k</var> の位の数のうち一方のみが <var>1</var> であれば <var>1</var>、そうでなければ <var>0</var> である。</li>\n        </ul>\n        例えば、<var>3 \\oplus 5 = 6</var> となります (二進表記すると: <var>011 \\oplus 101 = 110</var>)。<br>  \n        一般に <var>k</var> 個の非負整数 <var>p_1, p_2, p_3, \\dots, p_k</var> のビット単位 <var>\\mathrm{XOR}</var> は <var>(\\dots ((p_1 \\oplus p_2) \\oplus p_3) \\oplus \\dots \\oplus p_k)</var> と定義され、これは <var>p_1, p_2, p_3, \\dots, p_k</var> の順番によらないことが証明できます。  \n    <p></p>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq N \\leq 300</var></li>\n<li><var>1 \\leq M \\leq 300</var></li>\n<li><var>0 \\leq A_i &lt; 2^{M}</var></li>\n<li><var>A_i\\ (1\\leq i \\leq N)</var> は互いに相異なる</li>\n<li>各 <var>A_i</var> は <var>2</var> 進表記でちょうど <var>M</var> 桁で与えられる（ <var>A_i</var> が <var>M</var> 桁より少ない場合、 leading zero をつけて与えられる）</li>\n<li>与えられる入力はすべて整数</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var>\n<var>A_2</var>\n<var>\\vdots</var>\n<var>A_N</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>答えを出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>4 2\n00\n01\n10\n11\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>2\n</pre>\n<p><var>1</var> 回目の操作では <var>T_1=\\lbrace 0, 1\\rbrace, T_2=\\lbrace 2, 3\\rbrace</var> と分けると <var>f(T_1) =\\lbrace 0, 1\\rbrace, f(T_2) =\\lbrace 0, 1\\rbrace</var> なので <var>S</var> は <var>\\lbrace 0, 1\\rbrace</var> に置き換わります。</p>\n<p><var>2</var> 回目の操作で <var>T_1=\\lbrace 0\\rbrace, T_2=\\lbrace 1\\rbrace</var> と分けると <var>S=\\lbrace 0\\rbrace</var> となります。</p>\n<p><var>2</var> 回未満の操作で <var>S</var> を <var>\\lbrace 0\\rbrace</var> にすることはできないので答えは <var>2</var> となります。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>1 8\n10011011\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>1\n</pre>\n<p><var>1</var> 回目の操作で <var>T_1=\\lbrace 155\\rbrace, T_2=\\lbrace \\rbrace</var> と分けると <var>S</var> は <var>\\lbrace 0\\rbrace</var> になります。操作の際は <var>T_1, T_2</var> のいずれかが空集合になっても構いません。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>1 2\n00\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>0\n</pre>\n<p>はじめから <var>S=\\lbrace 0\\rbrace</var> であり、操作する必要がありません。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 4</h3><pre>20 20\n10011011111101101111\n10100111100001111100\n10100111100110001111\n10011011100011011111\n11001000001110011010\n10100111111011000101\n11110100001001110010\n10011011100010111001\n11110100001000011010\n01010011101011010011\n11110100010000111100\n01010011101101101111\n10011011100010110111\n01101111101110001110\n00111100000101111010\n01010011101111010100\n10011011100010110100\n01010011110010010011\n10100111111111000001\n10100111111000010101\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 4</h3><pre>10\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For a set <var>X</var> of non-negative integers, let <var>f(X)</var> denote the set of non-negative integers that can be represented as the bitwise <var>\\mathrm{XOR}</var> of two integers (possibly the same) in <var>X</var>. As an example, for <var>X=\\lbrace 1, 2, 4\\rbrace</var>, we have <var>f(X)=\\lbrace 0, 3, 5, 6\\rbrace</var>.</p>\n<p>You are given a set of <var>N</var> non-negative integers less than <var>2^M</var>: <var>S=\\lbrace A_1, A_2, \\dots, A_N\\rbrace</var>.</p>\n<p>You may perform the following operation any number of times.</p>\n<ul>\n<li>Divide <var>S</var> into two sets <var>T_1</var> and <var>T_2</var> (one of them may be empty). Then, replace <var>S</var> with the union of <var>f(T_1)</var> and <var>f(T_2)</var>.</li>\n</ul>\n<p>Find the minimum number of operations needed to make <var>S=\\lbrace 0\\rbrace</var>.</p>\n<details>\n    <summary>\n        What is bitwise <var>\\mathrm{XOR}</var>?\n    </summary>\n    <p>\n        The bitwise <var>\\mathrm{XOR}</var> of non-negative integers <var>A</var> and <var>B</var>, <var>A \\oplus B</var>, is defined as follows.\n        </p><ul>\n            <li>When <var>A \\oplus B</var> is written in binary, the <var>k</var>-th lowest bit (<var>k \\geq 0</var>) is <var>1</var> if exactly one of the <var>k</var>-th lowest bits of <var>A</var> and <var>B</var> is <var>1</var>, and <var>0</var> otherwise.</li>\n        </ul>\n        For instance, <var>3 \\oplus 5 = 6</var> (in binary: <var>011 \\oplus 101 = 110</var>).<br>  \n        Generally, the bitwise <var>\\mathrm{XOR}</var> of <var>k</var> non-negative integers <var>p_1, p_2, p_3, \\dots, p_k</var> is defined as <var>(\\dots ((p_1 \\oplus p_2) \\oplus p_3) \\oplus \\dots \\oplus p_k)</var>, which can be proved to be independent of the order of <var>p_1, p_2, p_3, \\dots, p_k</var>.\n    <p></p>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 300</var></li>\n<li><var>1 \\leq M \\leq 300</var></li>\n<li><var>0 \\leq A_i &lt; 2^{M}</var></li>\n<li><var>A_i\\ (1\\leq i \\leq N)</var> are pairwise distinct.</li>\n<li>Each <var>A_i</var> is given with exactly <var>M</var> digits in binary (possibly with leading zeros).</li>\n<li>All values in the input are integers.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var>\n<var>A_2</var>\n<var>\\vdots</var>\n<var>A_N</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 2\n00\n01\n10\n11\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>In the first operation, you can divide <var>S</var> into <var>T_1=\\lbrace 0, 1\\rbrace, T_2=\\lbrace 2, 3\\rbrace</var>, for which <var>f(T_1) =\\lbrace 0, 1\\rbrace, f(T_2) =\\lbrace 0, 1\\rbrace</var>, replacing <var>S</var> with <var>\\lbrace 0, 1\\rbrace</var>.</p>\n<p>In the second operation, you can divide <var>S</var> into <var>T_1=\\lbrace 0\\rbrace, T_2=\\lbrace 1\\rbrace</var>, making <var>S=\\lbrace 0\\rbrace</var>.</p>\n<p>There is no way to make <var>S=\\lbrace 0\\rbrace</var> in fewer than two operations, so the answer is <var>2</var>.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 8\n10011011\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>In the first operation, you can divide <var>S</var> into <var>T_1=\\lbrace 155\\rbrace, T_2=\\lbrace \\rbrace</var>, making <var>S=\\lbrace 0\\rbrace</var>. Note that <var>T_1</var> or <var>T_2</var> may be empty.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 2\n00\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>We have <var>S=\\lbrace 0\\rbrace</var> from the beginning; no operation is needed.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>20 20\n10011011111101101111\n10100111100001111100\n10100111100110001111\n10011011100011011111\n11001000001110011010\n10100111111011000101\n11110100001001110010\n10011011100010111001\n11110100001000011010\n01010011101011010011\n11110100010000111100\n01010011101101101111\n10011011100010110111\n01101111101110001110\n00111100000101111010\n01010011101111010100\n10011011100010110100\n01010011110010010011\n10100111111111000001\n10100111111000010101\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>10\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/arc155/tasks/arc155_e"}