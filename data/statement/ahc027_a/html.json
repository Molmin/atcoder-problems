{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>ストーリー</h3><p>F社はロボット掃除機「お掃除高橋くん2号」を開発し、F社のオフィスの掃除を任せることにした。\nお掃除高橋くん2号は、太陽光発電により永久に動き続けることが出来、決められたルートでの掃除を無限に繰り返す。\nオフィスは場所によって汚れやすさが異なり、汚れやすい場所を頻繁に掃除することで、オフィス全体をより綺麗に保つことが出来る。\nオフィスを出来るだけ綺麗に保つことが出来るような掃除ルートを決定して欲しい。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N\\times N</var> マスの盤面がある。\n一番左上のマスの座標を <var>(0,0)</var> とし、そこから下方向に <var>i</var> マス、右方向に <var>j</var> マス進んだ先のマスの座標を <var>(i,j)</var> とする。\n<var>N\\times N</var> マスの外周は壁で囲われており、上下左右に隣接するマス間にも壁がある場合がある。</p>\n<p>各マス <var>(i, j)</var> には汚れやすさ <var>d_{i,j}</var> が定まっており、盤面上を移動することで掃除を行う。\n壁で遮られていない隣接マスに移動することが出来、移動後に移動先のマスの汚れは <var>0</var> となり、それ以外の全てのマス <var>(i,j)</var> の汚れは <var>d_{i,j}</var> 増加する。\n<var>(0, 0)</var> からスタートして、<var>(0, 0)</var> に戻ってくるような、長さ(移動回数) <var>10^5</var> 以下の掃除ルートを考える。\n掃除ルートは同じマスを何度でも通って良いが、一度も通らないマスがあってはならない。</p>\n<p><var>t</var> 回目の移動後の各マス <var>(i,j)</var> の汚れを <var>a_{t,i,j}</var> とし、汚れの総和を <var>S_t=\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} a_{t,i,j}</var> と表す。\n<var>t=0</var> において、全てのマスの汚れは <var>a_{0,i,j}=0</var> であるとする。\n長さ <var>L</var> の掃除ルートでの掃除を無限に繰り返したとき、<var>t=L,L+1,\\cdots,2L-1</var> の間の汚れの総和の平均値\n\\[\n    \\bar{S}=\\frac{1}{L}\\sum_{t=L}^{2L-1}S_t\n\\]\nを<strong>平均汚れ</strong>と定義する。</p>\n<p>平均汚れが出来るだけ小さくなるような掃除ルートを求めて欲しい。</p>\n<h4>平均汚れの意味について</h4>\n<p>長さ <var>L</var> の掃除ルートでの掃除を無限に繰り返した時、<var>t\\geq L</var> に対して、<var>a_{t,i,j}=a_{t+L,i,j}</var> が成り立つことが証明出来る。\n従って、<var>T</var>ターン目までの汚れの総和の平均値 <var>\\frac{1}{T} \\sum_{t=0}^{T-1} S_t</var> を考えると、その <var>T \\to \\infty</var> での極限が平均汚れと一致する。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p>出力した掃除ルートにおける平均汚れを <var>\\bar{S}</var> としたとき、<var>\\mathrm{round}(\\bar{S})</var> の絶対スコアが得られる。絶対スコアは小さければ小さいほど良い。\n不正な掃除ルート(長さが <var>10^5</var> を越える、<var>(0,0)</var> に戻ってこない、一度も通らないマスが存在する、壁にぶつかる)が出力された場合は <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span> と判定される。</p>\n<p>各テストケース毎に、<var>\\mathrm{round}(10^9\\times \\frac{全参加者中の最小絶対スコア}{自身の絶対スコア})</var> の<font color=\"red\"><strong>相対評価スコア</strong></font>が得られ、その和が提出の得点となる。</p>\n<p>最終順位はコンテスト終了後に実施されるより多くの入力に対するシステムテストにおける得点で決定される。\n暫定テスト、システムテストともに、一部のテストケースで不正な出力や制限時間超過をした場合、そのテストケースの相対評価スコアは0点となり、そのテストケースにおいては「全参加者中の最小絶対スコア」の計算から除外される。\nシステムテストは<font color=\"red\"><strong> <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"コンパイルエラー\">CE</span> 以外の結果を得た一番最後の提出</strong></font>に対してのみ行われるため、最終的に提出する解答を間違えないよう注意せよ。</p>\n<h4>テストケース数</h4>\n<ul>\n<li>暫定テスト: 50個</li>\n<li>システムテスト: 2000個、コンテスト終了後に <a href=\"https://img.atcoder.jp/ahc027/seeds.txt\">seeds.txt</a> (sha256=cdea33a6050850bf1387e2191b802a1df7e43fcb969fd6c3bf9cbd96a4d790d7) を公開</li>\n</ul>\n<h4>相対評価システムについて</h4>\n<p>暫定テスト、システムテストともに、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"コンパイルエラー\">CE</span> 以外の結果を得た一番最後の提出のみが順位表に反映される。\n相対評価スコアの計算に用いられる各テストケース毎の全参加者中の最小絶対スコアの算出においても、順位表に反映されている最終提出のみが用いられる。</p>\n<p>順位表に表示されているスコアは相対評価スコアであり、新規提出があるたびに、相対評価スコアが再計算される。\n一方、提出一覧から確認出来る各提出のスコアは各テストケース毎の絶対スコアをそのまま足し合わせたものであり、相対評価スコアは表示されない。\n最新以外の提出の、現在の順位表における相対評価スコアを知るためには、再提出が必要である。\n不正な出力や制限時間超過をした場合、提出一覧から確認出来るスコアは0となるが、順位表には正解したテストケースに対する相対スコアの和が表示されている。</p>\n<h4>実行時間について</h4>\n<p>実行時間には多少のブレが生じます。\nまた、システムテストでは同時に大量の実行を行うため、暫定テストに比べて数%程度実行時間が伸びる現象が確認されています。\nそのため、実行時間制限ギリギリの提出がシステムテストで<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる可能性があります。\nプログラム内で時間を計測して処理を打ち切るか、実行時間に余裕を持たせるようお願いします。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var>\n<var>h_{0,0}\\cdots h_{0,N-1}</var>\n<var>\\vdots</var>\n<var>h_{N-2,0} \\cdots h_{N-2,N-1}</var>\n<var>v_{0,0} \\cdots v_{0,N-2}</var>\n<var>\\vdots</var>\n<var>v_{N-1,0} \\cdots v_{N-1,N-2}</var>\n<var>d_{0,0}</var> <var>\\cdots</var> <var>d_{0,N-1}</var>\n<var>\\vdots</var>\n<var>d_{N-1,0}</var> <var>\\cdots</var> <var>d_{N-1,N-1}</var>\n</pre>\n\n<ul>\n<li><var>N</var> は盤面の縦横の大きさを表し、<var>20\\leq N\\leq 40</var> を満たす。</li>\n<li><var>h_{i,0}\\cdots h_{i,N-1}</var> は <code>0</code> と <code>1</code> からなる <var>N</var> 文字の文字列であり、<var>h_{i,j}=1</var> であればマス <var>(i,j)</var> とその下隣のマス <var>(i+1,j)</var> の間に壁があり、<var>h_{i,j}=0</var> であれば壁がないことを表す。</li>\n<li><var>v_{i,0}\\cdots v_{i,N-2}</var> は <code>0</code> と <code>1</code> からなる <var>N-1</var> 文字の文字列であり、<var>v_{i,j}=1</var> であればマス <var>(i,j)</var> とその右隣のマス <var>(i,j+1)</var> の間に壁があり、<var>v_{i,j}=0</var> であれば壁がないことを表す。</li>\n<li>全てのマスは <var>(0, 0)</var> から到達可能であることが保証されている。</li>\n<li><var>d_{i,j}</var> はマス <var>(i,j)</var> の汚れやすさを表す整数値で、<var>1\\leq d_{i,j}\\leq 10^3</var> を満たす。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>上下左右への移動をそれぞれ <code>U</code>, <code>D</code>, <code>L</code>, <code>R</code> で表す。\n長さ <var>L</var> の掃除ルートを対応する文字を繋げた <var>L</var> 文字の文字列で表し、一行で標準出力に出力せよ。</p>\n<p><a href=\"https://img.atcoder.jp/ahc027/aPdjCUIZ.html?lang=ja&amp;seed=0&amp;output=sample\">例を見る</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>サンプルプログラム</h3><p></p><details>\nPythonでの解答例を示す。\nこのプログラムでは、<var>(0,0)</var>からの深さ優先探索木に沿って移動することで、探索木の各辺を行きと帰りの2回通って<var>(0,0)</var>に戻ってくる掃除ルートを出力している。\n<pre class=\"prettyprint linenums\">import sys\nsys.setrecursionlimit(1000000)<p></p>\n<p>N = int(input())\nh = [input() for _ in range(N-1)]\nv = [input() for _ in range(N)]\nd = [list(map(int, input().split())) for _ in range(N)]</p>\n<p>visited = [[False for _ in range(N)] for _ in range(N)]\nDIJ = [(0, 1), (1, 0), (0, -1), (-1, 0)]\nDIR = \"RDLU\"</p>\n<p>def dfs(i, j):\n    visited[i][j] = True\n    for dir in range(4):\n        di, dj = DIJ[dir]\n        i2 = i + di\n        j2 = j + dj\n        if 0 &lt;= i2 &lt; N and 0 &lt;= j2 &lt; N and not visited[i2][j2]:\n            if di == 0 and v[i][min(j, j2)] == '0' or dj == 0 and h[min(i, i2)][j] == '0':\n                print(DIR[dir], end='')\n                dfs(i2, j2)\n                print(DIR[(dir + 2) % 4], end='')</p>\n<p>dfs(0, 0)\nprint()\n</p></pre>\n</details><p></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><p></p><details>\n<var>L</var> 以上 <var>U</var> 以下の整数値を一様ランダムに生成する関数を <var>\\mathrm{randint}(L,U)</var> で表す。\n<var>L</var> 以上 <var>U</var> 未満の浮動小数値を一様ランダムに生成する関数を <var>\\mathrm{randdouble}(L,U)</var> で表す。<p></p>\n<h4><var>N</var> の生成</h4>\n<p><var>N=\\mathrm{randint}(20,40)</var> と生成する。</p>\n<h4><var>h, v</var> の生成</h4>\n<p>壁の多さを決めるパラメータ <var>w=\\mathrm{randint}(1,N)</var> を生成する。\n壁が全く無い状態から始め、以下の操作を <var>w</var> 回繰り返すことで壁を生成する。</p>\n<p>上下左右の四方向からランダムに1つ選択する。\n左方向の場合、<var>i=\\mathrm{randint}(0,N-2)</var>、<var>j=\\mathrm{randint}(0,N-1)</var>、<var>k=\\mathrm{randint}(3,\\lfloor N/2\\rfloor)</var> を生成し、<var>h_{i,j}\\cdots h_{i,\\max(j-k+1, 0)}</var> を <var>1</var> にする。\n右方向の場合も同様に生成して、<var>h_{i,j}\\cdots h_{i,\\min(j+k-1, N-1)}</var> を <var>1</var> にする。\n上方向の場合、<var>i=\\mathrm{randint}(0,N-1)</var>、<var>j=\\mathrm{randint}(0,N-2)</var>、<var>k=\\mathrm{randint}(3,\\lfloor N/2\\rfloor)</var> を生成し、<var>v_{i,j}\\cdots v_{\\max(i-k+1, 0),j}</var> を <var>1</var> にする。\n下方向の場合も同様に生成して、<var>v_{i,j}\\cdots v_{\\min(i+k-1,N-1),j}</var> を <var>1</var> にする。</p>\n<p><var>w</var> 回の繰り返しが完了したら、全てのマスが <var>(0, 0)</var> から到達可能であるかを判定し、到達不能なマスがある場合は壁を全て除去して <var>w</var> 回の繰り返し処理をやり直す。</p>\n<h4><var>d</var> の生成</h4>\n<p>汚れやすい領域の数を決めるパラメータ <var>c=\\mathrm{randint}(1,\\lfloor N/2\\rfloor)</var> を生成する。\n全ての <var>(i,j)</var> について <var>d'_{i,j}=0</var> である配列 <var>d'</var> を用意し、以下の処理を <var>c</var> 回繰り返すことで <var>d'</var> を更新する。</p>\n<p><var>i=\\mathrm{randint}(0,N-1)</var>、<var>j=\\mathrm{randint}(0,N-1)</var>、<var>m=\\mathrm{randint}(N,\\lfloor N^2/c\\rfloor)</var>、<var>b=\\mathrm{randdouble}(0,2)</var> を生成する。\n集合 <var>S</var> を <var>S=\\{(i,j)\\}</var> から開始して、<var>S</var> の大きさが <var>m</var> になるまで以下の処理を繰り返すことで生成する。</p>\n<p><var>p\\in S</var> をランダムに選び、上下左右の方向をランダムに選ぶ。<var>p</var> からその方向に壁が無い場合、隣接マス <var>q</var> を <var>S</var> に追加する。</p>\n<p>生成した <var>S</var> に含まれる各マス <var>(i',j')\\in S</var> に対して、<var>d'_{i',j'}=b</var> と上書きする。</p>\n<p><var>c</var> 回の繰り返し処理が完了したら、各 <var>(i,j)</var> について、<var>d_{i,j}=\\mathrm{round}(10^{d'_{i,j}+\\mathrm{randdouble}(0,1)})</var> と生成する。</p>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール(入力ジェネレータ・ビジュアライザ)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc027/aPdjCUIZ.html?lang=ja\">Web版</a>: ローカル版より高性能でアニメーション表示が可能です。</li>\n<li><a href=\"https://img.atcoder.jp/ahc027/aPdjCUIZ_v2.zip\">ローカル版</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。<ul>\n<li><a href=\"https://img.atcoder.jp/ahc027/aPdjCUIZ_windows_v2.zip\">Windows用のコンパイル済みバイナリ</a>: Rust言語の環境構築が面倒な方は代わりにこちらをご利用下さい。</li>\n</ul>\n</li>\n</ul>\n<p>コンテスト期間中に、ビジュアライズ結果の共有や、解法・考察に関する言及は禁止されています。ご注意下さい。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">20\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000100000000000000\n0000100000000000000\n0000100000000000000\n0000100000000000000\n0000100000000000000\n0000100000000000000\n0000100000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n251 348 2 2 5 4 14 13 13 43 7 10 8 36 11 10 3 5 1 6\n179 68 3 7 6 13 25 25 30 26 13 6 16 11 20 9 1 5 10 1\n135 42 1 1 4 3 2 39 24 20 51 13 29 47 8 21 4 2 2 3\n57 138 133 46 4 4 7 18 26 6 17 43 29 48 10 21 2 8 3 1\n148 77 220 100 127 2 3 8 41 9 19 14 17 1 2 1 2 1 2 3\n237 65 193 245 244 10 1 2 7 20 5 5 4 6 4 5 4 8 2 2\n107 73 85 176 1 5 6 22 11 17 4 12 20 5 1 3 8 2 7 4\n262 201 56 4 9 9 6 2 2 1 20 25 8 1 1 4 1 3 3 6\n3 93 1 3 1 6 4 5 7 4 3 29 17 18 9 2 6 9 2 5\n68 184 236 102 3 2 2 4 16 20 5 26 21 19 124 276 1 11 39 2\n5 4 2 3 8 1 4 2 6 16 3 7 25 17 5 501 172 5 279 8\n1 4 5 6 7 5 3 2 1 4 9 7 245 151 6 4 10 2 78 13\n2 4 4 9 6 4 2 4 8 4 4 14 17 657 15 3 4 10 474 9\n7 3 9 3 1 2 2 2 4 2 3 8 15 7 12 9 8 7 5 630\n2 1 2 4 3 1 3 1 3 7 4 4 8 8 10 3 4 10 203 220\n3 6 9 1 2 4 6 2 3 2 1 40 24 6 3 8 4 7 248 287\n6 6 1 4 2 8 2 7 3 6 4 3 1 12 12 3 11 16 85 222\n7 6 2 7 2 5 2 5 4 8 2 6 1 5 9 2 4 7 1 8\n3 2 9 3 2 2 6 2 3 5 2 4 7 3 5 11 7 128 7 5\n4 3 4 9 1 1 4 3 4 3 3 5 1 1 2 18 9 2 9 6\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">RRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLURRRRRRRRRRRRRRRRRRULLLLLLLLLLLLLLLLLLURRRRRRRRRRRRRRRRRRULLLLLLLLLLLLLLLLLLURRRRRRRRRRRRRRRRRRULLLLLLLLLLLLLLLLLLURRRRRRRRRRRRRRRRRRULLLLLLLLLLLLLLLLLLURRRRULLLLURRRRULLLLURRRRULLLLURRRRURRRRRRRRRRRRRRDDDDDDDLLLLLLLLLLLLLURRRRRRRRRRRRULLLLLLLLLLLLURRRRRRRRRRRRULLLLLLLLLLLLURRRRRRRRRRRRULLLLLLLLLLLLRRRRRRRRRRRRDLLLLLLLLLLLLDRRRRRRRRRRRRDLLLLLLLLLLLLDRRRRRRRRRRRRDLLLLLLLLLLLLDRRRRRRRRRRRRRUUUUUUUULLLLLLLLLLLLLLLDLLLURRURRRRRRRRRRRRRRRRLLLLLLLLLLLLLLLLLLRRDLLDRRRURRRRRRRRRRRRRRRDLLLLLLLLLLLLLLDLLLLDRRRRDLLLLDRRRRDLLLLDRRRRDLLLLDRRRRRRRRRRRRRRRRRRDLLLLLLLLLLLLLLLLLLDRRRRRRRRRRRRRRRRRRDLLLLLLLLLLLLLLLLLLDRRRRRRRRRRRRRRRRRRDLLLLLLLLLLLLLLLLLLDRRRRRRRRRRRRRRRRRRDLLLLLLLLLLLLLLLLLLDRRRRRRRRRRRRRRRRRRRUUUUUUUUUUUUUUUUUUULLLLLLLLLLLLLLLLLLL\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Story</h3><p>F Corporation developed a robotic vacuum cleaner, Takahashi-kun cleaner No.2, and decided to entrust it with the cleaning of their office.\nTakahashi-kun cleaner No.2 can operate indefinitely through solar power and repeats cleaning on a predetermined route indefinitely.\nThe office has varying levels of susceptibility to dirt in different areas, and by frequently cleaning the areas that are more prone to dirt, the entire office can be kept cleaner.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an <var>N\\times N</var> square board.\nLet <var>(0, 0)</var> be the coordinates of the top-left square, and <var>(i, j)</var> be the coordinates of the square located <var>i</var> squares down and <var>j</var> squares to the right from there.\nThe perimeter of the <var>N\\times N</var> board is surrounded by walls, and there may also be walls between adjacent squares.</p>\n<p>Each square <var>(i,j)</var> is assigned a value <var>d_{i,j}</var> which represents its susceptibility to dirt.\nYour task is to clean these squares by moving around the board.\nYou can move to an adjacent square that is not blocked by a wall.\nAfter the move, the dirtiness of the square you moved to becomes <var>0</var>, and the dirtiness of all other squares <var>(i, j)</var> increases by <var>d_{i, j}</var>.\nConsider a cleaning route that starts and ends at <var>(0, 0)</var>, with a length (number of moves) not exceeding <var>10^5</var>.\nThe cleaning route may pass through the same square multiple times, but must visit each square at least once.</p>\n<p>Let <var>a_{t,i,j}</var> denote the dirtiness of each square <var>(i,j)</var> after the <var>t</var>-th move, and let <var>S_t=\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} a_{t,i,j}</var> denote the total dirtiness.\nAt <var>t=0</var>, we assume that the dirtiness of all squares is <var>a_{0,i,j}=0</var>.\nDefine the <strong>average dirtiness</strong> as\n\\[\n    \\bar{S}=\\frac{1}{L}\\sum_{t=L}^{2L-1}S_t,\n\\]\nwhich is the average of the total dirtiness during the period <var>t=L,L+1,\\cdots,2L-1</var> when the cleaning route of length <var>L</var> is repeated infinitely.</p>\n<p>Please find a cleaning route that minimizes the average dirtiness as much as possible.</p>\n<h4>The Meaning of Average Dirtiness</h4>\n<p>We can prove that <var>a_{t,i,j}=a_{t+L,i,j}</var> for <var>t\\geq L</var> when the cleaning route of length <var>L</var> is repeated infinitely.\nTherefore, considering the average <var>\\frac{1}{T} \\sum_{t=0}^{T-1} S_t</var> of the total dirtiness up to <var>T</var> turns, its limit as <var>T \\to \\infty</var> coincides with the average dirtiness.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>Let <var>\\bar{S}</var> be the average dirtiness of the output cleaning route.\nThen you will obtain an absolute score of <var>\\mathrm{round}(\\bar{S})</var>.\nThe lower the absolute score, the better.\nIf you output an illegal cleaning route (length exceeds <var>10^5</var>, does not return to <var>(0,0)</var>, there is an unvisited square, or it hits a wall), it will be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Wrong Answer\">WA</span>.</p>\n<p>For each test case, we compute the <font color=\"red\"><strong>relative score</strong></font> <var>\\mathrm{round}(10^9\\times \\frac{\\mathrm{MIN}}{\\mathrm{YOUR}})</var>, where YOUR is your absolute score and MIN is the lowest absolute score among all competitors obtained on that test case. The score of the submission is the sum of the relative scores.</p>\n<p>The final ranking will be determined by the system test with more inputs which will be run after the contest is over.\nIn both the provisional/system test, if your submission produces illegal output or exceeds the time limit for some test cases, only the score for those test cases will be zero, and your submission will be excluded from the MIN calculation for those test cases.</p>\n<p>The system test will be performed only for <font color=\"red\"><strong>the last submission which received a result other than <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Compilation Error\">CE</span> </strong></font>.\nBe careful not to make a mistake in the final submission.</p>\n<h4>Number of test cases</h4>\n<ul>\n<li>Provisional test: 50</li>\n<li>System test: 2000. We will publish <a href=\"https://img.atcoder.jp/ahc027/seeds.txt\">seeds.txt</a>  (sha256=cdea33a6050850bf1387e2191b802a1df7e43fcb969fd6c3bf9cbd96a4d790d7) after the contest is over.</li>\n</ul>\n<h4>About relative evaluation system</h4>\n<p>In both the provisional/system test, the standings will be calculated using only the last submission which received a result other than <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Compilation Error\">CE</span>.\nOnly the last submissions are used to calculate the MIN for each test case when calculating the relative scores.</p>\n<p>The scores shown in the standings are relative, and whenever a new submission arrives, all relative scores are recalculated.\nOn the other hand, the score for each submission shown on the submissions page is the sum of the absolute score for each test case, and the relative scores are not shown.\nIn order to know the relative score of submission other than the latest one in the current standings, you need to resubmit it.\nIf your submission produces illegal output or exceeds the time limit for some test cases, the score shown on the submissions page will be 0, but the standings show the sum of the relative scores for the test cases that were answered correctly.</p>\n<h4>About execution time</h4>\n<p>Execution time may vary slightly from run to run.\nIn addition, since system tests simultaneously perform a large number of executions, it has been observed that execution time increases by several percent compared to provisional tests.\nFor these reasons, submissions that are very close to the time limit may result in <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> in the system test.\nPlease measure the execution time in your program to terminate the process, or have enough margin in the execution time.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format.</p>\n<pre><var>N</var>\n<var>h_{0,0}\\cdots h_{0,N-1}</var>\n<var>\\vdots</var>\n<var>h_{N-2,0} \\cdots h_{N-2,N-1}</var>\n<var>v_{0,0} \\cdots v_{0,N-2}</var>\n<var>\\vdots</var>\n<var>v_{N-1,0} \\cdots v_{N-1,N-2}</var>\n<var>d_{0,0}</var> <var>\\cdots</var> <var>d_{0,N-1}</var>\n<var>\\vdots</var>\n<var>d_{N-1,0}</var> <var>\\cdots</var> <var>d_{N-1,N-1}</var>\n</pre>\n\n<ul>\n<li><var>N</var> is the horizontal and vertical size of the board and satisfies <var>20\\leq N\\leq 40</var>.</li>\n<li><var>h_{i,0}\\cdots h_{i,N-1}</var> is a string of length <var>N</var> consisting of only <code>0</code> and <code>1</code>. <var>h_{i,j}=1</var> if and only if there is a wall between square <var>(i,j)</var> and its lower neighbor <var>(i+1,j)</var>.</li>\n<li><var>v_{i,0}\\cdots v_{i,N-2}</var> is a string of length <var>N-1</var> consisting of only <code>0</code> and <code>1</code>. <var>v_{i,j}=1</var> if and only if there is a wall between square <var>(i,j)</var> and its right neighbor <var>(i,j+1)</var>.</li>\n<li>All squares are guaranteed to be reachable from <var>(0, 0)</var>.</li>\n<li><var>d_{i,j}</var> is an integer value representing the susceptibility to dirt of square <var>(i,j)</var> and satisfies <var>1\\leq d_{i,j}\\leq 10^3</var>.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Represent a move up, down, left, or right by <code>U</code>, <code>D</code>, <code>L</code>, or <code>R</code>, respectively.\nRepresent the cleaning route of length <var>L</var> as a string of <var>L</var> characters corresponding to each move, and output it in a single line to Standard Output.</p>\n<p><a href=\"https://img.atcoder.jp/ahc027/aPdjCUIZ.html?lang=en&amp;seed=0&amp;output=sample\">Show example</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Solution</h3><p></p><details>\nThis is a sample solution in Python.\nIn this program, by moving along the depth-first search tree starting from (0,0), each edge in the tree is passed twice, once on the way there and once on the way back, and the program outputs a cleaning route that returns to (0,0).\n<pre class=\"prettyprint linenums\">import sys\nsys.setrecursionlimit(1000000)<p></p>\n<p>N = int(input())\nh = [input() for _ in range(N-1)]\nv = [input() for _ in range(N)]\nd = [list(map(int, input().split())) for _ in range(N)]</p>\n<p>visited = [[False for _ in range(N)] for _ in range(N)]\nDIJ = [(0, 1), (1, 0), (0, -1), (-1, 0)]\nDIR = \"RDLU\"</p>\n<p>def dfs(i, j):\n    visited[i][j] = True\n    for dir in range(4):\n        di, dj = DIJ[dir]\n        i2 = i + di\n        j2 = j + dj\n        if 0 &lt;= i2 &lt; N and 0 &lt;= j2 &lt; N and not visited[i2][j2]:\n            if di == 0 and v[i][min(j, j2)] == '0' or dj == 0 and h[min(i, i2)][j] == '0':\n                print(DIR[dir], end='')\n                dfs(i2, j2)\n                print(DIR[(dir + 2) % 4], end='')</p>\n<p>dfs(0, 0)\nprint()\n</p></pre>\n</details><p></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><p></p><details>\nLet <var>\\mathrm{randint}(L,U)</var> be a function that generates a uniform random integer between <var>L</var> and <var>U</var>, inclusive.\nLet <var>\\mathrm{randdouble}(L,U)</var> be a function that generates a uniform random floating-point number at least <var>L</var> and less than <var>U</var>.<p></p>\n<h4>Generation of <var>N</var></h4>\n<p><var>N=\\mathrm{randint}(20,40)</var>.</p>\n<h4>Generation of <var>h</var> and <var>v</var></h4>\n<p>Generate a parameter <var>w=\\mathrm{randint}(1,N)</var> that controls the number of walls.\nStarting from a state with no walls, generate walls by repeating the following operation <var>w</var> times.</p>\n<p>Randomly select one of the four directions (up, down, left, right).\nFor the left direction, generate <var>i=\\mathrm{randint}(0,N-2)</var>, <var>j=\\mathrm{randint}(0,N-1)</var>, and <var>k=\\mathrm{randint}(3,\\lfloor N/2\\rfloor)</var>.\nThen, set <var>h_{i,j}\\cdots h_{i,\\max(j-k+1, 0)}</var> to <var>1</var>.\nSimilarly, for the right direction, generate values in the same manner, and set <var>h_{i,j}\\cdots h_{i,\\min(j+k-1, N-1)}</var> to <var>1</var>.\nFor the upward direction, generate <var>i=\\mathrm{randint}(0,N-1)</var>, <var>j=\\mathrm{randint}(0,N-2)</var>, and <var>k=\\mathrm{randint}(3,\\lfloor N/2\\rfloor)</var>.\nThen, set <var>v_{i,j}\\cdots v_{\\max(i-k+1, 0),j}</var> to <var>1</var>.\nSimilarly, for the downward direction, generate values in the same manner, and set <var>v_{i,j}\\cdots v_{\\min(i+k-1, N-1),j}</var> to <var>1</var>.</p>\n<p>After <var>w</var> iterations are completed, check if all squares are reachable from <var>(0, 0)</var>, and if there are unreachable squares, remove all walls and redo the <var>w</var> iterations.</p>\n<h4>Generation of <var>d</var></h4>\n<p>Generate a parameter <var>c=\\mathrm{randint}(1,\\lfloor N/2\\rfloor)</var> that determines the number of susceptible regions.\nCreate an array <var>d'</var> with <var>d'_{i,j}=0</var> for all <var>(i,j)</var>, and update <var>d'</var> by repeating the following process <var>c</var> times.</p>\n<p>Generate <var>i=\\mathrm{randint}(0,N-1)</var>, <var>j=\\mathrm{randint}(0,N-1)</var>, <var>m=\\mathrm{randint}(N,\\lfloor N^2/c\\rfloor)</var>, and <var>b=\\mathrm{randdouble}(0,2)</var>.\nGenerate a set <var>S</var> by starting from <var>S=\\{(i,j)\\}</var> and repeating the following process until the size of <var>S</var> becomes <var>m</var>.</p>\n<p>Randomly choose <var>p\\in S</var>, and randomly choose one of the four directions (up, down, left, or right). If there is no wall in that direction from <var>p</var>, add the adjacent square <var>q</var> to <var>S</var>.</p>\n<p>For each square <var>(i',j')\\in S</var> contained in the generated <var>S</var>, overwrite <var>d'_{i',j'}=b</var>.</p>\n<p>After <var>c</var> iterations are completed, generate <var>d_{i,j}=\\mathrm{round}(10^{d'_{i,j}+\\mathrm{randdouble}(0,1)})</var> for each <var>(i,j)</var>.\n</p></details><p></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools (Input generator and visualizer)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc027/aPdjCUIZ.html?lang=en\">Web version</a>: This is more powerful than the local version providing animations.</li>\n<li><a href=\"https://img.atcoder.jp/ahc027/aPdjCUIZ_v2.zip\">Local version</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.<ul>\n<li><a href=\"https://img.atcoder.jp/ahc027/aPdjCUIZ_windows_v2.zip\">Pre-compiled binary for Windows</a>: If you are not familiar with the Rust language environment, please use this instead.</li>\n</ul>\n</li>\n</ul>\n<p>Please be aware that sharing visualization results or discussing solutions/ideas during the contest is prohibited.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">20\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n00000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000100000000000000\n0000100000000000000\n0000100000000000000\n0000100000000000000\n0000100000000000000\n0000100000000000000\n0000100000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n0000000000000000000\n251 348 2 2 5 4 14 13 13 43 7 10 8 36 11 10 3 5 1 6\n179 68 3 7 6 13 25 25 30 26 13 6 16 11 20 9 1 5 10 1\n135 42 1 1 4 3 2 39 24 20 51 13 29 47 8 21 4 2 2 3\n57 138 133 46 4 4 7 18 26 6 17 43 29 48 10 21 2 8 3 1\n148 77 220 100 127 2 3 8 41 9 19 14 17 1 2 1 2 1 2 3\n237 65 193 245 244 10 1 2 7 20 5 5 4 6 4 5 4 8 2 2\n107 73 85 176 1 5 6 22 11 17 4 12 20 5 1 3 8 2 7 4\n262 201 56 4 9 9 6 2 2 1 20 25 8 1 1 4 1 3 3 6\n3 93 1 3 1 6 4 5 7 4 3 29 17 18 9 2 6 9 2 5\n68 184 236 102 3 2 2 4 16 20 5 26 21 19 124 276 1 11 39 2\n5 4 2 3 8 1 4 2 6 16 3 7 25 17 5 501 172 5 279 8\n1 4 5 6 7 5 3 2 1 4 9 7 245 151 6 4 10 2 78 13\n2 4 4 9 6 4 2 4 8 4 4 14 17 657 15 3 4 10 474 9\n7 3 9 3 1 2 2 2 4 2 3 8 15 7 12 9 8 7 5 630\n2 1 2 4 3 1 3 1 3 7 4 4 8 8 10 3 4 10 203 220\n3 6 9 1 2 4 6 2 3 2 1 40 24 6 3 8 4 7 248 287\n6 6 1 4 2 8 2 7 3 6 4 3 1 12 12 3 11 16 85 222\n7 6 2 7 2 5 2 5 4 8 2 6 1 5 9 2 4 7 1 8\n3 2 9 3 2 2 6 2 3 5 2 4 7 3 5 11 7 128 7 5\n4 3 4 9 1 1 4 3 4 3 3 5 1 1 2 18 9 2 9 6\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">RRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLURRRRRRRRRRRRRRRRRRULLLLLLLLLLLLLLLLLLURRRRRRRRRRRRRRRRRRULLLLLLLLLLLLLLLLLLURRRRRRRRRRRRRRRRRRULLLLLLLLLLLLLLLLLLURRRRRRRRRRRRRRRRRRULLLLLLLLLLLLLLLLLLURRRRULLLLURRRRULLLLURRRRULLLLURRRRURRRRRRRRRRRRRRDDDDDDDLLLLLLLLLLLLLURRRRRRRRRRRRULLLLLLLLLLLLURRRRRRRRRRRRULLLLLLLLLLLLURRRRRRRRRRRRULLLLLLLLLLLLRRRRRRRRRRRRDLLLLLLLLLLLLDRRRRRRRRRRRRDLLLLLLLLLLLLDRRRRRRRRRRRRDLLLLLLLLLLLLDRRRRRRRRRRRRRUUUUUUUULLLLLLLLLLLLLLLDLLLURRURRRRRRRRRRRRRRRRLLLLLLLLLLLLLLLLLLRRDLLDRRRURRRRRRRRRRRRRRRDLLLLLLLLLLLLLLDLLLLDRRRRDLLLLDRRRRDLLLLDRRRRDLLLLDRRRRRRRRRRRRRRRRRRDLLLLLLLLLLLLLLLLLLDRRRRRRRRRRRRRRRRRRDLLLLLLLLLLLLLLLLLLDRRRRRRRRRRRRRRRRRRDLLLLLLLLLLLLLLLLLLDRRRRRRRRRRRRRRRRRRDLLLLLLLLLLLLLLLLLLDRRRRRRRRRRRRRRRRRRRUUUUUUUUUUUUUUUUUUULLLLLLLLLLLLLLLLLLL\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ahc027/tasks/ahc027_a"}