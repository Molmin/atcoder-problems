{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N\\times N</var> マスのコンテナターミナルがある。\n一番左上のマスの座標を <var>(0,0)</var> とし、そこから下方向に <var>i</var> マス、右方向に <var>j</var> マス進んだ先のマスの座標を <var>(i,j)</var> とする。\n<var>0</var> から <var>N^2-1</var> の番号が振られた <var>N^2</var> 個のコンテナが運び込まれてくるので、<var>N</var> 台のクレーンを操作することで、指定された順番で搬出してほしい。</p>\n<p>マップの左端と右端には、それぞれ以下のような搬入口・搬出口が存在する。</p>\n<ul>\n<li>搬入口: 左端の各マスは搬入口であり、各搬入口からはコンテナがそれぞれ <var>N</var> 個ずつ順番に運び込まれてくる。事前にどの番号のコンテナが運び込まれて来るかが分かっており、<var>(i,0)</var> にある搬入口から <var>j</var> 番目に運び込まれるコンテナの番号は <var>A_{i,j}</var> である。</li>\n<li>搬出口: 右端の各マスは搬出口であり、各搬出口に置かれたコンテナは即座に外部へ運び出される。<var>(i,N-1)</var> にある搬出口からは、<var>N\\times i,N\\times i+1,\\cdots,N\\times i+N-1</var> 番のコンテナをこの順番で搬出したい。</li>\n</ul>\n<p>搬入口、搬出口を含む各マスには高々 <var>1</var> つのコンテナを配置することが出来る。\n搬出口以外に置かれたコンテナは搬出されないため、順番を調整するための一時置き場として利用出来る。</p>\n<p>クレーンは <var>1</var> 台の大クレーンと、<var>N-1</var> 台の小クレーンの <var>2</var> 種類が存在する。初期状態で大クレーンは <var>(0,0)</var> のマスに、小クレーンは <var>(1,0), (2,0), \\cdots, (N-1,0)</var> の各マスに <var>1</var> 台ずつ配置されている。</p>\n<p>各クレーンはコンテナを掴む、離す、隣接マスに移動する、といった操作が可能である。\nコンテナが置かれていないマスには常にクレーンを移動可能であり、コンテナを掴んでいない場合はコンテナが置かれているマスにも移動出来る。\n一方で、コンテナを掴んでいる状態でコンテナが置かれているマスに移動出来るかどうかは、クレーンの種類によって異なる。</p>\n<p>大クレーンはコンテナを高く持ち上げて運ぶため、コンテナを掴んでいる状態でも他のコンテナが置かれているマスに移動することが出来る。\n小クレーンの場合はコンテナを持ち上げる高さが低いため、コンテナを掴んでいる状態では他のコンテナが置かれているマスに移動することが出来ない。</p>\n<p>毎ターン、各クレーンごとに独立に以下の操作から <var>1</var> つを選んで実行することが出来る。</p>\n<ul>\n<li><code>P</code>: 現在位置に存在するコンテナを掴む。すでにコンテナを掴んでいる場合や、現在位置にコンテナが存在しない場合は <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span> となる。</li>\n<li><code>Q</code>: 掴んでいるコンテナを離し、現在位置に配置する。コンテナを掴んでいない場合や、現在位置に既にコンテナが存在する場合は <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span> となる。</li>\n<li><code>U</code>, <code>D</code>, <code>L</code>, <code>R</code>: 上下左右に隣接するマスへ移動する。小クレーンかつコンテナを掴んでいる状態の場合は、移動先のマスにコンテナが存在してはならない。<var>N\\times N</var> マスの外へ移動するような操作を行うことは出来ない。</li>\n<li><code>.</code>: 何もせずにその場に留まる。</li>\n<li><code>B</code>: クレーンを爆破する。コンテナを掴んでいる状態では爆破することは出来ない。爆破したクレーンは盤面から排除され、以後 <code>.</code> 以外の操作をすることは出来ない。</li>\n</ul>\n<p>禁止されている操作を行った場合、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span> となる。</p>\n<p>それぞれのクレーンはコンテナを掴んでいるかどうかに関わらず、重なったり、すれ違うことは出来ない。\nすなわち、同じマスに複数のクレーンが存在してはならず、<var>2</var> つのクレーンがお互いの位置を交換するように移動することは出来ない。</p>\n<p>各クレーンの操作は同時に行われるため、マス <var>p</var> に存在するクレーンがマス <var>q</var> に移動するのと同じターンに、マス <var>q</var> に存在するクレーンをマス <var>r</var> (<var>r\\neq p</var>) に移動させたり爆破したりするような操作が可能である。ただし、<var>r=p</var> の場合はすれ違う移動となるため不可能である。</p>\n<p>各ターンは以下の <var>3</var> ステップからなる。</p>\n<ol>\n<li>運び込まれてくるコンテナがまだ残っている各搬入口について、そのマスにコンテナ及びコンテナを掴んだ状態のクレーンが存在しない場合、次の順番のコンテナがそのマスに配置される。</li>\n<li>各クレーンの操作を行う。</li>\n<li>各搬出口について、そのマスにコンテナが配置されている場合、そのコンテナを搬出して盤面から取り除く。</li>\n</ol>\n<p>操作は最大で <var>10000</var> ターン繰り返すことが出来る。\n短いターン数で指定された順番に近い順にコンテナを搬出出来るような操作列を求めてほしい。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p>以下のように <var>M_0, M_1, M_2, M_3</var> の値を定める。</p>\n<ul>\n<li><var>M_0</var>: 出力した操作列のターン数。</li>\n<li><var>M_1</var>: 正しい搬出口から搬出したコンテナの転倒数の総和。すなわち、<var>(i,N-1)</var> の搬出口から搬出されたコンテナのうち、番号 <var>b</var> が <var>N\\times i\\leq b&lt;N\\times (i+1)</var> を満たすようなものを、搬出した順に <var>B_{i,0},\\cdots,B_{i,n_i-1}</var> としたとき、<var>0\\leq j &lt; k &lt; n_i</var>、<var>B_{i,j}&gt;B_{i,k}</var> を満たすような組 <var>(i,j,k)</var> の総数が <var>M_1</var> である。</li>\n<li><var>M_2</var>: 間違った搬出口から搬出したコンテナの総数。すなわち、各搬出口 <var>(i,N-1)</var> から搬出されたコンテナのうち、番号 <var>b</var> が <var>N\\times i \\leq b &lt; N\\times (i+1)</var> を満たさないものの数を数え、その総和が <var>M_2</var> である。</li>\n<li><var>M_3</var>: 搬出されなかったコンテナの総数。</li>\n</ul>\n<p>このとき、以下の絶対スコアが得られる。\n<font color=\"red\"><strong>絶対スコアは小さければ小さいほど良い。</strong></font></p>\n<p>\\[\nM_0+10^2M_1+10^4M_2+10^6M_3\n\\]</p>\n<p>各テストケース毎に、<var>\\mathrm{round}(10^9\\times \\frac{全参加者中の最小絶対スコア}{自身の絶対スコア})</var> の<font color=\"red\"><strong>相対評価スコア</strong></font>が得られ、その和が提出の得点となる。</p>\n<p>最終順位はコンテスト終了後に実施されるより多くの入力に対するシステムテストにおける得点で決定される。\n暫定テスト、システムテストともに、一部のテストケースで不正な出力や制限時間超過をした場合、そのテストケースの相対評価スコアは0点となり、そのテストケースにおいては「全参加者中の最小絶対スコア」の計算から除外される。\nシステムテストは<font color=\"red\"><strong> <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"コンパイルエラー\">CE</span> 以外の結\n果を得た一番最後の提出</strong></font>に対してのみ行われるため、最終的に提出する解答を間違えないよう注意せよ。</p>\n<h4>テストケース数</h4>\n<ul>\n<li>暫定テスト: 50個</li>\n<li>システムテスト: 2000個、コンテスト終了後に <a href=\"https://img.atcoder.jp/ahc033/seeds.txt\">seeds.txt</a> (sha256=502228d18e6d0d00f92654ad85f13945fc1d2865f69df352aee061a53ebf3cfa) を公開</li>\n</ul>\n<h4>相対評価システムについて</h4>\n<p>暫定テスト、システムテストともに、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"コンパイルエラー\">CE</span> 以外の結果を得た一番最後の提出のみが順位表に反映される。\n相対評価スコアの計算に用いられる各テストケース毎の全参加者中の最小絶対スコアの算出においても、順位表に反映されている最終提出のみが用いられる。</p>\n<p>順位表に表示されているスコアは相対評価スコアであり、新規提出があるたびに、相対評価スコアが再計算される。\n一方、提出一覧から確認出来る各提出のスコアは各テストケース毎の絶対スコアをそのまま足し合わせたものであり、相対評価スコアは表示されない。\n最新以外の提出の、現在の順位表における相対評価スコアを知るためには、再提出が必要である。\n不正な出力や制限時間超過をした場合、提出一覧から確認出来るスコアは0となるが、順位表には正解したテストケースに対する相対スコアの和が表示されている。</p>\n<h4>実行時間について</h4>\n<p>実行時間には多少のブレが生じます。\nまた、システムテストでは同時に大量の実行を行うため、暫定テストに比べて数%程度実行時間が伸びる現象が確認されています。\nそのため、実行時間制限ギリギリの提出がシステムテストで<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる可能性がありま\nす。\nプログラム内で時間を計測して処理を打ち切るか、実行時間に余裕を持たせるようお願いします。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var>\n<var>A_{0,0}</var> <var>\\cdots</var> <var>A_{0,N-1}</var>\n<var>\\vdots</var>\n<var>A_{N-1,0}</var> <var>\\cdots</var> <var>A_{N-1,N-1}</var>\n</pre>\n<ul>\n<li>全てのテストケースで <var>N = 5</var> で固定である。</li>\n<li><var>A_{i,j}</var> は <var>(i,0)</var> の搬入口から <var>j</var> 番目に搬入されるコンテナの番号であり、<var>0\\leq A_{i,j}\\leq N^2-1</var> を満たす整数値である。全ての <var>A_{i,j}</var> の値は異なる。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>以下の形式で標準出力に出力せよ。</p>\n<pre><var>S_0</var>\n<var>\\vdots</var>\n<var>S_{N-1}</var>\n</pre>\n<p>各 <var>S_i</var> は <code>P</code>、<code>Q</code>、<code>U</code>、<code>D</code>、<code>L</code>、<code>R</code>、<code>.</code>、<code>B</code> のみからなる文字列であり、その <var>t</var> 文字目は初期位置 <var>(i,0)</var> のクレーンに対する <var>t</var> ターン目の操作を表す。\n出力した各文字列の長さは <var>1</var> 以上 <var>10000</var> 以下でなければならない。\n各文字列の長さは異なってもよく、その場合は最も長い文字列に合わせて文字列の末尾に <code>.</code> が追加される。</p>\n<p><a href=\"https://img.atcoder.jp/ahc033/ELSlXTEw.html?lang=ja&amp;seed=0&amp;output=sample\">例を見る</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><p>搬入順 <var>A_{i,j}</var> は、<var>0,1,\\cdots,N^2-1</var> をランダムな順番にシャッフルし、<var>N</var> 個ずつに区切ることにより生成される。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール(入力ジェネレータ・ビジュアライザ)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc033/ELSlXTEw.html?lang=ja\">Web版</a>: ローカル版より高性能でアニメーション表示が可能です。</li>\n<li><a href=\"https://img.atcoder.jp/ahc033/ELSlXTEw.zip\">ローカル版</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。<ul>\n<li><a href=\"https://img.atcoder.jp/ahc033/ELSlXTEw_windows.zip\">Windows用のコンパイル済みバイナリ</a>: Rust言語の環境構築が面倒な方は代わりにこちらをご利用下さい。</li>\n</ul>\n</li>\n</ul>\n<p>コンテスト期間中に、ビジュアライズ結果の共有や、解法・考察に関する言及は禁止されています。ご注意下さい。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">5\n24 10 17 15 13\n14 11 2 1 5\n7 9 6 21 20\n8 4 19 3 16\n18 23 22 0 12\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">PRDDDDRRRQLLLUUPRRRUQ\nB\nPRQB\nPRRRRUUQB\nPRRRRQB\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a container terminal with an <var>N \\times N</var> grid.\nLet <var>(0,0)</var> be the coordinates of the top-left square and <var>(i,j)</var> be the coordinates of the square located <var>i</var> squares down and <var>j</var> squares to the right from there.\n<var>N^2</var> containers, numbered from <var>0</var> to <var>N^2-1</var>, will be brought into the terminal. Using <var>N</var> cranes, please manage to dispatch the containers in the specified order.</p>\n<p>There are Receiving Gates and Dispatch Gates on the left and right edges of the map, respectively:</p>\n<ul>\n<li>Receiving Gates: Each square on the left edge is a Receiving Gate, and from each Receiving Gate, <var>N</var> containers are brought in sequentially. It is known in advance which containers will be brought in. The <var>j</var>-th container brought in from the Receiving Gate at <var>(i,0)</var> has the number <var>A_{i,j}</var>.</li>\n<li>Dispatch Gates: Each square on the right edge is a Dispatch Gate, and containers placed at each Dispatch Gate are immediately dispatched externally. From the Dispatch Gate at <var>(i,N-1)</var>, containers numbered <var>N \\times i, N \\times i+1, \\ldots, N \\times i+N-1</var> are to be dispatched in this order.</li>\n</ul>\n<p>Each square, including the Receiving Gates and Dispatch Gates, can hold at most one container. Squares other than the Dispatch Gates can be used as temporary storage to adjust the order of dispatch since containers placed in these squares will not be dispatched.</p>\n<p>There are two types of cranes: one large crane and <var>N-1</var> small cranes. Initially, the large crane is placed in the square <var>(0,0)</var>, and each small crane is placed in the squares <var>(1,0), (2,0), \\ldots, (N-1,0)</var>.</p>\n<p>Each crane can perform actions such as picking up a container, releasing a container, and moving to an adjacent square. Cranes can always move to squares that do not have containers. If not carrying a container, cranes can also move to squares with containers. However, whether a crane carrying a container can move to a square with another container depends on the type of crane.</p>\n<p>The large crane can lift containers high, so it can move to squares with other containers even while carrying a container. Small cranes, on the other hand, lift containers to a lower height and cannot move to squares with other containers while carrying a container.</p>\n<p>Each turn, for each crane, you can independently perform one of the following actions:</p>\n<ul>\n<li><code>P</code>: Pick up the container at the current square. If the crane is already holding a container or there is no container at the current square, this results in <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Incorrect\">WA</span>.</li>\n<li><code>Q</code>: Release the container being held and place it at the current square. If the crane is not holding a container or there is already a container at the current square, this results in <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Incorrect\">WA</span>.</li>\n<li><code>U</code>, <code>D</code>, <code>L</code>, <code>R</code>: Move to the adjacent square in the up, down, left, or right direction. If a small crane is carrying a container, the destination square must not have a container. Cranes cannot move outside the <var>N \\times N</var> grid.</li>\n<li><code>.</code>: Do nothing and stay in the current square.</li>\n<li><code>B</code>: Bomb the crane. If the crane is holding a container, it cannot bomb. The crane is removed from the grid and can no longer perform any actions except <code>.</code>.</li>\n</ul>\n<p>If you perform a prohibited action, it results in <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Incorrect\">WA</span>.</p>\n<p>Each crane cannot overlap or pass each other, regardless of whether they are holding containers. In other words, multiple cranes cannot occupy the same square, and two cranes cannot move in such a way that they swap their positions. </p>\n<p>Since the actions of each crane are performed simultaneously, it is possible to move the crane from square <var>p</var> to square <var>q</var> in the same turn as moving the crane from square <var>q</var> to square <var>r</var> (<var>r \\neq p</var>) or bombing the crane at square <var>q</var>.\nHowever, if <var>r = p</var>, it results in an invalid move because it would be a passing movement.</p>\n<p>Each turn consists of the following three steps:</p>\n<ol>\n<li>For each Receiving Gate where containers are still to be brought in, if there is neither a container nor a crane holding a container at that square, the next container in sequence is placed in that square.</li>\n<li>Perform the actions of each crane.</li>\n<li>For each Dispatch Gate, if there is a container at that square, dispatch the container and remove it from the grid.</li>\n</ol>\n<p>Operations can be repeated for up to <var>10000</var> turns. Your task is to find a sequence of operations that dispatches the containers in the specified order as closely as possible within a short number of turns.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>Define the values <var>M_0</var>, <var>M_1</var>, <var>M_2</var>, and <var>M_3</var> as follows:</p>\n<ul>\n<li><var>M_0</var>: The number of turns in the output sequence of operations.</li>\n<li><var>M_1</var>: The total number of inversions for containers dispatched from the correct Dispatch Gate. Specifically, for the containers dispatched from the Dispatch Gate at <var>(i, N-1)</var>, let <var>B_{i,0}, \\cdots, B_{i,n_i-1}</var> be the sequence of container numbers <var>b</var> that satisfy <var>N \\times i \\leq b &lt; N \\times (i+1)</var>, in the order they were dispatched. Then, <var>M_1</var> is the total number of pairs <var>(i, j, k)</var> such that <var>0 \\leq j &lt; k &lt; n_i</var> and <var>B_{i,j} &gt; B_{i,k}</var>.</li>\n<li><var>M_2</var>: The total number of containers dispatched from the wrong Dispatch Gate. Specifically, for each Dispatch Gate at <var>(i, N-1)</var>, count the number of containers whose numbers, <var>b</var>, do not satisfy <var>N \\times i \\leq b &lt; N \\times (i+1)</var>, and the sum of these counts is <var>M_2</var>.</li>\n<li><var>M_3</var>: The total number of containers that were not dispatched.</li>\n</ul>\n<p>Then, you will obtain the following absolute score.\n<font color=\"red\"><strong>The lower the absolute score, the better.</strong></font></p>\n<p>\\[\nM_0+10^2M_1+10^4M_2+10^6M_3\n\\]</p>\n<p>For each test case, we compute the <font color=\"red\"><strong>relative score</strong></font> <var>\\mathrm{round}(10^9\\times \\frac{\\mathrm{MIN}}{\\mathrm{YOUR}})</var>, where YOUR is your absolute score and MIN is the lowest absolute score among all competitors obtained on that test case. The score of the submission is the sum of the relative scores.</p>\n<p>The final ranking will be determined by the system test with more inputs which will be run after the contest is over.\nIn both the provisional/system test, if your submission produces illegal output or exceeds the time limit for some test cases, only the score for those test cases will be zero, and your submission will be excluded from the MIN calculation for those test cases.</p>\n<p>The system test will be performed only for <font color=\"red\"><strong>the last submission which received a result other than <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Compilation Error\">CE</span> </strong></font>.\nBe careful not to make a mistake in the final submission.</p>\n<h4>Number of test cases</h4>\n<ul>\n<li>Provisional test: 50</li>\n<li>System test: 2000. We will publish <a href=\"https://img.atcoder.jp/ahc033/seeds.txt\">seeds.txt</a> (sha256=502228d18e6d0d00f92654ad85f13945fc1d2865f69df352aee061a53ebf3cfa) after the contest is over.</li>\n</ul>\n<h4>About relative evaluation system</h4>\n<p>In both the provisional/system test, the standings will be calculated using only the last submission which received a result other than <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Compilation Error\">CE</span>.\nOnly the last submissions are used to calculate the MIN for each test case when calculating the relative scores.</p>\n<p>The scores shown in the standings are relative, and whenever a new submission arrives, all relative scores are recalculated.\nOn the other hand, the score for each submission shown on the submissions page is the sum of the absolute score for each test case, and the relative scores are not shown.\nIn order to know the relative score of submission other than the latest one in the current standings, you need to resubmit it.\nIf your submission produces illegal output or exceeds the time limit for some test cases, the score shown on the submissions page will be 0, but the standings show the sum of the relative scores for the test cases that were answered correctly.</p>\n<h4>About execution time</h4>\n<p>Execution time may vary slightly from run to run.\nIn addition, since system tests simultaneously perform a large number of executions, it has been observed that execution time increases by several percent compared to provisional tests.\nFor these reasons, submissions that are very close to the time limit may result in <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> in the system test.\nPlease measure the execution time in your program to terminate the process, or have enough margin in the execution time.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format.</p>\n<pre><var>N</var>\n<var>A_{0,0}</var> <var>\\cdots</var> <var>A_{0,N-1}</var>\n<var>\\vdots</var>\n<var>A_{N-1,0}</var> <var>\\cdots</var> <var>A_{N-1,N-1}</var>\n</pre>\n<ul>\n<li>For all test cases, we fix <var>N = 5</var>.</li>\n<li><var>A_{i,j}</var> is the number of the <var>j</var>-th container brought in from the Receiving Gate at <var>(i,0)</var>, and it is an integer value satisfying <var>0 \\leq A_{i,j} \\leq N^2-1</var>. All values of <var>A_{i,j}</var> are distinct.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Output to Standard Output in the following format.</p>\n<pre><var>S_0</var>\n<var>\\vdots</var>\n<var>S_{N-1}</var>\n</pre>\n<p>Each <var>S_i</var> is a string consisting of the characters <code>P</code>, <code>Q</code>, <code>U</code>, <code>D</code>, <code>L</code>, <code>R</code>, <code>.</code>, and <code>B</code>. The <var>t</var>-th character represents the operation for the crane initially located at <var>(i,0)</var> in the <var>t</var>-th turn. The length of each output string must be between <var>1</var> and <var>10000</var>. The lengths of the strings can be different; in such cases, the shorter strings are padded with <code>.</code> at the end to match the length of the longest string.</p>\n<p><a href=\"https://img.atcoder.jp/ahc033/ELSlXTEw.html?lang=en&amp;seed=0&amp;output=sample\">Show example</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><p>The receiving order <var>A_{i,j}</var> is generated by shuffling the numbers <var>0, 1, \\cdots, N^2-1</var> in random order and then dividing them into groups of <var>N</var> each.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools (Input generator and visualizer)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc033/ELSlXTEw.html?lang=en\">Web version</a>: This is more powerful than the local version providing animations.</li>\n<li><a href=\"https://img.atcoder.jp/ahc033/ELSlXTEw.zip\">Local version</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.<ul>\n<li><a href=\"https://img.atcoder.jp/ahc033/ELSlXTEw_windows.zip\">Pre-compiled binary for Windows</a>: If you are not familiar with the Rust language environment, please use this instead.</li>\n</ul>\n</li>\n</ul>\n<p>Please be aware that sharing visualization results or discussing solutions/ideas during the contest is prohibited.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">5\n24 10 17 15 13\n14 11 2 1 5\n7 9 6 21 20\n8 4 19 3 16\n18 23 22 0 12\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">PRDDDDRRRQLLLUUPRRRUQ\nB\nPRQB\nPRRRRUUQB\nPRRRRQB\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ahc033/tasks/ahc033_a"}