{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>500</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>カードが <var>N</var> 枚あり、<var>i</var> 番目のカードには文字列 <var>S_i</var> が書かれています。  </p>\n<p>この中からちょうど <var>K</var> 枚選び、好きな順序で繋げてできる文字列のうち辞書順最小のものを求めてください。</p>\n<!--\n<details>\n<summary>辞書順とは？</summary>\n<p>\n辞書順とは簡単に説明すると「単語が辞書に載っている順番」を意味します。より厳密な説明として、英小文字からなる相異なる文字列 <var>A, B</var> の大小を判定するアルゴリズムを以下に説明します。\n</p>\n\n<p>以下では「 <var>A</var> の <var>i</var> 文字目の文字」を <var>A_i</var> のように表します。また、 <var>A</var> が <var>B</var> より辞書順で小さい場合は <var>A \\lt B</var> 、大きい場合は <var>A \\gt B</var> と表します。</p>\n\n<ol>\n  <li> <var>A, B</var> のうち長さが大きくない方の文字列の長さを <var>L</var> とします。<var>i=1,2,\\dots,L</var> に対して <var>A_i</var> と <var>B_i</var> が一致するか調べます。 </li>\n  <li> <var>A_i \\neq B_i</var> である <var>i</var> が存在する場合、そのような <var>i</var> のうち最小のものを <var>j</var> とします。そして、<var>A_j</var> と <var>B_j</var> を比較して、<var>A_j</var> が <var>B_j</var> よりアルファベット順で小さい場合は <var>A \\lt B</var> 、そうでない場合は <var>A \\gt B</var> と決定して、アルゴリズムを終了します。\n  </li>\n  <li> <var>A_i \\neq B_i</var> である <var>i</var> が存在しない場合、<var>A</var> と <var>B</var> の長さを比較して、<var>A</var> が <var>B</var> より短い場合は <var>A \\lt B</var> 、長い場合は <var>A \\gt B</var> と決定して、アルゴリズムを終了します。 </li>\n</ol>\n\n</details>\n-->\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq K \\leq N \\leq 50</var></li>\n<li><var>1 \\leq |S_i| \\leq 50</var></li>\n<li><var>S_i</var> は英小文字からなる</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var> <var>K</var>\n<var>S_1</var>\n<var>S_2</var>\n<var>\\vdots</var>\n<var>S_N</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>答えを出力せよ。  </p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>4 3\node\nzaaa\nr\natc\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>atcoder\n</pre>\n<p>カードの中に書かれている文字を、反転させたり並び替えたりすることはできません。<br>\nたとえば <var>1</var> 枚目のカードに書かれている <code>ode</code> を、<code>edo</code> や <code>deo</code> のように使うことはできません。  </p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>5 2\nz\nz\nzzz\nz\nzzzzzz\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>zz\n</pre>\n<p><var>S_i = S_j</var> を満たす <var>i,j(i\\neq j)</var> の組が存在することもあります。  </p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> cards. The <var>i</var>-th card has a string <var>S_i</var> written on it.</p>\n<p>Find the lexicographically smallest string that can be obtained by choosing <var>K</var> of these cards and concatenating them in any order.</p>\n<!--\n<details>\n<summary>What is the lexicographical order?</summary>\n<p>\nSimply speaking, the lexicographical order is the order in which words are listed in a dictionary. As a more formal definition, here is the algorithm to determine the lexicographical order between different strings <var>S</var> and <var>T</var>.\n</p>\n\n<p>Below, let <var>S_i</var> denote the <var>i</var>-th character of <var>S</var>. Also, if <var>S</var> is lexicographically smaller than <var>T</var>, we will denote that fact as <var>S \\lt T</var>; if <var>S</var> is lexicographically larger than <var>T</var>, we will denote that fact as <var>S \\gt T</var>.</p>\n\n<ol>\n  <li> Let <var>L</var> be the smaller of the lengths of <var>S</var> and <var>T</var>. For each <var>i=1,2,\\dots,L</var>, we check whether <var>S_i</var> and <var>T_i</var> are the same. </li>\n  <li> If there is an <var>i</var> such that <var>S_i \\neq T_i</var>, let <var>j</var> be the smallest such <var>i</var>. Then, we compare <var>S_j</var> and <var>T_j</var>. If <var>S_j</var> comes earlier than <var>T_j</var> in alphabetical order, we determine that <var>S \\lt T</var> and quit; if <var>S_j</var> comes later than <var>T_j</var>, we determine that <var>S \\gt T</var> and quit.\n  </li>\n  <li> If there is no <var>i</var> such that <var>S_i \\neq T_i</var>, we compare the lengths of <var>S</var> and <var>T</var>. If <var>S</var> is shorter than <var>T</var>, we determine that <var>S \\lt T</var> and quit; if <var>S</var> is longer than <var>T</var>, we determine that <var>S \\gt T</var> and quit. </li>\n</ol>\n\n</details>\n-->\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq N \\leq 50</var></li>\n<li><var>1 \\leq |S_i| \\leq 50</var></li>\n<li><var>S_i</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>S_1</var>\n<var>S_2</var>\n<var>\\vdots</var>\n<var>S_N</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3\node\nzaaa\nr\natc\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>atcoder\n</pre>\n<p>Note that it is not possible to reverse or permute the string written on a card.<br>\nFor example, <code>ode</code> written on the first card cannot be used as <code>edo</code> or <code>deo</code>.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 2\nz\nz\nzzz\nz\nzzzzzz\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>zz\n</pre>\n<p>There may be a pair <var>i, j</var> <var>(i\\neq j)</var> such that <var>S_i = S_j</var>. </p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/abc225/tasks/abc225_f"}