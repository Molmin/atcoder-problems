{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>2000</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>各頂点に <var>0</var> または <var>1</var> が書かれた木があります。\nこの木は <var>N</var> 個の頂点を持ち、それらには <var>1</var> から <var>N</var> までの番号が振られています。\n各 <var>i</var> について、頂点 <var>a_i</var> と頂点 <var>b_i</var> を結ぶ辺が存在します。\n頂点 <var>i</var> に書かれた数は <var>c_i</var> です。</p>\n<p>すぬけ君は、この木に以下の操作を繰り返します。</p>\n<ul>\n<li>辺を <var>1</var> 本選んで縮約し、消された <var>2</var> 個の頂点に書かれていた数の NAND を新たな頂点に書き込む。</li>\n</ul>\n<p><img alt=\"\" src=\"https://img.atcoder.jp/agc050/6fd816a993f20325edb625c93745ee8f.png\"></p>\n<p><var>N - 1</var> 回の操作後、木は <var>1</var> 個の頂点となります。\nこのような操作の行い方は <var>(N-1)!</var> 通りありますが、そのうち最後の頂点に <var>1</var> が書き込まれるものは何通りあるでしょうか。\nこの答えを <font color=\"red\"><strong><var>2</var> で割った余り</strong></font>を計算してください。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>注記</h3><ul>\n<li>演算 NAND の定義は次の通りです: <var>NAND(0, 0) = NAND(0, 1) = NAND(1, 0) = 1, NAND(1, 1) = 0</var>.</li>\n<li>頂点 <var>s</var> と頂点 <var>t</var> を結ぶ辺を縮約する際は、その辺を取り除くと同時に <var>2</var> 頂点を併合します。\n縮約後の木において、併合により生まれた頂点と頂点 <var>u</var> を結ぶ辺が存在するのは、縮約前の木において <var>s</var> と <var>u</var> を結ぶ辺または <var>t</var> と <var>u</var> を結ぶ辺が存在するときであり、またそのときに限られます。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>2 \\leq N \\leq 300</var></li>\n<li><var>1 \\leq a_i &lt; b_i \\leq N</var></li>\n<li>入力が表すグラフは木である。</li>\n<li><var>0 \\leq c_i \\leq 1</var></li>\n<li>入力中の全ての値は整数である。</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は標準入力から以下の形式で与えられる。</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n<var>c_1</var> <var>c_2</var> <var>\\cdots</var> <var>c_N</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>答えを出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>4\n1 2\n2 3\n2 4\n0 1 1 0\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>0\n</pre>\n<p><var>6</var> 通りの操作順のうち <var>4</var> 通りで最後の頂点に <var>1</var> が書き込まれることがわかります。よって、答えは <var>4 \\ mod \\ 2 = 0</var> です。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>4\n1 2\n2 3\n3 4\n1 1 0 1\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>1\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>20\n3 15\n1 12\n10 16\n3 19\n5 20\n1 9\n6 13\n14 19\n2 4\n8 11\n12 16\n6 20\n2 17\n16 18\n17 19\n7 10\n16 20\n2 20\n8 20\n1 0 0 1 1 0 1 1 1 0 0 1 0 1 0 1 1 1 0 0\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>0\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>2000</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a tree whose vertices are labelled with either <var>0</var> or <var>1</var>.\nThe tree has <var>N</var> vertices numbered <var>1</var> through <var>N</var>.\nFor each <var>i</var>, there is an edge connecting Vertex <var>a_i</var> and Vertex <var>b_i</var>.\nThe label of Vertex <var>i</var> is <var>c_i</var>.</p>\n<p>Snuke wants to repeat performing the following operation on the tree:</p>\n<ul>\n<li>Choose an edge, contract it, and label the new vertex with the NAND of the labels of two old vertices.</li>\n</ul>\n<p><img alt=\"\" src=\"https://img.atcoder.jp/agc050/6fd816a993f20325edb625c93745ee8f.png\"></p>\n<p>After performing <var>N - 1</var> operations, the tree ends up with a single vertex.\nAmong <var>(N-1)!</var> ways to do so, how many will result in a vertex labelled with <var>1</var>?\nCompute the answer <font color=\"red\"><strong>modulo <var>2</var></strong></font>.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Notes</h3><ul>\n<li>NAND operation is defined as follows: <var>NAND(0, 0) = NAND(0, 1) = NAND(1, 0) = 1, NAND(1, 1) = 0</var>.</li>\n<li>When we contract an edge between Vertex <var>s</var> and Vertex <var>t</var>, we remove the edge, and simultaneously merge the two vertices.\nThere is an edge between the merged vertex and Vertex <var>u</var> in the new tree iff there is an edge between <var>s</var> and <var>u</var>, or an edge between <var>t</var> and <var>u</var>, in the old tree.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 300</var></li>\n<li><var>1 \\leq a_i &lt; b_i \\leq N</var></li>\n<li>The input represents a valid tree.</li>\n<li><var>0 \\leq c_i \\leq 1</var></li>\n<li>All values in the input are integers.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n<var>c_1</var> <var>c_2</var> <var>\\cdots</var> <var>c_N</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1 2\n2 3\n2 4\n0 1 1 0\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n</pre>\n<p>It turns out that in <var>4</var> of all <var>6</var> ways the final label will be <var>1</var>, so the answer is <var>4 \\ mod \\ 2 = 0</var>.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 2\n2 3\n3 4\n1 1 0 1\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20\n3 15\n1 12\n10 16\n3 19\n5 20\n1 9\n6 13\n14 19\n2 4\n8 11\n12 16\n6 20\n2 17\n16 18\n17 19\n7 10\n16 20\n2 20\n8 20\n1 0 0 1 1 0 1 1 1 0 0 1 0 1 0 1 1 1 0 0\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/agc050/tasks/agc050_f"}