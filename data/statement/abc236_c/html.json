{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>300</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>AtCoder 鉄道のとある路線には <var>N</var> 個の駅が存在し、始点から終点に向かって <var>i \\, (1 \\leq i \\leq N)</var> 番目の駅の名前は <var>S_i</var> です。</p>\n<p>普通列車は全ての駅に止まりますが、急行列車は全ての駅に止まるとは限りません。具体的には、急行列車は <var>M \\, (M \\leq N)</var> 個の駅にのみ止まり、<var>j \\, (1 \\leq j \\leq M)</var> 番目に止まる駅の名前は <var>T_j</var> です。<br>\nただし、<var>T_1 = S_1</var> かつ <var>T_M = S_N</var>、すなわち急行列車は始点と終点の両方に止まることが保証されます。</p>\n<p><var>N</var> 個の駅それぞれについて、その駅に急行列車が止まるかどうか判定してください。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>2 \\leq M \\leq N \\leq 10^5</var></li>\n<li><var>N, M</var> は整数</li>\n<li><var>S_i \\, (1 \\leq i \\leq N)</var> は英小文字のみからなる <var>1</var> 文字以上 <var>10</var> 文字以下の文字列</li>\n<li><var>S_i \\neq S_j \\, (i \\neq j)</var></li>\n<li><var>T_1 = S_1</var> かつ <var>T_M = S_N</var></li>\n<li><var>(T_1, \\dots, T_M)</var> は <var>(S_1, \\dots, S_N)</var> から <var>0</var> 個以上の文字列を選んで取り除き、残った文字列を元の順序で並べることで得られる</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var> <var>M</var>\n<var>S_1</var> <var>\\ldots</var> <var>S_N</var>\n<var>T_1</var> <var>\\ldots</var> <var>T_M</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p><var>N</var> 行出力せよ。<var>i \\, (1 \\leq i \\leq N)</var> 行目には、始点から終点に向かって <var>i</var> 番目の駅に急行列車が止まるなら <code>Yes</code>、そうでないなら <code>No</code> と出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>5 3\ntokyo kanda akiba okachi ueno\ntokyo akiba ueno\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>Yes\nNo\nYes\nNo\nYes\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>7 7\na t c o d e r\na t c o d e r\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>Yes\nYes\nYes\nYes\nYes\nYes\nYes\n</pre>\n<p>急行列車が全ての駅に止まることもあります。</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> stations on a certain line operated by AtCoder Railway. The <var>i</var>-th station <var>(1 \\leq i \\leq N)</var> from the starting station is named <var>S_i</var>.</p>\n<p>Local trains stop at all stations, while express trains may not. Specifically, express trains stop at only <var>M \\, (M \\leq N)</var> stations, and the <var>j</var>-th stop <var>(1 \\leq j \\leq M)</var> is the station named <var>T_j</var>.<br>\nHere, it is guaranteed that <var>T_1 = S_1</var> and <var>T_M = S_N</var>, that is, express trains stop at both starting and terminal stations.</p>\n<p>For each of the <var>N</var> stations, determine whether express trains stop at that station.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constrains</h3><ul>\n<li><var>2 \\leq M \\leq N \\leq 10^5</var></li>\n<li><var>N</var> and <var>M</var> are integers.</li>\n<li><var>S_i</var> <var>(1 \\leq i \\leq N)</var> is a string of length between <var>1</var> and <var>10</var> (inclusive) consisting of lowercase English letters.</li>\n<li><var>S_i \\neq S_j \\, (i \\neq j)</var></li>\n<li><var>T_1 = S_1</var> and <var>T_M = S_N</var>.</li>\n<li><var>(T_1, \\dots, T_M)</var> is obtained by removing zero or more strings from <var>(S_1, \\dots, S_N)</var> and lining up the remaining strings without changing the order.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>S_1</var> <var>\\ldots</var> <var>S_N</var>\n<var>T_1</var> <var>\\ldots</var> <var>T_M</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> lines. The <var>i</var>-th line <var>(1 \\leq i \\leq N)</var> should contain <code>Yes</code> if express trains stop at the <var>i</var>-th station from the starting station, and <code>No</code> otherwise.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\ntokyo kanda akiba okachi ueno\ntokyo akiba ueno\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\nNo\nYes\nNo\nYes\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 7\na t c o d e r\na t c o d e r\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\nYes\nYes\nYes\nYes\nYes\nYes\n</pre>\n<p>Express trains may stop at all stations.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/abc236/tasks/abc236_c"}