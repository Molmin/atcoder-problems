{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>2100</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>縦 <var>N</var> 行、横 <var>N</var> 列のマス目が書かれたボードと <var>N \\times N</var> 枚のタイルがあります。</p>\n<p>外側に面したマスの辺には、タイルの差込口がついています。\nつまり、ボードの上下左右の辺にはそれぞれ <var>N</var> 個の差込口がついており、合計で <var>4 \\times N</var> 個の差込口があることになります。\nそれぞれの差込口には以下のように番号が付けられています。</p>\n<ul>\n<li>上辺の差込口：左から順に <var>U1, U2, ..., UN</var></li>\n<li>下辺の差込口：左から順に <var>D1, D2, ..., DN</var></li>\n<li>左辺の差込口：上から順に <var>L1, L2, ..., LN</var></li>\n<li>右辺の差込口：上から順に <var>R1, R2, ..., RN</var></li>\n</ul>\n<figure id=\"socket_id\">\n<img src=\"https://atcoder.jp/img/code-festival-2016-final/916ffede6e718801d689f189e658a9bb.png\">\n<figcaption>図：差込口の番号の例</figcaption>\n</figure>\n\n<p>各差込口からはタイルを差し込むことが出来ます。\nタイルが差し込まれたマスにすでにタイルが置かれていた場合は、置かれていたタイルは <var>1</var> つ先のマスに押し出され、さらにその <var>1</var> つ先のマスにタイルが置かれていた場合も同様に押し出されていきます。\nただし、押し出されたタイルがボードの外に出てしまう場合はタイルを差し込むことができません。\nタイルを差し込んだときの挙動に関する詳しい例については入出力例 <var>1</var> を参考にしてください。</p>\n<p>すぬけくんは、<var>N \\times N</var> 枚のタイルを <var>1</var> 枚ずつ差込口から差し込むことによって、各マスに <var>1</var> 枚ずつタイルが置かれている状態にしようとしています。\nただし、差込口 <var>Ui</var> からはちょうど <var>U_i</var> 枚、差込口 <var>Di</var> からはちょうど <var>D_i</var> 枚、差込口 <var>Li</var> からはちょうど <var>L_i</var> 枚、差込口 <var>Ri</var> からはちょうど <var>R_i</var> 枚のタイルを差し込まなければなりません。\nこのような差し込み方が可能かどうかを判定してください。また、可能な場合は差し込む順番を出力してください。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1≦N≦300</var></li>\n<li><var>U_i,D_i,L_i,R_i</var> は <var>0</var> 以上の整数である。</li>\n<li><var>U_i,D_i,L_i,R_i</var> の和は <var>N \\times N</var> と等しい。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>部分点</h3><ul>\n<li><var>N≦40</var> を満たすデータセットに正解した場合は、<var>2000</var> 点が与えられる。</li>\n<li>追加制約のないデータセットに正解した場合は、上記とは別に <var>100</var> 点が与えられる。</li>\n</ul>\n</section>\n</div>\n\n<hr>\n\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var>\n<var>U_1</var> <var>U_2</var> <var>...</var> <var>U_N</var>\n<var>D_1</var> <var>D_2</var> <var>...</var> <var>D_N</var>\n<var>L_1</var> <var>L_2</var> <var>...</var> <var>L_N</var>\n<var>R_1</var> <var>R_2</var> <var>...</var> <var>R_N</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>各マスに <var>1</var> 枚ずつタイルが置かれるようにタイルを差し込むことが可能ならば、差込口の番号を差し込むべき順番で <var>1</var> 行にひとつずつ出力せよ。不可能な場合は、代わりに <code>NO</code> と出力せよ。また、差し込む順番が複数考えられる場合は、そのうちの <var>1</var> つを出力すれば良い。</p>\n</section>\n</div>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>3\n0 0 1\n1 1 0\n3 0 1\n0 1 1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>L1\nL1\nL1\nL3\nD1\nR2\nU3\nR3\nD2\n</pre>\n\n<p>下図の通りに差し込めば良いです。矢印は差し込む場所を、丸はタイルを、丸の中に書かれた番号はそのタイルが何番目に差し込まれたかを表しています。</p>\n<p><img alt=\"\" src=\"https://atcoder.jp/img/code-festival-2016-final/252110b5818dc7d972f77d90f99cb8cb.png\"></p>\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>2\n2 0\n2 0\n0 0\n0 0\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>NO\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>2100</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has a board with an <var>N \\times N</var> grid, and <var>N \\times N</var> tiles.</p>\n<p>Each side of a square that is part of the perimeter of the grid is attached with a socket.\nThat is, each side of the grid is attached with <var>N</var> sockets, for the total of <var>4 \\times N</var> sockets.\nThese sockets are labeled as follows:</p>\n<ul>\n<li>The sockets on the top side of the grid: <var>U1, U2, ..., UN</var> from left to right</li>\n<li>The sockets on the bottom side of the grid: <var>D1, D2, ..., DN</var> from left to right</li>\n<li>The sockets on the left side of the grid: <var>L1, L2, ..., LN</var> from top to bottom</li>\n<li>The sockets on the right side of the grid: <var>R1, R2, ..., RN</var> from top to bottom</li>\n</ul>\n<figure id=\"socket_id\">\n<img src=\"https://atcoder.jp/img/code-festival-2016-final/916ffede6e718801d689f189e658a9bb.png\">\n<figcaption>Figure: The labels of the sockets</figcaption>\n</figure>\n\n<p>Snuke can insert a tile from each socket into the square on which the socket is attached.\nWhen the square is already occupied by a tile, the occupying tile will be pushed into the next square, and when the next square is also occupied by another tile, that another occupying tile will be pushed as well, and so forth.\nSnuke cannot insert a tile if it would result in a tile pushed out of the grid.\nThe behavior of tiles when a tile is inserted is demonstrated in detail at Sample Input/Output <var>1</var>.</p>\n<p>Snuke is trying to insert the <var>N \\times N</var> tiles one by one from the sockets, to reach the state where every square contains a tile.\nHere, he must insert exactly <var>U_i</var> tiles from socket <var>Ui</var>, <var>D_i</var> tiles from socket <var>Di</var>, <var>L_i</var> tiles from socket <var>Li</var> and <var>R_i</var> tiles from socket <var>Ri</var>.\nDetermine whether it is possible to insert the tiles under the restriction. If it is possible, in what order the tiles should be inserted from the sockets?</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1≦N≦300</var></li>\n<li><var>U_i,D_i,L_i</var> and <var>R_i</var> are non-negative integers.</li>\n<li>The sum of all values <var>U_i,D_i,L_i</var> and <var>R_i</var> is equal to <var>N \\times N</var>.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Partial Scores</h3><ul>\n<li><var>2000</var> points will be awarded for passing the test set satisfying <var>N≦40</var>.</li>\n<li>Additional <var>100</var> points will be awarded for passing the test set without additional constraints.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>U_1</var> <var>U_2</var> <var>...</var> <var>U_N</var>\n<var>D_1</var> <var>D_2</var> <var>...</var> <var>D_N</var>\n<var>L_1</var> <var>L_2</var> <var>...</var> <var>L_N</var>\n<var>R_1</var> <var>R_2</var> <var>...</var> <var>R_N</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible to insert the tiles so that every square will contain a tile, print the labels of the sockets in the order the tiles should be inserted from them, one per line. If it is impossible, print <code>NO</code> instead. If there exists more than one solution, print any of those.</p>\n</section>\n</div>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n0 0 1\n1 1 0\n3 0 1\n0 1 1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>L1\nL1\nL1\nL3\nD1\nR2\nU3\nR3\nD2\n</pre>\n\n<p>Snuke can insert the tiles as shown in the figure below. An arrow indicates where a tile is inserted from, a circle represents a tile, and a number written in a circle indicates how many tiles are inserted before and including the tile.</p>\n<p><img alt=\"\" src=\"https://atcoder.jp/img/code-festival-2016-final/252110b5818dc7d972f77d90f99cb8cb.png\"></p>\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n2 0\n2 0\n0 0\n0 0\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/cf16-final/tasks/codefestival_2016_final_j"}