{"html":{"ja":"<span class=\"lang-ja\">\n<p>(まずは問題Aを先に読んでください。この問題を解くことで得られる得点は1点です。順位にはほぼ影響しません。)</p>\n\n<div class=\"part\">\n<section>\n<h3>入門者向けガイド</h3><p>まずは入力と出力からスコアを計算するプログラムを作ってみましょう。\nスコアは実際に提出すれば合計点は分かりますし、今回のようにローカル実行用のスコア計算プログラムが提供される場合も多くあります。\nしかし、問題の仕様を正しく理解出来ているかを確認するのにも役立ちますし、解答プログラムを作成する際やデバッグ時にもソースコードが流用出来ることが多いため、よほど複雑なスコア計算で無い限りは作っておいて損はありません。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>D</var> 日分のコンテストの日程が与えられます。\n各 <var>d=1,2,\\ldots,D</var>について、<var>d</var> 日目終了時点での満足度を計算してください。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は問題Aの入力の末尾に問題Aの出力が続く形で標準入力から与えられる。</p>\n<pre><var>D</var>\n<var>c_1</var> <var>c_2</var> <var>\\cdots</var> <var>c_{26}</var>\n<var>s_{1,1}</var> <var>s_{1,2}</var> <var>\\cdots</var> <var>s_{1,26}</var>\n<var>\\vdots</var>\n<var>s_{D,1}</var> <var>s_{D,2}</var> <var>\\cdots</var> <var>s_{D,26}</var>\n<var>t_1</var>\n<var>t_2</var>\n<var>\\vdots</var>\n<var>t_D</var>\n</pre>\n\n<ul>\n<li>問題Aの入力に該当する部分の制約及び生成方法は問題Aのものと同じである。</li>\n<li>問題Aの出力に該当する部分は、各 <var>d</var> について <var>1\\leq t_d \\leq 26</var> を満たし、制約を満たすあらゆる値に対して正しく動作することが期待される。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p><var>d</var> 日目終了時点での満足度を <var>v_d</var> としたとき、以下のフォーマットで標準出力に出力せよ。</p>\n<pre><var>v_1</var>\n<var>v_2</var>\n<var>\\vdots</var>\n<var>v_D</var>\n</pre>\n\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>5\n86 90 69 51 2 96 71 47 88 34 45 46 89 34 31 38 97 84 41 80 14 4 50 83 7 82\n19771 12979 18912 10432 10544 12928 13403 3047 10527 9740 8100 92 2856 14730 1396 15905 6534 4650 11469 3628 8433 2994 10899 16396 18355 11424\n6674 17707 13855 16407 12232 2886 11908 1705 5000 1537 10440 10711 4917 10770 17272 15364 19277 18094 3929 3705 7169 6159 18683 15410 9092 4570\n6878 4239 19925 1799 375 9563 3445 5658 19857 11401 6997 6498 19933 3848 2426 2146 19745 16880 17773 18359 3921 14172 16730 11157 5439 256\n8633 15862 15303 10749 18499 7792 10317 5901 9395 11433 3514 3959 5202 19850 19469 9790 5653 784 18500 10552 17975 16615 7852 197 8471 7452\n19855 17918 7990 10572 4333 438 9140 9104 12622 4985 12319 4028 19922 12132 16259 17476 2976 547 19195 19830 16285 4806 4471 9457 2864 2192\n1\n17\n13\n14\n13\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>18398\n35037\n51140\n65837\n79325\n</pre>\n\n<p>この入出力例は問題仕様の確認用の小さいもので、制約 <var>D=365</var> を満たしておらず、実際にテストケースとして与えられることはない。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>次のステップ</h3><p>この問題は、1日目に開催するコンテストを決める、2日目に開催するコンテストを決める、… という具合に順番に解を構築していくことが出来、更に構築した部分的な解の良さ(満足度)も計算が出来ます。\nそこで、<var>d</var> 日目にはその日の終了時点における満足度が一番高くなるコンテストを選択する、というアルゴリズムを考えることが出来ます。\nこのような、その瞬間でのベストな選択を繰り返す「貪欲法」は、既にABCなどのアルゴリズムコンテストで出会ったことがあるかもしれません。\n貪欲法は問題によっては最適解を達成することが保証出来ますが、残念ながらこの問題に対しては最適解を与えるとは限りません。\nしかし、最適解は得られずとも、多くの場合にそれなりに良い解を求めることは出来ます。\n問題Aに戻り、今準備したスコア計算プログラムを活用して貪欲法による解答を実装してみましょう。</p>\n<p>貪欲法は汎用性が高く実装が簡単な上に、他の手法に比べ比較的高速に動作することも多く、巨大な入力を処理する必要がある場合には最有力の手法となることも多々あります。\nまた、貪欲な選択の基準(評価関数)を変更したり、その瞬間におけるベストな解一つに絞らずに複数個の候補を残して構築していったり(ビームサーチ)、貪欲法で得られた解をベースに他の手法で更に良い解を探索したりといった方法で、更にスコアを伸ばしていくことも出来ます。\n詳しくはコンテスト終了後の解説を参照してください。</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>(Please read problem A first. The maximum score you can get by solving this problem B is 1, which will have almost no effect on your ranking.)</p>\n\n<div class=\"part\">\n<section>\n<h3>Beginner's Guide</h3><p>Let's first write a program to calculate the score from a pair of input and output. You can know the total score by submitting your solution, or an official program to calculate a score is often provided for local evaluation as in this contest. Nevertheless, writing a score calculator by yourself is still useful to check your understanding of the problem specification. Moreover, the source code of the score calculator can often be reused for solving the problem or debugging your solution. So it is worthwhile to write a score calculator unless it is very complicated.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You will be given a contest schedule for <var>D</var> days.\nFor each <var>d=1,2,\\ldots,D</var>, calculate the satisfaction at the end of day <var>d</var>.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the form of the input of Problem A followed by the output of Problem A.</p>\n<pre><var>D</var>\n<var>c_1</var> <var>c_2</var> <var>\\cdots</var> <var>c_{26}</var>\n<var>s_{1,1}</var> <var>s_{1,2}</var> <var>\\cdots</var> <var>s_{1,26}</var>\n<var>\\vdots</var>\n<var>s_{D,1}</var> <var>s_{D,2}</var> <var>\\cdots</var> <var>s_{D,26}</var>\n<var>t_1</var>\n<var>t_2</var>\n<var>\\vdots</var>\n<var>t_D</var>\n</pre>\n\n<ul>\n<li>The constraints and generation methods for the input part are the same as those for Problem A.</li>\n<li>For each <var>d</var>, <var>t_d</var> is an integer satisfying <var>1\\leq t_d \\leq 26</var>, and your program is expected to work correctly for any value that meets the constraints.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>v_d</var> be the satisfaction at the end of day <var>d</var>.\nPrint <var>D</var> integers <var>v_d</var> to Standard Output in the following format:</p>\n<pre><var>v_1</var>\n<var>v_2</var>\n<var>\\vdots</var>\n<var>v_D</var>\n</pre>\n\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n86 90 69 51 2 96 71 47 88 34 45 46 89 34 31 38 97 84 41 80 14 4 50 83 7 82\n19771 12979 18912 10432 10544 12928 13403 3047 10527 9740 8100 92 2856 14730 1396 15905 6534 4650 11469 3628 8433 2994 10899 16396 18355 11424\n6674 17707 13855 16407 12232 2886 11908 1705 5000 1537 10440 10711 4917 10770 17272 15364 19277 18094 3929 3705 7169 6159 18683 15410 9092 4570\n6878 4239 19925 1799 375 9563 3445 5658 19857 11401 6997 6498 19933 3848 2426 2146 19745 16880 17773 18359 3921 14172 16730 11157 5439 256\n8633 15862 15303 10749 18499 7792 10317 5901 9395 11433 3514 3959 5202 19850 19469 9790 5653 784 18500 10552 17975 16615 7852 197 8471 7452\n19855 17918 7990 10572 4333 438 9140 9104 12622 4985 12319 4028 19922 12132 16259 17476 2976 547 19195 19830 16285 4806 4471 9457 2864 2192\n1\n17\n13\n14\n13\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>18398\n35037\n51140\n65837\n79325\n</pre>\n\n<p>Note that this example is a small one for checking the problem specification. It does not satisfy the constraint <var>D=365</var> and is never actually given as a test case.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Next Step</h3><p>We can build a solution (schedule) for this problem in the order of day 1, day 2, and so on. And for every partial solution we have built, we can calculate the goodness (satisfaction) by using the above score calculator. So we can construct the following algorithm: for each <var>d=1,2,\\ldots,D</var>, we select the contest type that maximizes the satisfaction at the end of day <var>d</var>. You may have already encountered this kind of \"greedy algorithms\" in algorithm contests such as ABC. Greedy algorithms can guarantee the optimality for several problems, but unfortunately, it doesn't ensure optimality for this problem. However, even if it does not ensure optimality, we can still obtain a reasonable solution in many cases. Let's go back to Problem A and implement the greedy algorithm by utilizing the score calculator you just implemented!</p>\n<p>Greedy methods can be applied to a variety of problems, are easy to implement, and often run relatively fast compared to other methods. Greedy is often the most powerful method when we need to process huge inputs.\nWe can further improve the score by changing the greedy selection criteria (evaluation function), keeping multiple candidates instead of focusing on one best partial solution (beam search), or using the output of greedy algorithms as an initial solution of other methods.\nFor more information, please refer to the editorial that will be published after the contest.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/intro-heuristics/tasks/intro_heuristics_b"}