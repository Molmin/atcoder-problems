{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>300</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>ヘビの待ち行列があります。最初、列は空です。</p>\n<p>クエリが <var>Q</var> 個与えられるので、与えられた順に処理してください。クエリは以下の <var>3</var> 種類です。</p>\n<ul>\n<li>タイプ <var>1</var> : <code>1 l</code> の形式で与えられる。長さ <var>l</var> のヘビが列の末尾に追加される。このとき追加するヘビの頭の位置は、元の列が空の場合は座標 <var>0</var>、そうでない場合は最後尾のヘビの頭の座標に最後尾のヘビの長さを加えた座標となる。</li>\n<li>タイプ <var>2</var> : <code>2</code> の形式で与えられる。列の先頭にいるヘビが列から抜ける。このとき、列が空でないことは保証される。抜けたヘビの長さを <var>m</var> として、列に残っている全てのヘビの頭の座標が <var>m</var> だけ減少する。</li>\n<li>タイプ <var>3</var> : <code>3 k</code> の形式で与えられる。列の先頭から数えて <var>k</var> 番目にいるヘビの頭の座標を出力せよ。このとき、列には少なくとも <var>k</var> 匹のヘビがいることが保証される。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq Q \\leq 3 \\times 10^{5}</var></li>\n<li>タイプ <var>1</var> のクエリにおいて、<var>1 \\leq l \\leq 10^{9}</var></li>\n<li>タイプ <var>2</var> のクエリにおいて、列が空でないことが保証される</li>\n<li>タイプ <var>3</var> のクエリにおいて、列にいるヘビの数を <var>n</var> として、<var>1 \\leq k \\leq n</var></li>\n<li>入力は全て整数</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>Q</var>\n<var>\\text{query}_1</var>\n<var>\\text{query}_2</var>\n<var>\\vdots</var>\n<var>\\text{query}_Q</var>\n</pre>\n\n<p>ただし、<var>\\text{query}_i</var> は <var>i</var> 個目のクエリを表し、以下のいずれかの形式である。</p>\n<pre><var>1</var> <var>l</var>\n</pre>\n\n<pre><var>2</var>\n</pre>\n\n<pre><var>3</var> <var>k</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>タイプ <var>3</var> のクエリの個数を <var>q</var> として、<var>q</var> 行出力せよ。<var>i</var> 行目には、<var>i</var> 個目のタイプ <var>3</var> のクエリに対する答えを出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>7\n1 5\n1 7\n3 2\n1 3\n1 4\n2\n3 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>5\n10\n</pre>\n\n<ul>\n<li><var>1</var> 個目のクエリ : 長さ <var>5</var> のヘビが列に追加される。列にヘビはいないため、追加されたヘビの頭の座標は <var>0</var> となる。</li>\n<li><var>2</var> 個目のクエリ : 長さ <var>7</var> のヘビが列に追加される。追加する前の最後尾のヘビの頭の座標が <var>0</var> で長さが <var>5</var> のため、追加されたヘビの頭の座標は <var>5</var> となる。</li>\n<li><var>3</var> 個目のクエリ : 前から <var>2</var> 番目にいるヘビの頭の座標を出力する。列にいるヘビの頭の座標は前から順に <var>0, 5</var> であるため、<var>5</var> を出力する。</li>\n<li><var>4</var> 個目のクエリ : 長さ <var>3</var> のヘビが列に追加される。追加する前の最後尾のヘビの頭の座標が <var>5</var> で長さが <var>7</var> のため、追加されたヘビの頭の座標は <var>12</var> となる。</li>\n<li><var>5</var> 個目のクエリ : 長さ <var>4</var> のヘビが列に追加される。追加する前の最後尾のヘビの頭の座標が <var>12</var> で長さが <var>3</var> のため、追加されたヘビの頭の座標は <var>15</var> となる。</li>\n<li><var>6</var> 個目のクエリ : 先頭のヘビが列から抜ける。抜けたヘビの長さが <var>5</var> であるため、列にいるヘビの頭の座標は <var>5</var> だけ減少する。列に残っているヘビの頭の座標は先頭から順に <var>0,7,10</var> となる。</li>\n<li><var>7</var> 個目のクエリ : 前から <var>3</var> 番目にいるヘビの頭の座標を出力する。列にいるヘビの頭の座標は前から順に <var>0, 7, 10</var> であるため、<var>10</var> を出力する。</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>3\n1 1\n2\n1 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre></pre>\n\n<p>タイプ <var>3</var> のクエリが <var>1</var> つもない場合もあります。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>10\n1 15\n1 10\n1 5\n2\n1 5\n1 10\n1 15\n2\n3 4\n3 2\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>20\n5\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a queue of snakes. Initially, the queue is empty.</p>\n<p>You are given <var>Q</var> queries, which should be processed in the order they are given. There are three types of queries:</p>\n<ul>\n<li>Type <var>1</var>: Given in the form <code>1 l</code>. A snake of length <var>l</var> is added to the end of the queue. If the queue was empty before adding, the head position of the newly added snake is <var>0</var>; otherwise, it is the sum of the head coordinate of the last snake in the queue and the last snake’s length.</li>\n<li>Type <var>2</var>: Given in the form <code>2</code>. The snake at the front of the queue leaves the queue. It is guaranteed that the queue is not empty at this time. Let <var>m</var> be the length of the snake that left, then the head coordinate of every snake remaining in the queue decreases by <var>m</var>.</li>\n<li>Type <var>3</var>: Given in the form <code>3 k</code>. Output the head coordinate of the snake that is <var>k</var>-th from the front of the queue. It is guaranteed that there are at least <var>k</var> snakes in the queue at this time.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq Q \\leq 3 \\times 10^{5}</var></li>\n<li>For a query of type <var>1</var>, <var>1 \\leq l \\leq 10^{9}</var></li>\n<li>For a query of type <var>2</var>, it is guaranteed that the queue is not empty.</li>\n<li>For a query of type <var>3</var>, let <var>n</var> be the number of snakes in the queue, then <var>1 \\leq k \\leq n</var>. </li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>Q</var>\n<var>\\text{query}_1</var>\n<var>\\text{query}_2</var>\n<var>\\vdots</var>\n<var>\\text{query}_Q</var>\n</pre>\n\n<p>Here, <var>\\text{query}_i</var> is the <var>i</var>-th query in one of the following forms:</p>\n<pre><var>1</var> <var>l</var>\n</pre>\n\n<pre><var>2</var>\n</pre>\n\n<pre><var>3</var> <var>k</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>q</var> be the number of queries of type <var>3</var>. Print <var>q</var> lines. The <var>i</var>-th line should contain the answer to the <var>i</var>-th type <var>3</var> query.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\n1 5\n1 7\n3 2\n1 3\n1 4\n2\n3 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n10\n</pre>\n\n<ul>\n<li>1st query: A snake of length <var>5</var> is added to the queue. Since the queue was empty, the head coordinate of this snake is <var>0</var>.  </li>\n<li>2nd query: A snake of length <var>7</var> is added to the queue. Before adding, the last snake has head coordinate <var>0</var> and length <var>5</var>, so the newly added snake’s head coordinate is <var>5</var>.  </li>\n<li>3rd query: Output the head coordinate of the snake that is 2nd from the front. Currently, the head coordinates of the snakes in order are <var>0, 5</var>, so output <var>5</var>.  </li>\n<li>4th query: A snake of length <var>3</var> is added to the queue. Before adding, the last snake has head coordinate <var>5</var> and length <var>7</var>, so the new snake’s head coordinate is <var>12</var>.  </li>\n<li>5th query: A snake of length <var>4</var> is added to the queue. Before adding, the last snake has head coordinate <var>12</var> and length <var>3</var>, so the new snake’s head coordinate is <var>15</var>.  </li>\n<li>6th query: The snake at the front leaves the queue. The length of the snake that left is <var>5</var>, so the head coordinate of each remaining snake decreases by <var>5</var>. The remaining snake’s head coordinate becomes <var>0, 7, 10</var>.  </li>\n<li>7th query: Output the head coordinate of the snake that is 3rd from the front. Currently, the head coordinates of the snakes in order are <var>0, 7, 10</var>, so output <var>10</var>.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 1\n2\n1 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre></pre>\n\n<p>It is possible that there are no queries of type <var>3</var>.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n1 15\n1 10\n1 5\n2\n1 5\n1 10\n1 15\n2\n3 4\n3 2\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>20\n5\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/abc389/tasks/abc389_c"}