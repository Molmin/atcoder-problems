{"html":{"ja":"<span class=\"lang-ja\">\n<p></p><details><summary>目次</summary><p></p>\n<ol>\n<li><a href=\"#problem-overview\">問題概要</a></li>\n<li><a href=\"#input1\">入力1</a><ol>\n<li><a href=\"#work-time-frame\">作業期間</a></li>\n<li><a href=\"#geo-data\">地理情報</a></li>\n<li><a href=\"#worker\">ワーカー</a></li>\n<li><a href=\"#job\">ジョブ</a></li>\n</ol>\n</li>\n<li><a href=\"#output1\">出力1</a></li>\n<li><a href=\"#input2\">入力2(採点)</a><ol>\n<li><a href=\"#scoring-method\">採点方法</a></li>\n</ol>\n</li>\n<li><a href=\"#testcase-generation-rules\">テストケース生成規則</a></li>\n<li><a href=\"#ranking-method\">順位決定方法</a></li>\n<li><a href=\"#constraints\">制約</a></li>\n<li><a href=\"#toolkit\">ツールキット</a></li>\n<li><a href=\"#visualizer\">ビジュアライザ</a>\n</li></ol></details>\n\n<p><a id=\"problem-overview\" class=\"anchor\"></a></p>\n\n<div class=\"part\">\n<section>\n<h3>問題概要</h3>\n<p>この問題では、農機シェアリングサービスにおいて、所有する機械や人員（単純化して、以下\"ワーカー\"とする）を最大限活用し、報酬*が最も多くなるように農作業（以下、\"ジョブ\"と呼ぶ）を\n処理することを考える。ワーカーに移動と作業の指示を出し、空間内に配置された数多く存在するジョブを処理していく。各ジョブは複数の小作業を表す\"タスク\"をワーカーが規定の量処理することで完了と見なされる。ジョブを完了することで報酬を獲得できるが、タスクを処理する時刻により報酬量は異なるため適切な作業時間帯を考慮して処理する必要がある。また、各時刻における実行可能なタスク数はワーカーの処理能力に依存する。</p>\n<p>*報酬：農作物の適切な収穫時期、ナノグリッドから農機に供給する再生可能エネルギーの利用率等を想定する。</p>\n<p style=\"text-align:center;display:flex;justify-content: center; width:100%;aspect-ratio: 2.5;\" id=\"overview-img\">\n\n<img src=\"https://img.atcoder.jp/hokudai-hitachi2022/ffbe45bdd4d63e56094c790802bb27a7.png\">\n\n<img src=\"https://img.atcoder.jp/hokudai-hitachi2022/caaea5d124ed03231537bc649de02f6f.png\">\n\n\n\n</p>\n\n<p>入力として最初に以下の情報が与えられる。</p>\n<ol>\n<li>作業期間</li>\n<li>地理情報（グラフ）</li>\n<li>ワーカーの情報</li>\n<li>全てのジョブの情報</li>\n</ol>\n<p>これに対しコンテスタントは</p>\n<ol>\n<li>作業期間内の全ての時刻におけるワーカーの行動</li>\n</ol>\n<p>を出力する。</p>\n<p>作業により得られた報酬の総和がスコアとなる。</p>\n<p>以下はその詳細である。</p>\n<p><a id=\"input1\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力1</h3>\n<p>最初に入力として</p>\n<ol>\n<li>作業期間</li>\n<li>地理情報（グラフ）</li>\n<li>ワーカーの情報</li>\n<li>全てのジョブの情報</li>\n</ol>\n<p>が以下の形式で標準入力から与えられる。</p>\n<div class=\"codehilite\"><pre><span></span><var>\nT_{\\rm{max}}\\\\\nN_V\\,\\,N_E\\\\\nu_1\\quad v_1\\quad d_1\\\\\n\\vdots\\\\\nu_{N_E}\\,\\, v_{N_E}\\,\\, d_{N_E}\\\\\nN_{\\rm{worker}}\\\\\nv^{\\rm{init}}_1\\,\\,L^\\text{max}_1\\,\\,N^{\\rm{JobType}}_1\\,\\,\\text{Type}^1_1\\,\\,\\text{Type}^1_2\\,\\,\\cdots \\text{Type}^1_{N^{\\rm{JobType}}_1}\\\\\n\\vdots\\\\\nv^{\\rm{init}}_{N_{\\rm{worker}}}\\,\\,L^\\text{max}_{N_{\\rm{worker}}}\\,\\,N^{\\rm{JobType}}_{N_{\\rm{worker}}}\\,\\,\\text{Type}^{N_{\\rm{worker}}}_1\\,\\,\\text{Type}^{N_{\\rm{worker}}}_2\\,\\,\\cdots \\text{Type}^{N_{\\rm{worker}}}_{N^{\\rm{JobType}}_1}\\\\\nN_{\\rm{job}}\\\\\n\\text{Job}_1\\\\\n\\vdots\\\\\n\\text{Job}_{N_{\\rm{job}}}</var>\n</pre></div>\n\n\n<p>(<var>\\text{Job}_i</var>の構成は後述)\n<a id=\"work-time-frame\" class=\"anchor\"></a></p>\n<h4>作業期間</h4>\n<ul>\n<li><strong>入力</strong><ul>\n<li>最初の<var>1</var>行目で作業期間の長さ<var>T_\\text{max}</var>が与えられる。</li>\n</ul>\n</li>\n</ul>\n<p>この問題における時刻<var>t</var>は <var>1</var> から <var>T_{\\text{max}}</var>までの整数の値をとる。\n</p><details><summary>入力例</summary>\n以下は <var>T_\\text{max}=300</var>の例:<p></p>\n<div class=\"codehilite\"><pre><span></span>300\n</pre></div>\n\n\n<p>(末尾に改行有)</p>\n<ul>\n<li>1行目:作業期間の長さは<code>300</code> である。(<var>T_\\text{max}=300</var>)\n</li></ul></details>\n<a id=\"geo-data\" class=\"anchor\"></a>\n\n<h4>地理情報</h4>\n<ul>\n<li><strong>入力</strong><ul>\n<li>次の<var>1</var>行で、問題の地理情報を表すグラフ(連結な正の重み付き無向グラフ)の頂点数<var>N_V</var>と辺の数<var>N_E</var>が与えられる。<ul>\n<li>この<var>N_V</var>個の頂点には<var>1</var>から順に<var>N_V</var>まで頂点番号が割り当てられるものとする。</li>\n</ul>\n</li>\n<li>続く<var>N_E</var>行で辺を表す情報: 端点<var>u_i,v_i</var>と重み(=距離)<var>d_i</var> が与えられる。(<var>1\\leq i \\leq N_E</var>)</li>\n</ul>\n</li>\n</ul>\n<p>後述するが、<a href=\"#job\">ジョブ</a>はこのグラフの頂点上に配置され、<a href=\"#worker\">ワーカー</a>はこのグラフの上を移動する。\n</p><details><summary>入力例</summary>\n以下は <var>N_V=14,N_E=19</var>の例:<p></p>\n<div class=\"codehilite\"><pre><span></span>14 19\n1 7 1\n1 2 1\n2 9 1\n2 3 1\n3 5 1\n3 7 1\n3 6 1\n4 13 2\n4 10 2\n4 6 1\n4 5 1\n6 8 1\n7 8 1\n8 14 2\n9 11 2\n10 12 2\n10 11 2\n12 13 2\n13 14 2\n</pre></div>\n\n\n<p>(末尾に改行有)</p>\n<ul>\n<li>1行目:グラフの頂点は<code>14</code>個存在し、辺は<code>19</code>個存在する。(<var>N_V=14,N_E=19</var>)<ul>\n<li>この<code>14</code>個の頂点には<var>1</var>から順に<code>14</code>まで頂点番号が割り当てられている。</li>\n<li>以下、頂点番号<var>i</var>に対応する頂点 を単に 頂点<var>i</var> と呼ぶ。</li>\n</ul>\n</li>\n<li>2行目:頂点<code>1</code>と頂点<code>7</code>の間に長さ<code>1</code>の辺が存在する。(<var>u_{1}=1,v_{1}=7,d_{1}=1</var>)</li>\n<li>3行目:頂点<code>1</code>と頂点<code>2</code>の間に長さ<code>1</code>の辺が存在する。(<var>u_{2}=1,v_{2}=2,d_{2}=1</var>)</li>\n<li>4行目:頂点<code>2</code>と頂点<code>9</code>の間に長さ<code>1</code>の辺が存在する。(<var>u_{3}=2,v_{3}=9,d_{3}=1</var>)</li>\n<li>5行目:頂点<code>2</code>と頂点<code>3</code>の間に長さ<code>1</code>の辺が存在する。(<var>u_{4}=2,v_{4}=3,d_{4}=1</var>)</li>\n<li>6行目:頂点<code>3</code>と頂点<code>5</code>の間に長さ<code>1</code>の辺が存在する。(<var>u_{5}=3,v_{5}=5,d_{5}=1</var>)</li>\n<li>7行目:頂点<code>3</code>と頂点<code>7</code>の間に長さ<code>1</code>の辺が存在する。(<var>u_{6}=3,v_{6}=7,d_{6}=1</var>)</li>\n<li>8行目:頂点<code>3</code>と頂点<code>6</code>の間に長さ<code>1</code>の辺が存在する。(<var>u_{7}=3,v_{7}=6,d_{7}=1</var>)</li>\n<li>9行目:頂点<code>4</code>と頂点<code>13</code>の間に長さ<code>2</code>の辺が存在する。(<var>u_{8}=4,v_{8}=13,d_{8}=2</var>)</li>\n<li>10行目:頂点<code>4</code>と頂点<code>10</code>の間に長さ<code>2</code>の辺が存在する。(<var>u_{9}=4,v_{9}=10,d_{9}=2</var>)</li>\n<li>11行目:頂点<code>4</code>と頂点<code>6</code>の間に長さ<code>1</code>の辺が存在する。(<var>u_{10}=4,v_{10}=6,d_{10}=1</var>)</li>\n<li>12行目:頂点<code>4</code>と頂点<code>5</code>の間に長さ<code>1</code>の辺が存在する。(<var>u_{11}=4,v_{11}=5,d_{11}=1</var>)</li>\n<li>13行目:頂点<code>6</code>と頂点<code>8</code>の間に長さ<code>1</code>の辺が存在する。(<var>u_{12}=6,v_{12}=8,d_{12}=1</var>)</li>\n<li>14行目:頂点<code>7</code>と頂点<code>8</code>の間に長さ<code>1</code>の辺が存在する。(<var>u_{13}=7,v_{13}=8,d_{13}=1</var>)</li>\n<li>15行目:頂点<code>8</code>と頂点<code>14</code>の間に長さ<code>2</code>の辺が存在する。(<var>u_{14}=8,v_{14}=14,d_{14}=2</var>)</li>\n<li>16行目:頂点<code>9</code>と頂点<code>11</code>の間に長さ<code>2</code>の辺が存在する。(<var>u_{15}=9,v_{15}=11,d_{15}=2</var>)</li>\n<li>17行目:頂点<code>10</code>と頂点<code>12</code>の間に長さ<code>2</code>の辺が存在する。(<var>u_{16}=10,v_{16}=12,d_{16}=2</var>)</li>\n<li>18行目:頂点<code>10</code>と頂点<code>11</code>の間に長さ<code>2</code>の辺が存在する。(<var>u_{17}=10,v_{17}=11,d_{17}=2</var>)</li>\n<li>19行目:頂点<code>12</code>と頂点<code>13</code>の間に長さ<code>2</code>の辺が存在する。(<var>u_{18}=12,v_{18}=13,d_{18}=2</var>)</li>\n<li>20(<var>=1+N_E</var>)行目:頂点<code>13</code>と頂点<code>14</code>の間に長さ<code>2</code>の辺が存在する。(<var>u_{19}=13,v_{19}=14,d_{19}=2</var>)\n</li></ul></details>\n<a id=\"worker\" class=\"anchor\"></a>\n\n<h4>ワーカー</h4>\n<p>ワーカーはジョブを処理する存在であり、移動とタスクの実行が可能である。これはコンテスタントの入力により操作される。(<a href=\"#worker-action\">ワーカーの行動</a>を参照)</p>\n<ul>\n<li><strong>入力</strong><ul>\n<li>続く<var>1</var>行でワーカーの数<var>N_{\\text{worker}}</var>が与えられる。</li>\n<li><p>\n次の<var>N_{\\text{worker}}</var>行で各ワーカーの構成情報:\n</p><ul>\n<li>初期位置(頂点番号): <var>v^{\\text{init}}_i</var></li>\n<li>単位時間に実行可能なタスク数の上限: <var>L^{\\text{max}}_i</var></li>\n<li>実行可能なジョブのタイプ数 <var>N^{\\text{JobType}}_i</var> と タイプの列 <var>\\text{Type}^i_1\\,\\,\\text{Type}^i_2\\,\\,\\cdots\\,\\,\\text{Type}^i_{N^{\\text{JobType}}_i}</var></li>\n</ul>\nが与えられる。(<var>1\\leq i \\leq N_{\\text{worker}}</var>)\n<p></p></li>\n</ul>\n</li>\n</ul>\n<p>この入力における順序はワーカーのIDに対応する。</p>\n<p>ワーカーごとに、単位時間に実行可能なタスク数の上限 や 処理できるジョブのタイプは異なる。\n</p><details><summary>入力例</summary>\n以下は <var>N_{\\text{worker}}=5</var> の例:<p></p>\n<div class=\"codehilite\"><pre><span></span>5\n6 100 3 1 2 3\n13 59 1 3\n10 55 2 2 3\n9 47 3 1 2 3\n9 89 1 2\n</pre></div>\n\n\n<p>(末尾に改行有)</p>\n<ul>\n<li>1行目:ワーカーの数は<code>5</code>である。(<var>N_{\\text{worker}}=5</var>)</li>\n<li>2行目:ID=1であるワーカーの記述。<ul>\n<li>初期位置は頂点番号<code>6</code>に対応する頂点である。(<var>v^{\\text{init}}_1=6</var>)</li>\n<li>単位時間あたりに実行可能なタスク数の上限は<code>100</code>である。(<var>L^{\\text{max}}_1=100</var>)</li>\n<li>実行可能なジョブのタイプは<code>3</code>つあり(<var>N^{\\text{JobType}}_1=3</var>)、それらは<code>1</code>と<code>2</code>と<code>3</code>である。(<var>\\text{Type}^1_1=1,\\text{Type}^1_2=2,\\text{Type}^1_3=3</var>)</li>\n</ul>\n</li>\n<li>3行目:ID=2であるワーカーの記述。<ul>\n<li>初期位置は頂点番号<code>13</code>に対応する頂点である。(<var>v^{\\text{init}}_2=13</var>)</li>\n<li>単位時間あたりに実行可能なタスク数の上限は<code>59</code>である。(<var>L^{\\text{max}}_2=59</var>)</li>\n<li>実行可能なジョブのタイプは<code>1</code>つあり(<var>N^{\\text{JobType}}_2=1</var>)、それは<code>3</code>である。(<var>\\text{Type}^2_1=3</var>)</li>\n</ul>\n</li>\n<li>4行目:ID=3であるワーカーの記述。<ul>\n<li>初期位置は頂点番号<code>10</code>に対応する頂点である。(<var>v^{\\text{init}}_3=10</var>)</li>\n<li>単位時間あたりに実行可能なタスク数の上限は<code>55</code>である。(<var>L^{\\text{max}}_3=55</var>)</li>\n<li>実行可能なジョブのタイプは<code>2</code>つあり(<var>N^{\\text{JobType}}_3=2</var>)、それらは<code>2</code>と<code>3</code>である。(<var>\\text{Type}^3_1=2,\\text{Type}^3_2=3</var>)</li>\n</ul>\n</li>\n<li>5行目:ID=4であるワーカーの記述。<ul>\n<li>初期位置は頂点番号<code>9</code>に対応する頂点である。(<var>v^{\\text{init}}_4=9</var>)</li>\n<li>単位時間あたりに実行可能なタスク数の上限は<code>47</code>である。(<var>L^{\\text{max}}_4=47</var>)</li>\n<li>実行可能なジョブのタイプは<code>3</code>つあり(<var>N^{\\text{JobType}}_4=3</var>)、それらは<code>1</code>と<code>2</code>と<code>3</code>である。(<var>\\text{Type}^4_1=1,\\text{Type}^4_2=2,\\text{Type}^4_3=3</var>)</li>\n</ul>\n</li>\n<li>6(<var>=1+N_{\\text{worker}}</var>)行目:ID=5であるワーカーの記述。<ul>\n<li>初期位置は頂点番号<code>9</code>に対応する頂点である。(<var>v^{\\text{init}}_5=9</var>)</li>\n<li>単位時間あたりに実行可能なタスク数の上限は<code>89</code>である。(<var>L^{\\text{max}}_5=89</var>)</li>\n<li>実行可能なジョブのタイプは<code>1</code>つあり(<var>N^{\\text{JobType}}_5=1</var>)、それは<code>2</code>である。(<var>\\text{Type}^5_1=2</var>)\n</li></ul></li></ul></details>\n<a id=\"job\" class=\"anchor\"></a>\n\n\n\n<h4>ジョブ</h4>\n<p>ジョブは頂点上でワーカーが実行する仕事である。</p>\n<ul>\n<li><strong>ジョブとは</strong><ul>\n<li><strong>ジョブ</strong>は現実における作業の1つの単位に相当し、例えば作物の収穫や農薬の散布等である。</li>\n<li>これらはより小さな単位の複数作業から構成される。例えば、果実1つを摘み取る、稲を一定面積刈り取る、農薬を一定面積に撒く、といったものである。このようにジョブを構成する小さな単位の作業をここでは<strong>タスク</strong>と呼ぶことにする。</li>\n<li>ジョブを構成するタスクが全て一定量行われることでそのジョブは完了すると考える。</li>\n<li>現実的にはジョブは複数種類のタスクから構成されるかもしれないが、今回は単純化しタスクをこなす量だけに着目する。すなわち、<strong>タスクを規定の量処理することでジョブが完了したとみなす</strong>ことにする。</li>\n<li>ジョブが行われる場所はそのジョブ毎に異なる。この問題ではそれを<a href=\"#geo-data\">地理情報</a>として与えられた<strong>グラフの頂点上にジョブを配置</strong>することで表現する。</li>\n</ul>\n</li>\n<li><strong>タスクの処理と報酬</strong><ul>\n<li>各ジョブのタスクを処理するものとして<strong><a href=\"#worker\">ワーカー</a></strong>が存在する。</li>\n<li>コンテスタントは各ワーカーに<strong>移動</strong>や<strong>作業</strong>の指示を出し、ジョブが存在する頂点に移動させタスクを処理する。</li>\n<li>コンテスタントは<strong>ジョブを<font color=\"#DC143C\">完了する(=タスクを規定の量処理する)</font>ことで報酬を得る</strong>。</li>\n<li>ワーカーは単位時間あたりに処理できるタスク量に上限(<a href=\"#worker\"><var>L^{\\text{max}}</var></a>)があり、ジョブを完了するにはある程度時間がかかる。典型的には、ある時刻から一定時間、毎時刻タスクを一定量処理することになる。</li>\n<li><strong>ジョブ完了時に得られる報酬はタスクを処理した時刻によって異なる</strong>。具体的には:<p style=\"text-align:center;\">各時刻におけるタスク処理量あたりの報酬量<var>r(t)</var> <var>\\times</var> その時刻に処理されたタスク量</p>の時間に関する総和(<var>t=1,2,\\cdots,T_\\text{max}</var>)である。</li>\n<li>各時刻におけるタスク処理量あたりの報酬量<var>r(t)</var>は<strong>ジョブ毎にも異なる。</strong></li>\n<li>全ワーカーが集めた報酬の総和がこの問題のスコアを構成する中心的な要素である。(<a href=\"#scoring-method\">採点方法</a>) コンテスタントはこの報酬の総和が大きくなるようにワーカーの行動を決定する。</li>\n</ul>\n</li>\n<li><strong>ジョブ間の依存関係</strong><ul>\n<li>ジョブは他のジョブに依存する場合がある。すなわち、そのジョブが依存するジョブが全て完了していなければそのジョブのタスクを処理することができないという制限がある。</li>\n<li>依存するジョブが存在しない場合このような制限は無い。</li>\n</ul>\n</li>\n</ul>\n<p></p><details open=\"\"><summary>各種制限</summary>\n<ul>\n<li>報酬が獲得できない時刻(タスク処理量あたりの報酬量 = 0 である時刻)にはタスクを処理することができない。</li>\n</ul></details>\n<br>\n<br><p></p>\n<ul>\n<li><strong>入力</strong><ul>\n<li>続く<var>1</var>行でジョブの数<var>N_{\\text{job}}</var>が与えられる。</li>\n<li>次の行からジョブの構成情報<var>\\text{Job}_i</var>が<var>N_{\\text{job}}</var>個与えられる。(合計<var>N_{\\text{job}}\\times 3</var>行)</li>\n</ul>\n</li>\n</ul>\n<p>ジョブの構成情報<var>\\text{Job}_i</var>は次の形式で与えられる。</p>\n<div class=\"codehilite\"><pre><span></span><var>\n\\text{ID}^{\\rm{job}}_i\\,\\,\\text{Type}_i\\,\\,N^{\\rm{task}}_i\\,\\,v^{\\rm{job}}_i\\\\\nN^{\\rm{reward}}_i\\,\\, t^{\\rm{reward}}_{i,1}\\,\\, y^{\\rm{reward}}_{i,1}\\cdots t^{\\rm{reward}}_{i,N^{\\rm{reward}}_i}\\,\\, y^{\\rm{reward}}_{i,N^{\\rm{reward}}_i}\\\\\nN^{\\rm{depend}}_i\\,\\, {\\rm{id}}^{\\rm{depend}}_{i,1}\\,\\, \\cdots \\,\\,{\\rm{id}}^{\\rm{depend}}_{i,N^{\\rm{depend}}_i}</var>\n</pre></div>\n\n\n<ul>\n<li>1行目<ul>\n<li>ジョブID: <var>\\text{ID}^{\\text{job}}_i</var></li>\n<li>ジョブタイプ: <var>\\text{Type}_i</var></li>\n<li>完了までのタスク数: <var>N^{\\text{task}}_i</var></li>\n<li>ジョブの位置(頂点番号): <var>v^{\\text{job}}_i</var></li>\n</ul>\n</li>\n<li>2行目(報酬関数<var>r(t)</var>の定義)<ul>\n<li>報酬関数の制御点個数:<var>N^{\\text{reward}}_i</var></li>\n<li>制御点の列:<var>t^{\\rm{reward}}_{i,1}\\,\\,y^{\\rm{reward}}_{i,1}\\,\\,t^{\\rm{reward}}_{i,2}\\,\\,y^{\\rm{reward}}_{i,2}\\,\\,\\cdots\\,\\,t^{\\rm{reward}}_{i,N^{\\text{reward}}_i}\\,\\,y^{\\rm{reward}}_{i,N^{\\text{reward}}_i}</var></li>\n</ul>\n</li>\n<li>3行目(依存するジョブ)<ul>\n<li>依存するジョブの数: <var>N^{\\text{depend}}_i</var></li>\n<li>依存するジョブID: <var>{\\rm{id}}^{\\rm{depend}}_{i,1}\\,\\,{\\rm{id}}^{\\rm{depend}}_{i,2}\\,\\, \\cdots \\,\\,{\\rm{id}}^{\\rm{depend}}_{i,N^{\\rm{depend}}_i}</var></li>\n</ul>\n</li>\n</ul>\n<p></p><details><summary>報酬関数<var>r(t)</var>の詳細</summary>\n時刻<var>t</var>におけるタスク当たりの報酬を与える関数<var>r(t)</var>は、1個以上の制御点(時刻と値のペア)とそれらの間の線形補間で定める。<p></p>\n<p>すなわち、制御点の列<var>p=((t_i,y_i))_{i=1,\\cdots,n}</var>  (<var>t_i,y_i\\in \\mathbb{Z},t_1 &lt; t_2 &lt; \\cdots &lt; t_n,n\\geq 1</var>)が与えられたとき、時刻<var>t</var>におけるタスク当たりの報酬を与える関数<var>r(t)</var> (正確には<var>r(t;p)</var>)を</p>\n<p></p><p><var>\nr(t)=\\begin{cases}\ny_1, &amp; \\text{if}\\,\\, t &lt; t_1, \\\\\ny_n, &amp; \\text{if}\\,\\, t \\geq t_n, \\\\\n(y_\\text{next}-y_\\text{prev})(t-t_\\text{prev})/(t_\\text{next}-t_\\text{prev})+y_\\text{prev}, &amp; \\text{otherwise}.\n\\end{cases}</var></p>\nと定める。<p></p>\n<p>ただし、<var>(t_\\text{prev},y_\\text{prev})</var>は時刻に関して<var>t</var>を超えない最大のペア、<var>(t_\\text{next},y_\\text{next})</var>は時刻に関して<var>t</var>を超える最小のペアである。</p>\n<p><var>r(t)</var>（と<var>r(t)</var>の整数倍、およびそれらの和）は小数で計算される。</p>\n<p></p></details><p></p>\n<p></p><details><summary>入力例</summary>\n以下は <var>N_{\\text{job}}=7</var>の例(これはジョブの数が極端に少ない例であることに注意):<p></p>\n<div class=\"codehilite\"><pre><span></span>7\n1 2 625 8\n15 1 0 2 1581724 4 1733369 6 1561173 8 1596919 10 1090320 12 1031662 14 929778 16 1095326 18 665006 20 757205 22 567001 24 600233 26 576475 27 0\n0\n2 3 993 14\n15 2 0 3 1147309 5 1186255 7 1098060 9 836498 11 872163 13 1071865 15 1408708 17 2135395 19 1517111 21 1079036 23 740032 25 904947 27 976790 28 0\n1 1\n3 2 1310 14\n15 2 0 3 992842 5 818304 7 676647 9 859283 11 871992 13 859663 15 1776296 17 3025691 19 1304819 21 1606358 23 3469915 25 2801513 27 3046487 28 0\n2 2 1\n4 2 1356 13\n15 3 0 4 2016014 6 2138183 8 1711305 10 2020927 12 2030686 14 1203758 16 973133 18 1102291 20 954221 22 725869 24 700613 26 604824 28 742452 29 0\n0\n5 1 1225 10\n15 5 0 6 1256998 8 1096984 10 820728 12 818626 14 1089776 16 1014615 18 1062766 20 900374 22 1190773 24 1050656 26 1876847 28 1530806 30 952050 31 0\n1 4\n6 3 1362 7\n15 0 0 1 608492 3 960135 5 961858 7 998014 9 1101543 11 1288452 13 1825126 15 1145645 17 1057616 19 1312087 21 991237 23 1123573 25 882743 26 0\n2 7 5\n7 1 1307 1\n15 5 0 6 299791 8 303708 10 533803 12 879014 14 828842 16 946449 18 991630 20 1551550 22 1499622 24 1793967 26 1425447 28 1732069 30 1207139 31 0\n0\n</pre></div>\n\n\n<ul>\n<li>1行目:全ジョブの数は<code>7</code>である。(<var>N_{\\text{job}}=7</var>)<ul>\n<li>実際の問題では数百以上のジョブが与えられる。</li>\n</ul>\n</li>\n<li>2行目:ジョブID=1の記述開始。<ul>\n<li>ジョブIDは<code>1</code>である。(<var>\\text{ID}^{\\text{job}}_1=1</var>)</li>\n<li>このジョブのタイプは<code>2</code>である。(<var>\\text{Type}_1=2</var>)</li>\n<li>このジョブの完了に必要なタスク数は<code>625</code>である。(<var>N^{\\text{task}}_1=625</var>)</li>\n<li>このジョブは頂点<code>8</code>上に存在する。(<var>v^{\\text{job}}_1=8</var>)</li>\n</ul>\n</li>\n<li>3行目:ジョブID=1の報酬を表す関数の記述<ul>\n<li>制御点個数は<code>15</code>個である。(<var>N^{\\text{reward}}_1=15</var>)</li>\n<li>制御点の列は((<code>1</code>,<code>0</code>), (<code>2</code>,<code>1581724</code>), (<code>4</code>,<code>1733369</code>), (<code>6</code>,<code>1561173</code>), (<code>8</code>,<code>1596919</code>), (<code>10</code>,<code>1090320</code>), (<code>12</code>,<code>1031662</code>), (<code>14</code>,<code>929778</code>), (<code>16</code>,<code>1095326</code>), (<code>18</code>,<code>665006</code>), (<code>20</code>,<code>757205</code>), (<code>22</code>,<code>567001</code>), (<code>24</code>,<code>600233</code>), (<code>26</code>,<code>576475</code>), (<code>27</code>,<code>0</code>))である。<ul>\n<li>報酬が得られる時刻は<var>2,3,\\cdots,26</var>である。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>4行目:ジョブID=1が依存するジョブ。ジョブID=1の記述終了。<ul>\n<li>このジョブが依存するジョブの数は<code>0</code>個である。(<var>N^{\\text{depend}}_1=0</var>)</li>\n<li>(依存するジョブの数が<code>0</code>なので依存するジョブIDは存在しない。)</li>\n</ul>\n</li>\n<li>5行目:ジョブID=2の記述開始。<ul>\n<li>ジョブIDは<code>2</code>である。(<var>\\text{ID}^{\\text{job}}_2=2</var>)</li>\n<li>このジョブのタイプは<code>3</code>である。(<var>\\text{Type}_2=3</var>)</li>\n<li>このジョブの完了に必要なタスク数は<code>993</code>である。(<var>N^{\\text{task}}_2=993</var>)</li>\n<li>このジョブは頂点<code>14</code>上に存在する。(<var>v^{\\text{job}}_2=14</var>)</li>\n</ul>\n</li>\n<li>6行目:ジョブID=2の報酬を表す関数の記述<ul>\n<li>制御点個数は<code>15</code>個である。(<var>N^{\\text{reward}}_2=15</var>)</li>\n<li>制御点の列は((<code>2</code>,<code>0</code>), (<code>3</code>,<code>1147309</code>), (<code>5</code>,<code>1186255</code>), (<code>7</code>,<code>1098060</code>), (<code>9</code>,<code>836498</code>), (<code>11</code>,<code>872163</code>), (<code>13</code>,<code>1071865</code>), (<code>15</code>,<code>1408708</code>), (<code>17</code>,<code>2135395</code>), (<code>19</code>,<code>1517111</code>), (<code>21</code>,<code>1079036</code>), (<code>23</code>,<code>740032</code>), (<code>25</code>,<code>904947</code>), (<code>27</code>,<code>976790</code>), (<code>28</code>,<code>0</code>))である。<ul>\n<li>報酬が得られる時刻は<var>3,4,\\cdots,27</var>である。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>7行目:ジョブID=2が依存するジョブ。ジョブID=2の記述終了。<ul>\n<li>このジョブが依存するジョブの数は<code>1</code>個である。(<var>N^{\\text{depend}}_2=1</var>)</li>\n<li>このジョブはID=<code>1</code>のジョブに依存する。(<var>\\text{id}^\\text{depend}_{2,1}=1</var>)</li>\n</ul>\n</li>\n<li>8行目:ジョブID=3の記述開始。<ul>\n<li>ジョブIDは<code>3</code>である。(<var>\\text{ID}^{\\text{job}}_3=3</var>)</li>\n<li>このジョブのタイプは<code>2</code>である。(<var>\\text{Type}_3=2</var>)</li>\n<li>このジョブの完了に必要なタスク数は<code>1310</code>である。(<var>N^{\\text{task}}_3=1310</var>)</li>\n<li>このジョブは頂点<code>14</code>上に存在する。(<var>v^{\\text{job}}_3=14</var>)</li>\n</ul>\n</li>\n<li>9行目:ジョブID=3の報酬を表す関数の記述<ul>\n<li>制御点個数は<code>15</code>個である。(<var>N^{\\text{reward}}_3=15</var>)</li>\n<li>制御点の列は((<code>2</code>,<code>0</code>), (<code>3</code>,<code>992842</code>), (<code>5</code>,<code>818304</code>), (<code>7</code>,<code>676647</code>), (<code>9</code>,<code>859283</code>), (<code>11</code>,<code>871992</code>), (<code>13</code>,<code>859663</code>), (<code>15</code>,<code>1776296</code>), (<code>17</code>,<code>3025691</code>), (<code>19</code>,<code>1304819</code>), (<code>21</code>,<code>1606358</code>), (<code>23</code>,<code>3469915</code>), (<code>25</code>,<code>2801513</code>), (<code>27</code>,<code>3046487</code>), (<code>28</code>,<code>0</code>))である。<ul>\n<li>報酬が得られる時刻は<var>3,4,\\cdots,27</var>である。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>10行目:ジョブID=3が依存するジョブ。ジョブID=3の記述終了。<ul>\n<li>このジョブが依存するジョブの数は<code>2</code>個である。(<var>N^{\\text{depend}}_3=2</var>)</li>\n<li>このジョブはID=<code>2</code>,<code>1</code>のジョブ全てに依存する。(<var>\\text{id}^\\text{depend}_{3,1}=2,\\text{id}^\\text{depend}_{3,2}=1</var>)</li>\n</ul>\n</li>\n<li>11行目:ジョブID=4の記述開始。<ul>\n<li>ジョブIDは<code>4</code>である。(<var>\\text{ID}^{\\text{job}}_4=4</var>)</li>\n<li>このジョブのタイプは<code>2</code>である。(<var>\\text{Type}_4=2</var>)</li>\n<li>このジョブの完了に必要なタスク数は<code>1356</code>である。(<var>N^{\\text{task}}_4=1356</var>)</li>\n<li>このジョブは頂点<code>13</code>上に存在する。(<var>v^{\\text{job}}_4=13</var>)</li>\n</ul>\n</li>\n<li>12行目:ジョブID=4の報酬を表す関数の記述<ul>\n<li>制御点個数は<code>15</code>個である。(<var>N^{\\text{reward}}_4=15</var>)</li>\n<li>制御点の列は((<code>3</code>,<code>0</code>), (<code>4</code>,<code>2016014</code>), (<code>6</code>,<code>2138183</code>), (<code>8</code>,<code>1711305</code>), (<code>10</code>,<code>2020927</code>), (<code>12</code>,<code>2030686</code>), (<code>14</code>,<code>1203758</code>), (<code>16</code>,<code>973133</code>), (<code>18</code>,<code>1102291</code>), (<code>20</code>,<code>954221</code>), (<code>22</code>,<code>725869</code>), (<code>24</code>,<code>700613</code>), (<code>26</code>,<code>604824</code>), (<code>28</code>,<code>742452</code>), (<code>29</code>,<code>0</code>))である。<ul>\n<li>報酬が得られる時刻は<var>4,5,\\cdots,28</var>である。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>13行目:ジョブID=4が依存するジョブ。ジョブID=4の記述終了。<ul>\n<li>このジョブが依存するジョブの数は<code>0</code>個である。(<var>N^{\\text{depend}}_4=0</var>)</li>\n<li>(依存するジョブの数が<code>0</code>なので依存するジョブIDは存在しない。)</li>\n</ul>\n</li>\n<li>14行目:ジョブID=5の記述開始。<ul>\n<li>ジョブIDは<code>5</code>である。(<var>\\text{ID}^{\\text{job}}_5=5</var>)</li>\n<li>このジョブのタイプは<code>1</code>である。(<var>\\text{Type}_5=1</var>)</li>\n<li>このジョブの完了に必要なタスク数は<code>1225</code>である。(<var>N^{\\text{task}}_5=1225</var>)</li>\n<li>このジョブは頂点<code>10</code>上に存在する。(<var>v^{\\text{job}}_5=10</var>)</li>\n</ul>\n</li>\n<li>15行目:ジョブID=5の報酬を表す関数の記述<ul>\n<li>制御点個数は<code>15</code>個である。(<var>N^{\\text{reward}}_5=15</var>)</li>\n<li>制御点の列は((<code>5</code>,<code>0</code>), (<code>6</code>,<code>1256998</code>), (<code>8</code>,<code>1096984</code>), (<code>10</code>,<code>820728</code>), (<code>12</code>,<code>818626</code>), (<code>14</code>,<code>1089776</code>), (<code>16</code>,<code>1014615</code>), (<code>18</code>,<code>1062766</code>), (<code>20</code>,<code>900374</code>), (<code>22</code>,<code>1190773</code>), (<code>24</code>,<code>1050656</code>), (<code>26</code>,<code>1876847</code>), (<code>28</code>,<code>1530806</code>), (<code>30</code>,<code>952050</code>), (<code>31</code>,<code>0</code>))である。<ul>\n<li>報酬が得られる時刻は<var>6,7,\\cdots,30</var>である。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>16行目:ジョブID=5が依存するジョブ。ジョブID=5の記述終了。<ul>\n<li>このジョブが依存するジョブの数は<code>1</code>個である。(<var>N^{\\text{depend}}_5=1</var>)</li>\n<li>このジョブはID=<code>4</code>のジョブに依存する。(<var>\\text{id}^\\text{depend}_{5,1}=4</var>)</li>\n</ul>\n</li>\n<li>17行目:ジョブID=6の記述開始。<ul>\n<li>ジョブIDは<code>6</code>である。(<var>\\text{ID}^{\\text{job}}_6=6</var>)</li>\n<li>このジョブのタイプは<code>3</code>である。(<var>\\text{Type}_6=3</var>)</li>\n<li>このジョブの完了に必要なタスク数は<code>1362</code>である。(<var>N^{\\text{task}}_6=1362</var>)</li>\n<li>このジョブは頂点<code>7</code>上に存在する。(<var>v^{\\text{job}}_6=7</var>)</li>\n</ul>\n</li>\n<li>18行目:ジョブID=6の報酬を表す関数の記述<ul>\n<li>制御点個数は<code>15</code>個である。(<var>N^{\\text{reward}}_6=15</var>)</li>\n<li>制御点の列は((<code>0</code>,<code>0</code>), (<code>1</code>,<code>608492</code>), (<code>3</code>,<code>960135</code>), (<code>5</code>,<code>961858</code>), (<code>7</code>,<code>998014</code>), (<code>9</code>,<code>1101543</code>), (<code>11</code>,<code>1288452</code>), (<code>13</code>,<code>1825126</code>), (<code>15</code>,<code>1145645</code>), (<code>17</code>,<code>1057616</code>), (<code>19</code>,<code>1312087</code>), (<code>21</code>,<code>991237</code>), (<code>23</code>,<code>1123573</code>), (<code>25</code>,<code>882743</code>), (<code>26</code>,<code>0</code>))である。<ul>\n<li>報酬が得られる時刻は<var>1,2,\\cdots,25</var>である。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>19行目:ジョブID=6が依存するジョブ。ジョブID=6の記述終了。<ul>\n<li>このジョブが依存するジョブの数は<code>2</code>個である。(<var>N^{\\text{depend}}_6=2</var>)</li>\n<li>このジョブはID=<code>7</code>,<code>5</code>のジョブ全てに依存する。(<var>\\text{id}^\\text{depend}_{6,1}=7,\\text{id}^\\text{depend}_{6,2}=5</var>)</li>\n</ul>\n</li>\n<li>20行目:ジョブID=7の記述開始。<ul>\n<li>ジョブIDは<code>7</code>である。(<var>\\text{ID}^{\\text{job}}_7=7</var>)</li>\n<li>このジョブのタイプは<code>1</code>である。(<var>\\text{Type}_7=1</var>)</li>\n<li>このジョブの完了に必要なタスク数は<code>1307</code>である。(<var>N^{\\text{task}}_7=1307</var>)</li>\n<li>このジョブは頂点<code>1</code>上に存在する。(<var>v^{\\text{job}}_7=1</var>)</li>\n</ul>\n</li>\n<li>21行目:ジョブID=7の報酬を表す関数の記述<ul>\n<li>制御点個数は<code>15</code>個である。(<var>N^{\\text{reward}}_7=15</var>)</li>\n<li>制御点の列は((<code>5</code>,<code>0</code>), (<code>6</code>,<code>299791</code>), (<code>8</code>,<code>303708</code>), (<code>10</code>,<code>533803</code>), (<code>12</code>,<code>879014</code>), (<code>14</code>,<code>828842</code>), (<code>16</code>,<code>946449</code>), (<code>18</code>,<code>991630</code>), (<code>20</code>,<code>1551550</code>), (<code>22</code>,<code>1499622</code>), (<code>24</code>,<code>1793967</code>), (<code>26</code>,<code>1425447</code>), (<code>28</code>,<code>1732069</code>), (<code>30</code>,<code>1207139</code>), (<code>31</code>,<code>0</code>))である。<ul>\n<li>報酬が得られる時刻は<var>6,7,\\cdots,30</var>である。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>22(<var>=1+3\\times N_{\\text{job}}</var>)行目:ジョブID=7が依存するジョブ。ジョブID=7の記述終了。<ul>\n<li>このジョブが依存するジョブの数は<code>0</code>個である。(<var>N^{\\text{depend}}_7=0</var>)</li>\n<li>(依存するジョブの数が<code>0</code>なので依存するジョブIDは存在しない。)\n</li></ul></li></ul></details>\n\n\n\n<p></p><details><summary>入力1全体の例</summary><p></p>\n<div class=\"codehilite\"><pre><span></span>300\n14 19\n1 7 1\n1 2 1\n2 9 1\n2 3 1\n3 5 1\n3 7 1\n3 6 1\n4 13 2\n4 10 2\n4 6 1\n4 5 1\n6 8 1\n7 8 1\n8 14 2\n9 11 2\n10 12 2\n10 11 2\n12 13 2\n13 14 2\n5\n6 100 3 1 2 3\n13 59 1 3\n10 55 2 2 3\n9 47 3 1 2 3\n9 89 1 2\n7\n1 2 625 8\n15 1 0 2 1581724 4 1733369 6 1561173 8 1596919 10 1090320 12 1031662 14 929778 16 1095326 18 665006 20 757205 22 567001 24 600233 26 576475 27 0\n0\n2 3 993 14\n15 2 0 3 1147309 5 1186255 7 1098060 9 836498 11 872163 13 1071865 15 1408708 17 2135395 19 1517111 21 1079036 23 740032 25 904947 27 976790 28 0\n1 1\n3 2 1310 14\n15 2 0 3 992842 5 818304 7 676647 9 859283 11 871992 13 859663 15 1776296 17 3025691 19 1304819 21 1606358 23 3469915 25 2801513 27 3046487 28 0\n2 2 1\n4 2 1356 13\n15 3 0 4 2016014 6 2138183 8 1711305 10 2020927 12 2030686 14 1203758 16 973133 18 1102291 20 954221 22 725869 24 700613 26 604824 28 742452 29 0\n0\n5 1 1225 10\n15 5 0 6 1256998 8 1096984 10 820728 12 818626 14 1089776 16 1014615 18 1062766 20 900374 22 1190773 24 1050656 26 1876847 28 1530806 30 952050 31 0\n1 4\n6 3 1362 7\n15 0 0 1 608492 3 960135 5 961858 7 998014 9 1101543 11 1288452 13 1825126 15 1145645 17 1057616 19 1312087 21 991237 23 1123573 25 882743 26 0\n2 7 5\n7 1 1307 1\n15 5 0 6 299791 8 303708 10 533803 12 879014 14 828842 16 946449 18 991630 20 1551550 22 1499622 24 1793967 26 1425447 28 1732069 30 1207139 31 0\n0\n</pre></div>\n\n\n<ul>\n<li>1行目:<a href=\"#work-time-frame\">作業期間</a>参照</li>\n<li>2-21行目:<a href=\"#geo-data\">地理情報</a>参照</li>\n<li>22-27行目:<a href=\"#worker\">ワーカー</a>参照</li>\n<li>28-49行目:<a href=\"#job\">ジョブ</a>参照\n</li></ul></details>\n\n<p><a id=\"output1\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力1</h3>\n<p>これらの情報が与えられた後、コンテスタントは毎時刻における全ワーカーの行動を以下の形式で出力する:</p>\n<div class=\"codehilite\"><pre><span></span><var>\n\\text{Actions}_1\\\\\n\\vdots\\\\\n\\text{Actions}_{T_\\text{max}}\n</var>\n</pre></div>\n\n\n<p>(末尾に改行を挿入すること)</p>\n<p>ただし、<var>\\text{Actions}_i</var>は時刻<var>i</var>における全ワーカーの行動であり、\n時刻<var>i</var>におけるワーカー<var>j</var>の行動を<var>\\text{action}^i_j</var>とすると以下のように表される。</p>\n<div class=\"codehilite\"><pre><span></span><var>\n\\text{action}^i_1\\\\\n\\text{action}^i_2\\\\\n\\vdots\\\\\n\\text{action}^i_{N_{\\text{worker}}}\n</var>\n</pre></div>\n\n\n<p><a id=\"worker-action\" class=\"anchor\"></a></p>\n<h4>ワーカーの行動</h4>\n<p>コンテスタントは毎時刻における全てのワーカーの行動<var>\\text{action}</var>を指定する。<var>\\text{action}</var>の実体は文字列であり、以下の3種類のいずれかである。</p>\n<ul>\n<li><code>stay</code>:移動もジョブ実行もせずその場にとどまる。</li>\n<li><code>move w</code>:現在位置から頂点番号<code>w</code>に対応する頂点の方向にその間の最短経路上を距離<var>1</var>だけ進む。以下の条件を満たさない場合<code>WA</code>(Wrong Answer)となる。<ul>\n<li>頂点番号<code>w</code>に対応する頂点は存在する。</li>\n<li>現在位置と頂点番号<code>w</code>に対応する頂点は異なる。</li>\n</ul>\n</li>\n<li><code>execute i a</code>:ID=<code>i</code>のジョブをタスク数<code>a</code>だけ実行する。ただし、以下の条件を満たさない場合<code>WA</code>(Wrong Answer)となる。<ul>\n<li>ワーカーの現在位置とID=<code>i</code>であるジョブが存在する頂点が一致する。</li>\n<li>ID=<code>i</code>のジョブのタイプは、このワーカーの実行可能ジョブタイプに含まれる。</li>\n<li><code>a</code>は1以上の整数。</li>\n<li><code>a</code>はID=<code>i</code>のジョブの残タスク数を超えない。</li>\n<li><code>a</code>はこのワーカーの実行タスク数上限<var>L^\\text{max}_i</var>を超えない。</li>\n<li>ID=<code>i</code>のジョブが依存するジョブは全て完了している。</li>\n<li>報酬の値は正である。</li>\n</ul>\n</li>\n</ul>\n<p><code>move w</code>に関して、現在位置と頂点<code>w</code>の間に2つ以上の異なる最短経路が存在する場合どれが選ばれるかは未規定である。そのような場合でも、コンテスタントは経路の途中の点を指定して移動する操作を繰り返すことで希望の経路を選ぶことができる。</p>\n<p>上記のいずれの文字列パターンにも合致しない<var>\\text{action}</var>が指定された場合<code>WA</code>(Wrong Answer)となる。</p>\n<p>また、各時刻終了時に、合計タスク処理量 が 完了までのタスク数 <var>N^{\\text{task}}_i</var> を超えるようなジョブが存在する場合 <code>WA</code> または <code>RE</code> となる。</p>\n<ul>\n<li><strong>出力</strong><ul>\n<li>次の<var>N_\\text{worker}\\times T_\\text{max}</var>行で各ワーカーの行動<var>\\text{action}^i_j</var>を出力する。(<var>1 \\leq i \\leq T_\\text{max},\\,\\, 1 \\leq j \\leq N_\\text{worker}</var>)</li>\n</ul>\n</li>\n</ul>\n<p></p><details><summary>出力例</summary>\n以下は <var>T_\\text{max}=30,N_\\text{worker}=5</var> の例:<p></p>\n<div class=\"codehilite\"><pre><span></span>move 8\nstay\nmove 13\nstay\nstay\nexecute 1 100\nstay\nmove 13\nstay\nstay\nexecute 1 100\nstay\nmove 13\nmove 1\nstay\nexecute 1 100\nstay\nmove 13\nmove 1\nstay\nexecute 1 100\nstay\nmove 13\nmove 1\nstay\nexecute 1 100\nstay\nmove 13\nexecute 7 47\nstay\nexecute 1 100\nstay\nexecute 4 55\nexecute 7 47\nstay\nexecute 1 25\nmove 14\nexecute 4 55\nexecute 7 47\nstay\nstay\nmove 14\nexecute 4 55\nexecute 7 47\nstay\nstay\nmove 14\nexecute 4 55\nexecute 7 47\nstay\nstay\nmove 14\nexecute 4 55\nexecute 7 47\nstay\nstay\nmove 14\nexecute 4 55\nexecute 7 47\nstay\nstay\nmove 14\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nstay\nexecute 4 55\nexecute 7 47\nstay\nstay\nstay\nstay\nexecute 7 47\nstay\nstay\nstay\nstay\nexecute 7 47\nstay\n</pre></div>\n\n\n<ul>\n<li>1-5行目:時刻<var>1</var>におけるワーカーの行動を指定: <ul>\n<li>1行目:このワーカー(ID=1)は現在位置から頂点<code>8</code>に向かって移動する。</li>\n<li>2行目:このワーカー(ID=2)は移動もジョブ実行もせずにその場にとどまる。</li>\n<li>3行目:このワーカー(ID=3)は現在位置から頂点<code>13</code>に向かって移動する。</li>\n<li>4行目:このワーカー(ID=4)は移動もジョブ実行もせずにその場にとどまる。</li>\n<li>5行目:このワーカー(ID=5)は移動もジョブ実行もせずにその場にとどまる。</li>\n</ul>\n</li>\n<li>6-10行目:時刻<var>2</var>におけるワーカーの行動を指定: <ul>\n<li>6行目:このワーカー(ID=1)は現在位置でID=<code>1</code>であるジョブのタスクを<code>100</code>だけ処理する。</li>\n<li>7行目:このワーカー(ID=2)は移動もジョブ実行もせずにその場にとどまる。</li>\n<li>8行目:このワーカー(ID=3)は現在位置から頂点<code>13</code>に向かって移動する。</li>\n<li>9行目:このワーカー(ID=4)は移動もジョブ実行もせずにその場にとどまる。</li>\n<li>10行目:このワーカー(ID=5)は移動もジョブ実行もせずにその場にとどまる。</li>\n</ul>\n</li>\n<li>11-145行目は省略</li>\n<li>146-150行目:時刻<var>30</var>におけるワーカーの行動を指定: <ul>\n<li>146行目:このワーカー(ID=1)は移動もジョブ実行もせずにその場にとどまる。</li>\n<li>147行目:このワーカー(ID=2)は移動もジョブ実行もせずにその場にとどまる。</li>\n<li>148行目:このワーカー(ID=3)は移動もジョブ実行もせずにその場にとどまる。</li>\n<li>149行目:このワーカー(ID=4)は現在位置でID=<code>7</code>であるジョブのタスクを<code>47</code>だけ処理する。</li>\n<li>150行目:このワーカー(ID=5)は移動もジョブ実行もせずにその場にとどまる。\n</li></ul></li></ul></details>\n\n\n\n<p><a id=\"input2\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<hr>\n\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力2(採点)</h3>\n<p>出力1が有効であれば、入力としてスコア<var>S</var>を標準入力から以下の形式で与える。</p>\n<div class=\"codehilite\"><pre><span></span><var>\nS\n</var>\n</pre></div>\n\n\n<p>この値を入力から受け取らない場合、<code>TLE</code>となる可能性がある。</p>\n<p>また、順位付けに関しては <a href=\"#ranking-method\">順位決定方法</a> を参照せよ。</p>\n<p><a id=\"scoring-method\" class=\"anchor\"></a></p>\n<h4>採点方法</h4>\n<p>スコア<var>S</var>は以下の式により決定される。\n</p><p style=\"text-align:center;\">\n<var>\n\\begin{aligned}\nS=\\left\\lfloor\\sum_{j\\in J_\\text{finished}}\\sum_{w \\in W}\\sum_{t=1}^{T_\\text{max}}a^w_j(t)r_j(t)\\right\\rfloor\n\\end{aligned}\n</var>\n</p><p></p>\n<ul>\n<li>完了したジョブの集合:<var>J_\\text{finished}</var></li>\n<li>全ワーカーの集合:<var>W</var></li>\n<li>時刻<var>t</var>にワーカー<var>w</var>が実行したジョブ<var>j</var>のタスク数:<var>a^w_j(t)</var></li>\n<li>時刻<var>t</var>におけるジョブ<var>j</var>のタスク当たりの報酬:<var>r_j(t)</var></li>\n</ul>\n<p>ただし、<var>\\left\\lfloor x \\right\\rfloor</var> は<var>x</var>を超えない最大の整数を返す関数(床関数)である。</p>\n<p><a id=\"testcase-generation-rules\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>テストケース生成規則</h3>\n<p></p><details><summary>地理情報(グラフ)</summary><p></p>\n<ul>\n<li>\n<p>用語</p>\n<ul>\n<li>矩形領域<var>[x_0,x_1]\\times[y_0,y_1]\\,\\,(x_0&lt;x_1,y_0&lt;y_1)</var>を中央を通る十字で4個の矩形に等分する操作をここでは<strong>分割</strong>と呼ぶ。</li>\n<li>具体的には<var>[x_0,x_1]\\times[y_0,y_1]</var>を以下の4つに細分する操作である。<ul>\n<li><var>[x_0,(x_1+x_0)/2]\\times[y_0,(y_0+y_1)/2]</var></li>\n<li><var>[x_0,(x_1+x_0)/2]\\times[(y_0+y_1)/2,y_1]</var></li>\n<li><var>[(x_1+x_0)/2,x_1]\\times[y_0,(y_0+y_1)/2]</var></li>\n<li><var>[(x_1+x_0)/2,x_1]\\times[(y_0+y_1)/2,y_1]</var></li>\n</ul>\n</li>\n<li>また、この操作(与えられた矩形領域から矩形領域の集合(上記4つ)を得る操作)を、関数<var>\\text{Split}(R)</var>として定めておく。</li>\n</ul>\n</li>\n<li>\n<p>パラメータ</p>\n<ul>\n<li>矩形領域サイズ:<var>L&gt;0</var></li>\n<li>最大分割深さ:<var>d_\\text{max} \\in \\mathbb{Z}_{\\geq 0}</var></li>\n<li>(最大)矩形個数:<var>M</var>(<var>0</var>以上<var>(4^{d_\\text{max}+1}-1)/3</var>以下の整数)</li>\n<li>距離最小スケール:<var>s&gt;0</var></li>\n<li>切断面積比:<var>C\\in (0,1]</var></li>\n</ul>\n</li>\n<li>\n<p><strong>生成手順1</strong>(グラフの生成)</p>\n<ol>\n<li>矩形領域の集合<var>U=\\{\\}</var>を用意する。</li>\n<li>矩形領域<var>R=[0,L]\\times[0,L]</var>を<var>U</var>に追加する。</li>\n<li><var>d_\\text{max}=0</var>の場合<code>8.</code>に進む。</li>\n<li><var>U</var>からランダムに1つ矩形領域を選び、それを<var>r</var>とする。</li>\n<li><var>r</var>の面積が<var>L^2/4^{d_\\text{max}}</var>である場合<code>4.</code>に戻る。</li>\n<li><var>\\text{Split}(r)</var>の要素全てを<var>U</var>に追加する。<ul>\n<li>既に<var>U</var>に同一の要素が存在する場合、その要素を追加しても<var>U</var>は変化しない。 </li>\n</ul>\n</li>\n<li><var>|U| &gt; M</var>を満たす場合、<code>8.</code>に進む。満たさない場合<code>4.</code>に戻る。</li>\n<li><var>U</var>に属する全ての矩形の<strong>辺の</strong>和集合<var>A</var>を重み付き無向グラフ<var>G=(V,E),W:E\\rightarrow \\mathbb{R}_{&gt; 0}</var>とみなす。<ul>\n<li>グラフの頂点集合<var>V</var>は辺の和集合<var>A</var>上において直交する線分が存在する点全て。</li>\n<li>グラフの辺集合<var>E</var>は頂点のペア<var>\\{a,b\\}</var>のうち、<var>a\\neq b</var>かつ辺の和集合<var>A</var>上において<var>a</var>から<var>b</var>へ他の頂点を経由せず到達できるもの全て。</li>\n<li>重み(関数)<var>W</var>は点同士のユークリッド距離で定める。</li>\n</ul>\n</li>\n<li>この<var>G=(V,E)</var>(重み<var>W</var>)を地理情報の生成に使用するグラフとして採用する。</li>\n</ol>\n</li>\n</ul>\n<p>(Reference:Eisenstat, D., Random road networks: the quadtree model, Proceeding of the 8th Workshop on Analytic Algorithms and Combinatorics (ANALCO), pp.76-84, 2011 (DOI:<a href=\"https://doi.org/10.1137/1.9781611973013.9\">https://doi.org/10.1137/1.9781611973013.9</a>))</p>\n<ul>\n<li><strong>生成手順2</strong>(標高の生成)<ol>\n<li>正方形領域<var>R=[0,1024]\\times[0,1024]</var>を用意する。</li>\n<li><var>R</var>を<var>x</var>方向<var>y</var>方向共に<var>128</var>分割する(=サイズ<var>8\\times8</var>の正方形領域<var>128\\times128</var>個に分割する。)</li>\n<li><var>R</var>からランダムな正方形領域を<var>20</var>個選びその和集合を<var>A</var>とする。</li>\n<li>再び<var>R</var>からランダムな正方形領域を<var>20</var>個選びその和集合を<var>B</var>とする。</li>\n<li>以下の偏微分方程式(を上記<code>2.</code>の分割により離散化したもの)を時刻<var>t=100000</var>まで解く(=<var>u(100000,x,y)</var>を計算する):\n<p style=\"text-align:center;\">\n<var>\\displaystyle\n\\frac{\\partial u}{\\partial t}=\\Delta u-b(x,y)u+a(x,y)\n</var>\n</p>\nただし、時刻<var>t=0</var>における初期値は<var>u(0,x,y)=u_0(x,y)\\equiv 0</var>, 境界条件はノイマン境界条件で、<br>\n<var>a(x,y)=\\begin{cases}\n1/8^2, &amp; \\text{if}\\ (x,y) \\in A, \\\\\n0, &amp; \\text{otherwise},\n\\end{cases}</var><br><var>b(x,y)=\\begin{cases}\n1/8^2, &amp; \\text{if}\\ (x,y) \\in B, \\\\\n0, &amp; \\text{otherwise}.\n\\end{cases}</var><br>である。</li>\n<li><var>u(100000,x,y)</var>を<var>[0,1]</var>の範囲に正規化し、それを標高<var>e(x,y)</var>として採用する。</li>\n</ol>\n</li>\n<li><strong>生成手順3</strong>(グラフの切断、距離スケーリング)<ol>\n<li>生成手順2で生成した標高<var>e(x,y)</var>のデータをグラフの空間サイズ<var>[0,L]\\times[0,L]</var>に合わせる。<br>すなわち、空間スケーリングされた標高<var>\\tilde e(x,y)</var>を<var>\\tilde e(x,y)= e(L\\times x/1024,L\\times y/1024)</var>と定める。</li>\n<li><var>\\tilde e(x,y)</var>がある実数<var>z</var>より大きい部分を返す関数<var>H(z)=\\{(x,y) \\in [0,L]\\times[0,L]|\\tilde e(x,y)&gt;z\\}</var>に対して、<var>H(z)</var>の面積が<var>C\\times L^2</var>以上となるような<var>z</var>のうち最大のものを<var>h</var>とする。</li>\n<li>生成手順1で生成したグラフの辺集合<var>E</var>について、辺の端点(2つある)の標高がどちらも<var>h</var>を下回るものを全て<var>E</var>から削除する。</li>\n<li>グラフ<var>G=(V,E)</var>の最大の連結成分を<var>G'=(V',E')</var>とする。</li>\n<li>重み<var>W':E' \\rightarrow \\mathbb{R}_{&gt; 0}:</var>を次のように定める:<var>W'(e)= s\\times W(e)/\\min_{e' \\in E'}W(e')</var></li>\n<li>グラフ<var>G'=(V',E')</var>(重み(距離)<var>W'</var>)を地理情報として採用する。\n</li></ol></li></ul></details>\n\n\n\n<p></p><details><summary>報酬を表す区分線形関数</summary>\nこの問題では各時刻における報酬（正確にはタスク当たりの報酬値）を表す関数を有限個の点の線形補間で表現する。その点をここでは制御点と呼び、以下はその有限個の制御点の生成規則である。<p></p>\n<ul>\n<li>パラメータ<ul>\n<li>報酬が正である区間長:<var>L\\geq 1</var></li>\n<li>区間を細分する長さ:<var>l\\geq 1</var></li>\n<li>報酬基準値:<var>s &gt; 0</var></li>\n<li>制御点の値生成時に使用する標準偏差:<var>\\sigma' &gt; 0</var></li>\n<li>報酬上限値:<var>M &gt; 0</var></li>\n<li>報酬下限値:<var>m &gt; 0</var></li>\n</ul>\n</li>\n</ul>\n<p><var>~</var></p>\n<ol>\n<li>報酬開始時刻<var>b=\\text{randint}(1,T_\\text{max}-L)</var>、報酬終了時刻<var>e=b+L</var>、区間分割数<var>d=\\text{round}(L/l)</var>と定める。ただし、<var>\\text{randint}(m,n)</var>は<var>m</var>以上<var>n</var>以下の整数を一様にランダムに選ぶ関数、<var>\\text{round}(x)</var>は<var>x</var>を四捨五入により丸めた整数値を返す関数とする。</li>\n<li><var>\\mu=0,\\sigma=\\sigma'</var>である対数正規分布に従う乱数を独立に<var>d+1</var>個生成し<var>\\{c_i\\}_{i=1}^{d+1}</var>とおく。</li>\n<li><var>\\{v_i\\}_{i=1}^{d+1}</var>を <var>v_i=\\prod_{j=1}^{i}c_j</var>で定める。</li>\n<li><var>B=s\\sqrt{(d+1)/\\sum_{i=1}^{d+1}v_i^2}</var>として、<var>\\{r_i\\}_{i=1}^{d+1}</var>を <var>r_i=\\text{round}(Bv_i)</var>で定める。</li>\n<li><var>r_i &gt; M</var>または<var>r_i &lt; m</var>となるような<var>i</var>が存在すれば<code>2.</code>に戻る。</li>\n<li><var>t_i=\\text{round}(b+(i-1)L/d)</var>として、時刻と報酬値のペアの列<var>((b-1,0),(t_1,r_1),(t_2,r_2),\\cdots,(t_{d+1},r_{d+1}),(e+1,0))</var>を制御点の列として採用する。\n</li></ol></details>\n\n<p>その他特に指定がない限り一様乱数。</p>\n<p><a id=\"ranking-method\" class=\"anchor\"></a></p>\n</section>\n</div>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>順位決定方法</h3>\n<h4>暫定テスト</h4>\n<p>暫定テストは、システムテストに用いられるテストケースからランダムに<var>50</var>個選択し実行する。ただし、同じパラメータパターンから生成されるテストケースが2つ以上選ばれることはない。</p>\n<p>評価方法はシステムテストと同様なのでそちらを参照せよ。</p>\n<style>\n.testpar{\nmargin:auto;\nborder-collapse:unset;\n}\n.testpar td,.testpar th{\npadding:5px;\n}\n</style>\n\n<h4>システムテスト</h4>\n<p>システムテストで用いるテストケースは、以下に示す一部の特徴的な要素に関して、備考欄に示す性質を満たすように選択して与えられる:</p>\n<table border=\"1\" class=\"testpar\">\n<thead>\n<tr>\n<th>要素</th><th>対応するパラメータ</th><th>種類数</th><th>備考</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>作業期間長さ</td><td><var>T_\\text{max}</var></td><td>3</td><td>短い(<var>300</var>)・中程度(<var>700</var>)・長い(<var>1000</var>)</td>\n</tr><tr>\n<td>空間(地理情報)広さ</td><td>地理情報生成規則内の<var>d_\\text{max}</var></td><td>3</td><td>狭い(<var>5</var>)・中程度(<var>6</var>)・広い(<var>7</var>)</td>\n</tr><tr>\n<td>ワーカー数</td><td><var>N_{\\text{worker}}</var></td><td>4</td><td>単一(<var>1</var>)・少(<var>2</var>)・中程度(<var>5</var>)・多い(<var>10</var>)</td>\n</tr><tr>\n<td>全ジョブの数</td><td><var>N_{\\text{job}}</var></td><td>3</td><td>少(<var>250 \\leq N_{\\text{job}} \\leq 253 </var>)・中程度(<var>500 \\leq N_{\\text{job}} \\leq 503</var>)・多い(<var>1000 \\leq N_{\\text{job}} \\leq 1003</var>)</td>\n</tr><tr>\n<td></td><td></td><td>合計108パターン</td><td>各パターンに対し40個テストケース生成</td>\n</tr>\n</tbody>\n</table>\n\n<p>これらの各パターンについて、異なるシード値で<var>40</var>個テストケースを生成し、合計<var>3 \\times 3 \\times4\\times 3 \\times 40 = 4320</var>個のテストケースを実行する。</p>\n<p>これは上記表のパラメータのパターン生成のみであり、本処理とは別に、地理情報やジョブなどのデータはテストケースごとに生成処理が行われる。</p>\n<p>順位付けは相対評価による得点計算を採用する。テストケースごとに、<var>\\text{round}(10^{9} \\times \\frac{\\text{自身の得点}}{全参加者中の最高得点})</var>の<font color=\"red\"><strong>相対評価スコア</strong></font>が得られ、その和が提出した解答の得点となる。</p>\n<p>不正な出力や制限時間超過をした場合、そのテストケースのみ0点となる。</p>\n<p>システムテストは <font color=\"red\"><strong><code>CE</code>以外の結果を得た一番最後の提出</strong></font>に対してのみ行われるため、最終的に提出する解答を間違えないよう注意せよ。</p>\n<h4>相対評価システムについて</h4>\n<p>暫定テスト、システムテストともに、 <code>CE</code> 以外の結果を得た一番最後の提出のみが順位表に反映される。 相対評価スコアの計算に用いられる各テストケース毎の全参加者中の最高点の算出においても、順位表に反映されている最終提出のみが用いられる。</p>\n<p>順位表に表示されているスコアは相対評価スコアであり、新規提出があるたびに、相対評価スコアが再計算される。 一方、提出一覧から確認出来る各提出のスコアは各テストケース毎の得点をそのまま足し合わせた絶対評価スコアであり、相対評価スコアは表示されない。 最新以外の提出の、現在の順位表における相対評価スコアを知るためには、再提出が必要である。不正な出力や制限時間超過をした場合、提出一覧から確認出来る絶対スコアは0となっているが、順位表には正解したテストケースに対する相対スコアの和が表示されている。</p>\n<p><a id=\"constraints\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3>\n<ul>\n<li>文字コードはUTF-8(ただし今回はASCII文字のみ使用される)</li>\n<li>改行コードは<code>LF</code>(<code>0x0A</code>)</li>\n<li>区切り文字は半角スペース(<code>0x20</code>)</li>\n<li>末尾区切り文字は許容される。</li>\n</ul>\n<p>小数のものは<strong>[小数]</strong>と付記する。</p>\n<h4>入力1</h4>\n<ul>\n<li><var>300 \\leq T_\\text{max} \\leq 1000</var> かつ <var>T_\\text{max}</var>は<var>100</var>の倍数。</li>\n<li><var>150\\leq N_V\\leq 2000</var></li>\n<li><var>4N_V/3\\leq N_E\\leq 2 N_V</var></li>\n<li><var>1\\leq u_i,v_i\\leq N_V, u_i \\neq v_i (1 \\leq i \\leq N_E)</var></li>\n<li><var>1\\leq d_i \\leq 128 (1 \\leq i \\leq N_E)</var> </li>\n<li>与えられるグラフは自己ループ・多重辺が存在せず、連結であることが保証される。</li>\n<li><var> 1 \\leq N_\\text{worker} \\leq 10</var></li>\n<li><var>1\\leq v^\\text{init}_i \\leq N_V (1 \\leq i \\leq N_\\text{worker})</var></li>\n<li><var>30\\leq L^\\text{max}_i\\leq 100 (1 \\leq i \\leq N_\\text{worker})</var></li>\n<li><var>1 \\leq N^\\text{JobType}_i \\leq 3 (1 \\leq i \\leq N_\\text{worker})</var></li>\n<li><var>1\\leq \\text{Type}^i_j\\leq 3 (1 \\leq i \\leq N_\\text{worker},1 \\leq j \\leq N^\\text{JobType}_i)</var></li>\n<li><var>250 \\leq N_\\text{job} \\leq 1003</var></li>\n<li><var>\\text{ID}^\\text{job}_i=i (1 \\leq i \\leq N_\\text{job})</var></li>\n<li><var>1\\leq \\text{Type}_i\\leq 3</var> かつ、<var>\\text{Type}_i</var>は<var>1</var>つ以上のワーカーの処理可能ジョブタイプに含まれる。  <var>(1 \\leq i \\leq N_\\text{job})</var></li>\n<li><var>500 \\leq N^\\text{task}_i \\leq 1500(1 \\leq i \\leq N_\\text{job})</var></li>\n<li><var>1 \\leq v^\\text{job}_i \\leq N_V (1 \\leq i \\leq N_\\text{job})</var></li>\n<li><var>1 \\leq N^\\text{reward}_i \\leq 43 (1 \\leq i \\leq N_\\text{job})</var> </li>\n<li><var>0\\leq t^\\text{reward}_{i,1}&lt;t^\\text{reward}_{i,2}&lt;\\cdots&lt;t^\\text{reward}_{i,N^\\text{reward}_i}\\leq T_\\text{max}+1(1 \\leq i \\leq N_\\text{job})</var></li>\n<li><var>y^\\text{reward}_{i,1}=y^\\text{reward}_{i,N^\\text{reward}_i}=0,1 \\leq y^\\text{reward}_{i,j} \\leq 10^7 (1 \\leq i \\leq N_\\text{job},2 \\leq j \\leq N^\\text{reward}_i-1)</var></li>\n<li><var>0\\leq N^\\text{depend}_i\\leq 3(1 \\leq i \\leq N_\\text{job})</var></li>\n<li><var>1 \\leq \\text{id}^\\text{depend}_{i,j} \\leq N_\\text{job},\\text{id}^\\text{depend}_{i,j} \\neq \\text{id}^\\text{depend}_{i,k},\\text{id}^\\text{depend}_{i,j}\\neq i (1 \\leq i \\leq N_\\text{job},1\\leq j \\leq N^\\text{depend}_i,1\\leq k\\leq N^\\text{depend}_i,j\\neq k)</var></li>\n<li>ジョブの依存関係は、ジョブ全体で見ると各ジョブを頂点、ジョブの間の依存関係を有向辺とみなした有向非巡回グラフ（必ずしも連結でない）となり、各連結成分のサイズは<var>4</var>以下である。</li>\n</ul>\n<h4>入力2(採点)</h4>\n<ul>\n<li><var>0 \\leq S \\leq 2^{63}-1</var></li>\n</ul>\n<h4>地理情報</h4>\n<ul>\n<li><var>L=2048</var></li>\n<li><var>d_\\text{max}\\in\\{5,6,7\\}</var></li>\n<li><var>s=1</var></li>\n<li><var>0.3 \\leq C &lt; 0.4</var> <strong>[小数]</strong></li>\n<li><var>M=\\text{round}(0.45(4^{d_\\text{max}+1}-1)/(3\\times 2^{d_\\text{max}-5}))</var></li>\n</ul>\n<h4>報酬を表す区分線形関数</h4>\n<ul>\n<li><var> 100 \\leq L \\leq T_\\text{max}</var></li>\n<li><var>l = 25</var></li>\n<li><var> 10^6 \\leq s \\leq 2\\times 10^6</var></li>\n<li><var> 0.3 \\leq \\sigma' &lt; 0.38 </var>  <strong>[小数]</strong></li>\n<li><var> M = 10^7 </var></li>\n<li><var> m = 1 </var></li>\n</ul>\n<p><a id=\"toolkit\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>ツールキット</h3>\n<p>この問題のツールキットは<a href=\"https://img.atcoder.jp/hokudai-hitachi2022/f3c44ba9531996b.zip\">ここ</a>からダウンロード可能です。以下のコンテンツが含まれています:</p>\n<ul>\n<li>ジャッジプログラム(A,B両用)</li>\n<li>テストケースジェネレータ(A,B両用)</li>\n<li>サンプルコード(C++,A問題用に1つ,B問題用に1つ)</li>\n<li>ビジュアライザ</li>\n</ul>\n<p><a id=\"visualizer\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ビジュアライザ</h3>\n<p>ツールキット内のジャッジプログラムから生成されるログファイル(JSON形式)を利用して結果の可視化を行うことができます。</p>\n<p>ビジュアライザはツールキットに同梱されていますが、サーバー上のものも<a href=\"https://img.atcoder.jp/hokudai-hitachi2022/wVw8B4mE02x8rJNU.html\">こちら</a>から利用できます。</p>\n<p>詳細はツールキット内のREADMEやビジュアライザのページ下部の説明をお読みください。</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p></p><details><summary>Contents</summary><p></p>\n<ol>\n<li><a href=\"#problem-overview-en\">Problem Overview</a></li>\n<li><a href=\"#input1-en\">Input 1</a><ol>\n<li><a href=\"#work-time-frame-en\">Work time frame</a></li>\n<li><a href=\"#geo-data-en\">Geographical data</a></li>\n<li><a href=\"#worker-en\">Workers</a></li>\n<li><a href=\"#job-en\">Jobs</a></li>\n</ol>\n</li>\n<li><a href=\"#output1-en\">Output 1</a></li>\n<li><a href=\"#input2-en\">Input 2 (Scoring)</a><ol>\n<li><a href=\"#scoring-method-en\">Scoring method</a></li>\n</ol>\n</li>\n<li><a href=\"#testcase-generation-rules-en\">Test case generation rules</a></li>\n<li><a href=\"#ranking-method-en\">Ranking mehod</a></li>\n<li><a href=\"#constraints-en\">Constraints</a></li>\n<li><a href=\"#toolkit-en\">Toolkit</a></li>\n<li><a href=\"#visualizer-en\">Visualizer</a>\n</li></ol></details>\n\n<p><a id=\"problem-overview-en\" class=\"anchor\"></a></p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Overview</h3>\n<p>This problem is to maximize utilization of available machinery and personnel (referred to as “workers” for simplicity) for an agricultural equipment sharing service, performing agricultural work (referred to as “jobs”) while maximizing reward*. Instructions to workers for moving and performing work are output, to handle many jobs that are distributed over a space. Each job is composed of multiple “tasks” requiring a specific amount of processing, and is considered complete when workers have processed these tasks. Reward is obtained by completing jobs, but amount of reward depends on when tasks were completed, so the appropriate time-frame for handling each task must be considered. The number of tasks that a worker can handle at a particular time is also dependent on the capabilities of the worker.</p>\n<p>*Reward: Assuming factors such as the harvest time for the crops and the rate of renewable energy supplied to agricultural equipment.</p>\n<p style=\"text-align:center;display:flex;justify-content: center; width:100%;aspect-ratio: 2.5;\" id=\"overview-img\">\n\n<img src=\"https://img.atcoder.jp/hokudai-hitachi2022/55d6622c556aaa23cc2186a2820c7bd4.png\">\n<img src=\"https://img.atcoder.jp/hokudai-hitachi2022/e98c45a5d7081e87790e944aa2de72e9.png\">\n\n\n\n</p>\n\n<p>The following data is given as the initial input.</p>\n<ol>\n<li>Work time frame</li>\n<li>Geographical data (graph)</li>\n<li>Worker data</li>\n<li>All job data</li>\n</ol>\n<p>For this input, contestants will produce the following output:</p>\n<ol>\n<li>Worker actions for all time points in the work time frame.</li>\n</ol>\n<p>The total reward obtained for work will be the score.</p>\n<p>More detailed description is given below.</p>\n<p><a id=\"input1-en\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input 1</h3>\n<p>The initial input is:</p>\n<ol>\n<li>Work time frame</li>\n<li>Geographical data(graph)</li>\n<li>Worker data</li>\n<li>All job data</li>\n</ol>\n<p>This data is given on standard input in the following format:</p>\n<div class=\"codehilite\"><pre><span></span><var>\nT_{\\rm{max}}\\\\\nN_V\\,\\,N_E\\\\\nu_1\\quad v_1\\quad d_1\\\\\n\\vdots\\\\\nu_{N_E}\\,\\, v_{N_E}\\,\\, d_{N_E}\\\\\nN_{\\rm{worker}}\\\\\nv^{\\rm{init}}_1\\,\\,L^\\text{max}_1\\,\\,N^{\\rm{JobType}}_1\\,\\,\\text{Type}^1_1\\,\\,\\text{Type}^1_2\\,\\,\\cdots \\text{Type}^1_{N^{\\rm{JobType}}_1}\\\\\n\\vdots\\\\\nv^{\\rm{init}}_{N_{\\rm{worker}}}\\,\\,L^\\text{max}_{N_{\\rm{worker}}}\\,\\,N^{\\rm{JobType}}_{N_{\\rm{worker}}}\\,\\,\\text{Type}^{N_{\\rm{worker}}}_1\\,\\,\\text{Type}^{N_{\\rm{worker}}}_2\\,\\,\\cdots \\text{Type}^{N_{\\rm{worker}}}_{N^{\\rm{JobType}}_1}\\\\\nN_{\\rm{job}}\\\\\n\\text{Job}_1\\\\\n\\vdots\\\\\n\\text{Job}_{N_{\\rm{job}}}</var>\n</pre></div>\n\n\n<p>(The structure for <var>\\text{Job}_i</var> is described below)\n<a id=\"work-time-frame-en\" class=\"anchor\"></a></p>\n<h4>Work Time Frame</h4>\n<ul>\n<li><strong>Input</strong><ul>\n<li>The length of the work time frame,<var>T_\\text{max}</var>, is given in the first line.</li>\n</ul>\n</li>\n</ul>\n<p>For this problem, time values, <var>t</var>, will be integer values from <var>1</var> to <var>T_{\\text{max}}</var>.\n</p><details><summary>Input example</summary>\nThe following is an example with <var>T_\\text{max}=300</var><p></p>\n<div class=\"codehilite\"><pre><span></span>300\n</pre></div>\n\n\n<p>(the line ends with a line-feed character)</p>\n<ul>\n<li>Line1: Length of work time frame is <code>300</code> (<var>T_\\text{max}=300</var>).\n</li></ul></details>\n<a id=\"geo-data-en\" class=\"anchor\"></a>\n\n<h4>Geographical Data</h4>\n<ul>\n<li><strong>Input</strong><ul>\n<li>The next line gives the number of vertices, <var>N_V</var>, and edges, <var>N_E</var>, for a graph representing geographical data for the problem (a connected, non-directed graph with positive weightings). <ul>\n<li>The <var>N_V</var> individual vertices will be numbered from <var>1</var> to <var>N_V</var>. </li>\n</ul>\n</li>\n<li>The following <var>N_E</var> lines give data for each edge: vertices <var>u_i,v_i</var>, and weight <var>d_i</var> (distance).Note that <var>1\\leq i \\leq N_E</var>.</li>\n</ul>\n</li>\n</ul>\n<p>As described below, <a href=\"#job-en\">jobs</a> are located on vertices and <a href=\"#worker-en\">workers</a> move along edges of this graph.\n</p><details><summary>Input example</summary>\nThe following is an example with <var>N_V=14,N_E=19</var>:<p></p>\n<div class=\"codehilite\"><pre><span></span>14 19\n1 7 1\n1 2 1\n2 9 1\n2 3 1\n3 5 1\n3 7 1\n3 6 1\n4 13 2\n4 10 2\n4 6 1\n4 5 1\n6 8 1\n7 8 1\n8 14 2\n9 11 2\n10 12 2\n10 11 2\n12 13 2\n13 14 2\n</pre></div>\n\n\n<p>(The last line ends with a line-feed character)</p>\n<ul>\n<li>Line 1: The graph has <code>14</code> vertices and <code>19</code> edges(<var>N_V=14,N_E=19</var>).<ul>\n<li>Vertex indices from <var>1</var> to <code>14</code> are assigned to these <code>14</code> vertices.</li>\n<li>Below, the vertex corresponding to vertex indices <var>i</var> will be referred to simply as vertex <var>i</var>. </li>\n</ul>\n</li>\n<li>Line 2: There is an edge of length <code>1</code> between vertices <code>1</code> and <code>7</code>(<var>u_{1}=1,v_{1}=7,d_{1}=1</var>).</li>\n<li>Line 3: There is an edge of length <code>1</code> between vertices <code>1</code> and <code>2</code>(<var>u_{2}=1,v_{2}=2,d_{2}=1</var>).</li>\n<li>Line 4: There is an edge of length <code>1</code> between vertices <code>2</code> and <code>9</code>(<var>u_{3}=2,v_{3}=9,d_{3}=1</var>).</li>\n<li>Line 5: There is an edge of length <code>1</code> between vertices <code>2</code> and <code>3</code>(<var>u_{4}=2,v_{4}=3,d_{4}=1</var>).</li>\n<li>Line 6: There is an edge of length <code>1</code> between vertices <code>3</code> and <code>5</code>(<var>u_{5}=3,v_{5}=5,d_{5}=1</var>).</li>\n<li>Line 7: There is an edge of length <code>1</code> between vertices <code>3</code> and <code>7</code>(<var>u_{6}=3,v_{6}=7,d_{6}=1</var>).</li>\n<li>Line 8: There is an edge of length <code>1</code> between vertices <code>3</code> and <code>6</code>(<var>u_{7}=3,v_{7}=6,d_{7}=1</var>).</li>\n<li>Line 9: There is an edge of length <code>2</code> between vertices <code>4</code> and <code>13</code>(<var>u_{8}=4,v_{8}=13,d_{8}=2</var>).</li>\n<li>Line 10: There is an edge of length <code>2</code> between vertices <code>4</code> and <code>10</code>(<var>u_{9}=4,v_{9}=10,d_{9}=2</var>).</li>\n<li>Line 11: There is an edge of length <code>1</code> between vertices <code>4</code> and <code>6</code>(<var>u_{10}=4,v_{10}=6,d_{10}=1</var>).</li>\n<li>Line 12: There is an edge of length <code>1</code> between vertices <code>4</code> and <code>5</code>(<var>u_{11}=4,v_{11}=5,d_{11}=1</var>).</li>\n<li>Line 13: There is an edge of length <code>1</code> between vertices <code>6</code> and <code>8</code>(<var>u_{12}=6,v_{12}=8,d_{12}=1</var>).</li>\n<li>Line 14: There is an edge of length <code>1</code> between vertices <code>7</code> and <code>8</code>(<var>u_{13}=7,v_{13}=8,d_{13}=1</var>).</li>\n<li>Line 15: There is an edge of length <code>2</code> between vertices <code>8</code> and <code>14</code>(<var>u_{14}=8,v_{14}=14,d_{14}=2</var>).</li>\n<li>Line 16: There is an edge of length <code>2</code> between vertices <code>9</code> and <code>11</code>(<var>u_{15}=9,v_{15}=11,d_{15}=2</var>).</li>\n<li>Line 17: There is an edge of length <code>2</code> between vertices <code>10</code> and <code>12</code>(<var>u_{16}=10,v_{16}=12,d_{16}=2</var>).</li>\n<li>Line 18: There is an edge of length <code>2</code> between vertices <code>10</code> and <code>11</code>(<var>u_{17}=10,v_{17}=11,d_{17}=2</var>).</li>\n<li>Line 19: There is an edge of length <code>2</code> between vertices <code>12</code> and <code>13</code>(<var>u_{18}=12,v_{18}=13,d_{18}=2</var>).</li>\n<li>Line 20(<var>=1+N_E</var>): There is an edge of length <code>2</code> between vertices <code>13</code> and <code>14</code>(<var>u_{19}=13,v_{19}=14,d_{19}=2</var>).\n</li></ul></details>\n<a id=\"worker-en\" class=\"anchor\"></a>\n\n<h4>Workers</h4>\n<p>Workers are entities that process jobs, and have capabilities to move and to perform tasks. They operate according to input from the contestant (See <a href=\"#worker-action-en\">Worker actions</a>).</p>\n<ul>\n<li><strong>Input</strong><ul>\n<li>The number of workers, <var>N_{\\text{worker}}</var>, is given on the next line.</li>\n<li><p>\nThis is followed by <var>N_{\\text{worker}}</var> lines with worker configuration data:\n</p><ul>\n<li>Initial position (vertex index): <var>v^{\\text{init}}_i</var></li>\n<li>The maximum tasks the worker can perform per unit time: <var>L^{\\text{max}}_i</var></li>\n<li>Number of job types the worker can perform,  <var>N^{\\text{JobType}}_i</var> , and a list of the job types: <var>\\text{Type}^i_1\\,\\,\\text{Type}^i_2\\,\\,\\cdots\\,\\,\\text{Type}^i_{N^{\\text{JobType}}_i}</var></li>\n</ul>\n(<var>1\\leq i \\leq N_{\\text{worker}}</var>)\n<p></p></li>\n</ul>\n</li>\n</ul>\n<p>These inputs are given in order of worker ID.</p>\n<p>The upper limit for number of tasks performable per unit time and the types of jobs that can be done are different for each worker.\n</p><details><summary>Input example</summary>\nThe following is an example for <var>N_{\\text{worker}}=5</var>:<p></p>\n<div class=\"codehilite\"><pre><span></span>5\n6 100 3 1 2 3\n13 59 1 3\n10 55 2 2 3\n9 47 3 1 2 3\n9 89 1 2\n</pre></div>\n\n\n<p>(The last line ends with a line-feed character)</p>\n<ul>\n<li>Line 1: There are <code>5</code> workers (<var>N_{\\text{worker}}=5</var>).</li>\n<li>Line 2: The descriptor for worker with ID=1.<ul>\n<li>The worker’s initial location is the vertex with vertex index <code>6</code> (<var>v^{\\text{init}}_1=6</var>).</li>\n<li>The maximum number of tasks this worker can perform per unit of time is <code>100</code> (<var>L^{\\text{max}}_1=100</var>).</li>\n<li>The worker can perform <code>3</code> types of job (<var>N^{\\text{JobType}}_1=3</var>), of types <code>1</code>, <code>2</code>, <code>3</code> (<var>\\text{Type}^1_1=1,\\text{Type}^1_2=2,\\text{Type}^1_3=3</var>).</li>\n</ul>\n</li>\n<li>Line 3: The descriptor for worker with ID=2.<ul>\n<li>The worker’s initial location is the vertex with vertex index <code>13</code> (<var>v^{\\text{init}}_2=13</var>).</li>\n<li>The maximum number of tasks this worker can perform per unit of time is <code>59</code> (<var>L^{\\text{max}}_2=59</var>).</li>\n<li>The worker can perform <code>1</code> types of job (<var>N^{\\text{JobType}}_2=1</var>), of type <code>3</code> (<var>\\text{Type}^2_1=3</var>).</li>\n</ul>\n</li>\n<li>Line 4: The descriptor for worker with ID=3.<ul>\n<li>The worker’s initial location is the vertex with vertex index <code>10</code> (<var>v^{\\text{init}}_3=10</var>).</li>\n<li>The maximum number of tasks this worker can perform per unit of time is <code>55</code> (<var>L^{\\text{max}}_3=55</var>).</li>\n<li>The worker can perform <code>2</code> types of job (<var>N^{\\text{JobType}}_3=2</var>), of types <code>2</code>, <code>3</code> (<var>\\text{Type}^3_1=2,\\text{Type}^3_2=3</var>).</li>\n</ul>\n</li>\n<li>Line 5: The descriptor for worker with ID=4.<ul>\n<li>The worker’s initial location is the vertex with vertex index <code>9</code> (<var>v^{\\text{init}}_4=9</var>).</li>\n<li>The maximum number of tasks this worker can perform per unit of time is <code>47</code> (<var>L^{\\text{max}}_4=47</var>).</li>\n<li>The worker can perform <code>3</code> types of job (<var>N^{\\text{JobType}}_4=3</var>), of types <code>1</code>, <code>2</code>, <code>3</code> (<var>\\text{Type}^4_1=1,\\text{Type}^4_2=2,\\text{Type}^4_3=3</var>).</li>\n</ul>\n</li>\n<li>Line 6(<var>=1+N_{\\text{worker}}</var>): The descriptor for worker with ID=5.<ul>\n<li>The worker’s initial location is the vertex with vertex index <code>9</code> (<var>v^{\\text{init}}_5=9</var>).</li>\n<li>The maximum number of tasks this worker can perform per unit of time is <code>89</code> (<var>L^{\\text{max}}_5=89</var>).</li>\n<li>The worker can perform <code>1</code> types of job (<var>N^{\\text{JobType}}_5=1</var>), of type <code>2</code> (<var>\\text{Type}^5_1=2</var>).\n</li></ul></li></ul></details>\n<a id=\"job-en\" class=\"anchor\"></a>\n\n\n\n<h4>Jobs</h4>\n<p>A job is work that workers perform at one of the vertices.</p>\n<ul>\n<li><strong>A job:</strong><ul>\n<li>Is a unit of work in the real world, such as harvesting a crop or applying agricultural chemicals.</li>\n<li>Is composed of multiple smaller work tasks. For example, picking a single piece of fruit, harvesting a set area of rice plants, or spreading a chemical over a set area. These smaller amounts of work comprising a job will be called “tasks”.</li>\n<li>A job is completed by completing the set number of tasks that comprise the job.</li>\n<li>In reality, a job could consist of multiple types of task, but in this case, we focus on just the number of tasks. Thus, <strong>a job is completed by just processing a set number of a task</strong>. </li>\n<li>The location of a job is different for each job. For this problem, <strong>this is represented by locating each job on a vertex of the <a href=\"#geo-data-en\">geographical data</a> graph</strong> given with the problem.</li>\n</ul>\n</li>\n<li><strong>Task processing and reward</strong><ul>\n<li>The tasks for each job are processed by <a href=\"#worker-en\">workers</a>.</li>\n<li>The contestant shall output instructions for each worker to <strong>move</strong> and <strong>perform work</strong>, to move them to the vertex of a job and to perform the job’s tasks.</li>\n<li>The contestant will receive reward by <strong><font color=\"#DC143C\">completing jobs (processing the set number of tasks)</font></strong>.</li>\n<li>Each worker has a maximum number of tasks they can process per unit time (<a href=\"#worker\"><var>L^{\\text{max}}</var></a>), so completion of a job will take a certain amount of time. Typically, a set number of tasks are processed during each time interval from a set time.</li>\n<li><strong>The amount of reward received when completing a job will depend on the time when tasks were processed</strong>. More specifically, it is the sum for all time intervals (<var>t=1,2,\\cdots,T_\\text{max}</var>), of <p style=\"text-align:center;\">the product of the reward rate per task processed at that time point <var>r(t)</var> <var>\\times</var> the number of that task processed at that time point</p></li>\n<li>The reward rate, <var>r(t)</var> for processing the task at each time point <strong>is different for each job</strong>.</li>\n<li>The total reward collected by all workers will be the main constituent of the score for this problem (Scoring method). Contestants need to decide worker actions to maximize this total reward.</li>\n</ul>\n</li>\n<li><strong>Dependencies between jobs</strong><ul>\n<li>Some jobs are dependent on other jobs. That is, if a job is dependent on another job, its tasks cannot be processed until the tasks of the other job have been completed. </li>\n<li>If a job is not dependent on another job, there are no such constraints.</li>\n</ul>\n</li>\n</ul>\n<p></p><details open=\"\"><summary>Various constraints</summary>\n<ul>\n<li>Tasks cannot be processed during time intervals when reward is not available (when the reward per unit task is zero).</li>\n</ul></details>\n<br>\n<br><p></p>\n<ul>\n<li><strong>Input</strong><ul>\n<li>The next line gives <var>N_{\\text{job}}</var>, the number of jobs.</li>\n<li>This is followed by lines indicating the composition of each job, <var>\\text{Job}_i</var>, for the <var>N_{\\text{job}}</var> jobs(<var>N_{\\text{job}}\\times 3</var> lines).</li>\n</ul>\n</li>\n</ul>\n<p>The composition of <var>\\text{Job}_i</var> is given in the following format:</p>\n<div class=\"codehilite\"><pre><span></span><var>\n\\text{ID}^{\\rm{job}}_i\\,\\,\\text{Type}_i\\,\\,N^{\\rm{task}}_i\\,\\,v^{\\rm{job}}_i\\\\\nN^{\\rm{reward}}_i\\,\\, t^{\\rm{reward}}_{i,1}\\,\\, y^{\\rm{reward}}_{i,1}\\cdots t^{\\rm{reward}}_{i,N^{\\rm{reward}}_i}\\,\\, y^{\\rm{reward}}_{i,N^{\\rm{reward}}_i}\\\\\nN^{\\rm{depend}}_i\\,\\, {\\rm{id}}^{\\rm{depend}}_{i,1}\\,\\, \\cdots \\,\\,{\\rm{id}}^{\\rm{depend}}_{i,N^{\\rm{depend}}_i}</var>\n</pre></div>\n\n\n<ul>\n<li>Line 1<ul>\n<li>Job ID: <var>\\text{ID}^{\\text{job}}_i</var></li>\n<li>Job type: <var>\\text{Type}_i</var></li>\n<li>No. of tasks to complete: <var>N^{\\text{task}}_i</var></li>\n<li>Job location (vertex index): <var>v^{\\text{job}}_i</var></li>\n</ul>\n</li>\n<li>Line 2 (definition of reward function, <var>r(t)</var>)<ul>\n<li>Number of control points in reward function:<var>N^{\\text{reward}}_i</var></li>\n<li>Control point list:<var>t^{\\rm{reward}}_{i,1}\\,\\,y^{\\rm{reward}}_{i,1}\\,\\,t^{\\rm{reward}}_{i,2}\\,\\,y^{\\rm{reward}}_{i,2}\\,\\,\\cdots\\,\\,t^{\\rm{reward}}_{i,N^{\\text{reward}}_i}\\,\\,y^{\\rm{reward}}_{i,N^{\\text{reward}}_i}</var></li>\n</ul>\n</li>\n<li>Line 3 (job dependencies)<ul>\n<li>Number of job dependencies: <var>N^{\\text{depend}}_i</var></li>\n<li>Dependency job IDs: <var>{\\rm{id}}^{\\rm{depend}}_{i,1}\\,\\,{\\rm{id}}^{\\rm{depend}}_{i,2}\\,\\, \\cdots \\,\\,{\\rm{id}}^{\\rm{depend}}_{i,N^{\\rm{depend}}_i}</var></li>\n</ul>\n</li>\n</ul>\n<p></p><details><summary>Reward function <var>r(t)</var> details</summary>\nThe per-task reward at time <var>t</var> function <var>r(t)</var> is defined by one or more control points (time and value pairs) and linear interpolation between those points.<p></p>\n<p>In other words, given a list of control points, <var>p=((t_i,y_i))_{i=1,\\cdots,n}</var>  (<var>t_i,y_i\\in \\mathbb{Z},t_1 &lt; t_2 &lt; \\cdots &lt; t_n,n\\geq 1</var>), the per-task reward at time <var>t</var> function <var>r(t)</var> (actually <var>r(t;p)</var>), is defined as:</p>\n<p></p><p><var>\nr(t)=\\begin{cases}\ny_1, &amp; \\text{if}\\,\\, t &lt; t_1, \\\\\ny_n, &amp; \\text{if}\\,\\, t \\geq t_n, \\\\\n(y_\\text{next}-y_\\text{prev})(t-t_\\text{prev})/(t_\\text{next}-t_\\text{prev})+y_\\text{prev}, &amp; \\text{otherwise}.\n\\end{cases}</var></p><p></p>\n<p>Here, <var>(t_\\text{prev},y_\\text{prev})</var> is the pair with the largest time that does not exceed <var>t</var>, and <var>(t_\\text{next},y_\\text{next})</var> is the pair with the smallest time that exceeds <var>t</var>.</p>\n<p><var>r(t)</var>, integral multiples of <var>r(t)</var> and their sum are computed in decimals.</p>\n<p></p></details><p></p>\n<p></p><details><summary>Input example</summary>\nThe following is an example with <var>N_{\\text{job}}=7</var> (Note that this is a very small number of jobs):<p></p>\n<div class=\"codehilite\"><pre><span></span>7\n1 2 625 8\n15 1 0 2 1581724 4 1733369 6 1561173 8 1596919 10 1090320 12 1031662 14 929778 16 1095326 18 665006 20 757205 22 567001 24 600233 26 576475 27 0\n0\n2 3 993 14\n15 2 0 3 1147309 5 1186255 7 1098060 9 836498 11 872163 13 1071865 15 1408708 17 2135395 19 1517111 21 1079036 23 740032 25 904947 27 976790 28 0\n1 1\n3 2 1310 14\n15 2 0 3 992842 5 818304 7 676647 9 859283 11 871992 13 859663 15 1776296 17 3025691 19 1304819 21 1606358 23 3469915 25 2801513 27 3046487 28 0\n2 2 1\n4 2 1356 13\n15 3 0 4 2016014 6 2138183 8 1711305 10 2020927 12 2030686 14 1203758 16 973133 18 1102291 20 954221 22 725869 24 700613 26 604824 28 742452 29 0\n0\n5 1 1225 10\n15 5 0 6 1256998 8 1096984 10 820728 12 818626 14 1089776 16 1014615 18 1062766 20 900374 22 1190773 24 1050656 26 1876847 28 1530806 30 952050 31 0\n1 4\n6 3 1362 7\n15 0 0 1 608492 3 960135 5 961858 7 998014 9 1101543 11 1288452 13 1825126 15 1145645 17 1057616 19 1312087 21 991237 23 1123573 25 882743 26 0\n2 7 5\n7 1 1307 1\n15 5 0 6 299791 8 303708 10 533803 12 879014 14 828842 16 946449 18 991630 20 1551550 22 1499622 24 1793967 26 1425447 28 1732069 30 1207139 31 0\n0\n</pre></div>\n\n\n<ul>\n<li>Line 1: The total number of jobs is <code>7</code>. (<var>N_{\\text{job}}=7</var>)<ul>\n<li>The actual problem given will consist of several hundreds of jobs.</li>\n</ul>\n</li>\n<li>Line 2: Start of description for job with ID=1.<ul>\n<li>The job ID is <code>1</code> (<var>\\text{ID}^{\\text{job}}_1=1</var>).</li>\n<li>The job type is <code>2</code> (<var>\\text{Type}_1=2</var>).</li>\n<li>The number of tasks required to complete this job is <code>625</code> (<var>N^{\\text{task}}_1=625</var>).</li>\n<li>The job is located at vertex <code>8</code> (<var>v^{\\text{job}}_1=8</var>).</li>\n</ul>\n</li>\n<li>Line 3: Definition of reward function for the job with ID=1.<ul>\n<li>There are <code>15</code> control points (<var>N^{\\text{reward}}_1=15</var>).</li>\n<li>The list of control points is: ((<code>1</code>,<code>0</code>), (<code>2</code>,<code>1581724</code>), (<code>4</code>,<code>1733369</code>), (<code>6</code>,<code>1561173</code>), (<code>8</code>,<code>1596919</code>), (<code>10</code>,<code>1090320</code>), (<code>12</code>,<code>1031662</code>), (<code>14</code>,<code>929778</code>), (<code>16</code>,<code>1095326</code>), (<code>18</code>,<code>665006</code>), (<code>20</code>,<code>757205</code>), (<code>22</code>,<code>567001</code>), (<code>24</code>,<code>600233</code>), (<code>26</code>,<code>576475</code>), (<code>27</code>,<code>0</code>)).<ul>\n<li>The times for which reward can be obtained are <var>2,3,\\cdots,26</var>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Line 4: The jobs that the job with ID=1 depends on. This completes the description of the job with ID=1.<ul>\n<li>The number of jobs this job depends on is <code>0</code>(<var>N^{\\text{depend}}_1=0</var>).</li>\n<li>(Since the number of jobs it depends on is <code>0</code>, no job IDs are given.)</li>\n</ul>\n</li>\n<li>Line 5: Start of description for job with ID=2.<ul>\n<li>The job ID is <code>2</code> (<var>\\text{ID}^{\\text{job}}_2=2</var>).</li>\n<li>The job type is <code>3</code> (<var>\\text{Type}_2=3</var>).</li>\n<li>The number of tasks required to complete this job is <code>993</code> (<var>N^{\\text{task}}_2=993</var>).</li>\n<li>The job is located at vertex <code>14</code> (<var>v^{\\text{job}}_2=14</var>).</li>\n</ul>\n</li>\n<li>Line 6: Definition of reward function for the job with ID=2.<ul>\n<li>There are <code>15</code> control points (<var>N^{\\text{reward}}_2=15</var>).</li>\n<li>The list of control points is: ((<code>2</code>,<code>0</code>), (<code>3</code>,<code>1147309</code>), (<code>5</code>,<code>1186255</code>), (<code>7</code>,<code>1098060</code>), (<code>9</code>,<code>836498</code>), (<code>11</code>,<code>872163</code>), (<code>13</code>,<code>1071865</code>), (<code>15</code>,<code>1408708</code>), (<code>17</code>,<code>2135395</code>), (<code>19</code>,<code>1517111</code>), (<code>21</code>,<code>1079036</code>), (<code>23</code>,<code>740032</code>), (<code>25</code>,<code>904947</code>), (<code>27</code>,<code>976790</code>), (<code>28</code>,<code>0</code>)).<ul>\n<li>The times for which reward can be obtained are <var>3,4,\\cdots,27</var>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Line 7: The jobs that the job with ID=2 depends on. This completes the description of the job with ID=2.<ul>\n<li>The number of jobs this job depends on is <code>1</code>(<var>N^{\\text{depend}}_2=1</var>).</li>\n<li>This job depends on the job with ID=<code>1</code>(<var>\\text{id}^\\text{depend}_{2,1}=1</var>).</li>\n</ul>\n</li>\n<li>Line 8: Start of description for job with ID=3.<ul>\n<li>The job ID is <code>3</code> (<var>\\text{ID}^{\\text{job}}_3=3</var>).</li>\n<li>The job type is <code>2</code> (<var>\\text{Type}_3=2</var>).</li>\n<li>The number of tasks required to complete this job is <code>1310</code> (<var>N^{\\text{task}}_3=1310</var>).</li>\n<li>The job is located at vertex <code>14</code> (<var>v^{\\text{job}}_3=14</var>).</li>\n</ul>\n</li>\n<li>Line 9: Definition of reward function for the job with ID=3.<ul>\n<li>There are <code>15</code> control points (<var>N^{\\text{reward}}_3=15</var>).</li>\n<li>The list of control points is: ((<code>2</code>,<code>0</code>), (<code>3</code>,<code>992842</code>), (<code>5</code>,<code>818304</code>), (<code>7</code>,<code>676647</code>), (<code>9</code>,<code>859283</code>), (<code>11</code>,<code>871992</code>), (<code>13</code>,<code>859663</code>), (<code>15</code>,<code>1776296</code>), (<code>17</code>,<code>3025691</code>), (<code>19</code>,<code>1304819</code>), (<code>21</code>,<code>1606358</code>), (<code>23</code>,<code>3469915</code>), (<code>25</code>,<code>2801513</code>), (<code>27</code>,<code>3046487</code>), (<code>28</code>,<code>0</code>)).<ul>\n<li>The times for which reward can be obtained are <var>3,4,\\cdots,27</var>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Line 10: The jobs that the job with ID=3 depends on. This completes the description of the job with ID=3.<ul>\n<li>The number of jobs this job depends on is <code>2</code>(<var>N^{\\text{depend}}_3=2</var>).</li>\n<li>This job depends on the jobs with ID=<code>2</code>,<code>1</code>(<var>\\text{id}^\\text{depend}_{3,1}=2,\\text{id}^\\text{depend}_{3,2}=1</var>).</li>\n</ul>\n</li>\n<li>Line 11: Start of description for job with ID=4.<ul>\n<li>The job ID is <code>4</code> (<var>\\text{ID}^{\\text{job}}_4=4</var>).</li>\n<li>The job type is <code>2</code> (<var>\\text{Type}_4=2</var>).</li>\n<li>The number of tasks required to complete this job is <code>1356</code> (<var>N^{\\text{task}}_4=1356</var>).</li>\n<li>The job is located at vertex <code>13</code> (<var>v^{\\text{job}}_4=13</var>).</li>\n</ul>\n</li>\n<li>Line 12: Definition of reward function for the job with ID=4.<ul>\n<li>There are <code>15</code> control points (<var>N^{\\text{reward}}_4=15</var>).</li>\n<li>The list of control points is: ((<code>3</code>,<code>0</code>), (<code>4</code>,<code>2016014</code>), (<code>6</code>,<code>2138183</code>), (<code>8</code>,<code>1711305</code>), (<code>10</code>,<code>2020927</code>), (<code>12</code>,<code>2030686</code>), (<code>14</code>,<code>1203758</code>), (<code>16</code>,<code>973133</code>), (<code>18</code>,<code>1102291</code>), (<code>20</code>,<code>954221</code>), (<code>22</code>,<code>725869</code>), (<code>24</code>,<code>700613</code>), (<code>26</code>,<code>604824</code>), (<code>28</code>,<code>742452</code>), (<code>29</code>,<code>0</code>)).<ul>\n<li>The times for which reward can be obtained are <var>4,5,\\cdots,28</var>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Line 13: The jobs that the job with ID=4 depends on. This completes the description of the job with ID=4.<ul>\n<li>The number of jobs this job depends on is <code>0</code>(<var>N^{\\text{depend}}_4=0</var>).</li>\n<li>(Since the number of jobs it depends on is <code>0</code>, no job IDs are given.)</li>\n</ul>\n</li>\n<li>Line 14: Start of description for job with ID=5.<ul>\n<li>The job ID is <code>5</code> (<var>\\text{ID}^{\\text{job}}_5=5</var>).</li>\n<li>The job type is <code>1</code> (<var>\\text{Type}_5=1</var>).</li>\n<li>The number of tasks required to complete this job is <code>1225</code> (<var>N^{\\text{task}}_5=1225</var>).</li>\n<li>The job is located at vertex <code>10</code> (<var>v^{\\text{job}}_5=10</var>).</li>\n</ul>\n</li>\n<li>Line 15: Definition of reward function for the job with ID=5.<ul>\n<li>There are <code>15</code> control points (<var>N^{\\text{reward}}_5=15</var>).</li>\n<li>The list of control points is: ((<code>5</code>,<code>0</code>), (<code>6</code>,<code>1256998</code>), (<code>8</code>,<code>1096984</code>), (<code>10</code>,<code>820728</code>), (<code>12</code>,<code>818626</code>), (<code>14</code>,<code>1089776</code>), (<code>16</code>,<code>1014615</code>), (<code>18</code>,<code>1062766</code>), (<code>20</code>,<code>900374</code>), (<code>22</code>,<code>1190773</code>), (<code>24</code>,<code>1050656</code>), (<code>26</code>,<code>1876847</code>), (<code>28</code>,<code>1530806</code>), (<code>30</code>,<code>952050</code>), (<code>31</code>,<code>0</code>)).<ul>\n<li>The times for which reward can be obtained are <var>6,7,\\cdots,30</var>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Line 16: The jobs that the job with ID=5 depends on. This completes the description of the job with ID=5.<ul>\n<li>The number of jobs this job depends on is <code>1</code>(<var>N^{\\text{depend}}_5=1</var>).</li>\n<li>This job depends on the job with ID=<code>4</code>(<var>\\text{id}^\\text{depend}_{5,1}=4</var>).</li>\n</ul>\n</li>\n<li>Line 17: Start of description for job with ID=6.<ul>\n<li>The job ID is <code>6</code> (<var>\\text{ID}^{\\text{job}}_6=6</var>).</li>\n<li>The job type is <code>3</code> (<var>\\text{Type}_6=3</var>).</li>\n<li>The number of tasks required to complete this job is <code>1362</code> (<var>N^{\\text{task}}_6=1362</var>).</li>\n<li>The job is located at vertex <code>7</code> (<var>v^{\\text{job}}_6=7</var>).</li>\n</ul>\n</li>\n<li>Line 18: Definition of reward function for the job with ID=6.<ul>\n<li>There are <code>15</code> control points (<var>N^{\\text{reward}}_6=15</var>).</li>\n<li>The list of control points is: ((<code>0</code>,<code>0</code>), (<code>1</code>,<code>608492</code>), (<code>3</code>,<code>960135</code>), (<code>5</code>,<code>961858</code>), (<code>7</code>,<code>998014</code>), (<code>9</code>,<code>1101543</code>), (<code>11</code>,<code>1288452</code>), (<code>13</code>,<code>1825126</code>), (<code>15</code>,<code>1145645</code>), (<code>17</code>,<code>1057616</code>), (<code>19</code>,<code>1312087</code>), (<code>21</code>,<code>991237</code>), (<code>23</code>,<code>1123573</code>), (<code>25</code>,<code>882743</code>), (<code>26</code>,<code>0</code>)).<ul>\n<li>The times for which reward can be obtained are <var>1,2,\\cdots,25</var>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Line 19: The jobs that the job with ID=6 depends on. This completes the description of the job with ID=6.<ul>\n<li>The number of jobs this job depends on is <code>2</code>(<var>N^{\\text{depend}}_6=2</var>).</li>\n<li>This job depends on the jobs with ID=<code>7</code>,<code>5</code>(<var>\\text{id}^\\text{depend}_{6,1}=7,\\text{id}^\\text{depend}_{6,2}=5</var>).</li>\n</ul>\n</li>\n<li>Line 20: Start of description for job with ID=7.<ul>\n<li>The job ID is <code>7</code> (<var>\\text{ID}^{\\text{job}}_7=7</var>).</li>\n<li>The job type is <code>1</code> (<var>\\text{Type}_7=1</var>).</li>\n<li>The number of tasks required to complete this job is <code>1307</code> (<var>N^{\\text{task}}_7=1307</var>).</li>\n<li>The job is located at vertex <code>1</code> (<var>v^{\\text{job}}_7=1</var>).</li>\n</ul>\n</li>\n<li>Line 21: Definition of reward function for the job with ID=7.<ul>\n<li>There are <code>15</code> control points (<var>N^{\\text{reward}}_7=15</var>).</li>\n<li>The list of control points is: ((<code>5</code>,<code>0</code>), (<code>6</code>,<code>299791</code>), (<code>8</code>,<code>303708</code>), (<code>10</code>,<code>533803</code>), (<code>12</code>,<code>879014</code>), (<code>14</code>,<code>828842</code>), (<code>16</code>,<code>946449</code>), (<code>18</code>,<code>991630</code>), (<code>20</code>,<code>1551550</code>), (<code>22</code>,<code>1499622</code>), (<code>24</code>,<code>1793967</code>), (<code>26</code>,<code>1425447</code>), (<code>28</code>,<code>1732069</code>), (<code>30</code>,<code>1207139</code>), (<code>31</code>,<code>0</code>)).<ul>\n<li>The times for which reward can be obtained are <var>6,7,\\cdots,30</var>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Line 22(<var>=1+3\\times N_{\\text{job}}</var>): The jobs that the job with ID=7 depends on. This completes the description of the job with ID=7.<ul>\n<li>The number of jobs this job depends on is <code>0</code>(<var>N^{\\text{depend}}_7=0</var>).</li>\n<li>(Since the number of jobs it depends on is <code>0</code>, no job IDs are given.)\n</li></ul></li></ul></details>\n\n\n\n<p></p><details><summary>Full Input 1 example</summary><p></p>\n<div class=\"codehilite\"><pre><span></span>300\n14 19\n1 7 1\n1 2 1\n2 9 1\n2 3 1\n3 5 1\n3 7 1\n3 6 1\n4 13 2\n4 10 2\n4 6 1\n4 5 1\n6 8 1\n7 8 1\n8 14 2\n9 11 2\n10 12 2\n10 11 2\n12 13 2\n13 14 2\n5\n6 100 3 1 2 3\n13 59 1 3\n10 55 2 2 3\n9 47 3 1 2 3\n9 89 1 2\n7\n1 2 625 8\n15 1 0 2 1581724 4 1733369 6 1561173 8 1596919 10 1090320 12 1031662 14 929778 16 1095326 18 665006 20 757205 22 567001 24 600233 26 576475 27 0\n0\n2 3 993 14\n15 2 0 3 1147309 5 1186255 7 1098060 9 836498 11 872163 13 1071865 15 1408708 17 2135395 19 1517111 21 1079036 23 740032 25 904947 27 976790 28 0\n1 1\n3 2 1310 14\n15 2 0 3 992842 5 818304 7 676647 9 859283 11 871992 13 859663 15 1776296 17 3025691 19 1304819 21 1606358 23 3469915 25 2801513 27 3046487 28 0\n2 2 1\n4 2 1356 13\n15 3 0 4 2016014 6 2138183 8 1711305 10 2020927 12 2030686 14 1203758 16 973133 18 1102291 20 954221 22 725869 24 700613 26 604824 28 742452 29 0\n0\n5 1 1225 10\n15 5 0 6 1256998 8 1096984 10 820728 12 818626 14 1089776 16 1014615 18 1062766 20 900374 22 1190773 24 1050656 26 1876847 28 1530806 30 952050 31 0\n1 4\n6 3 1362 7\n15 0 0 1 608492 3 960135 5 961858 7 998014 9 1101543 11 1288452 13 1825126 15 1145645 17 1057616 19 1312087 21 991237 23 1123573 25 882743 26 0\n2 7 5\n7 1 1307 1\n15 5 0 6 299791 8 303708 10 533803 12 879014 14 828842 16 946449 18 991630 20 1551550 22 1499622 24 1793967 26 1425447 28 1732069 30 1207139 31 0\n0\n</pre></div>\n\n\n<ul>\n<li>Line 1: See <a href=\"#work-time-frame-en\">Work time frame</a></li>\n<li>Lines 2-21: See <a href=\"#geo-data-en\">Geographic data</a></li>\n<li>Lines 22-27: See <a href=\"#worker-en\">Workers</a></li>\n<li>Lines 28-46: See <a href=\"#job-en\">Jobs</a>\n</li></ul></details>\n\n<p><a id=\"output1-en\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output 1</h3>\n<p>Given the data described above, the contestant must produce output for all workers in each time interval in the following format.</p>\n<div class=\"codehilite\"><pre><span></span><var>\n\\text{Actions}_1\\\\\n\\vdots\\\\\n\\text{Actions}_{T_\\text{max}}\n</var>\n</pre></div>\n\n\n<p>(Insert a line-break after the last line)</p>\n<p>Here, <var>\\text{Actions}_i</var> represents the actions for all workers at time <var>i</var>, and is represented as follows, given that <var>\\text{action}^i_j</var> represents the action of worker <var>j</var> at time <var>i</var>.</p>\n<div class=\"codehilite\"><pre><span></span><var>\n\\text{action}^i_1\\\\\n\\text{action}^i_2\\\\\n\\vdots\\\\\n\\text{action}^i_{N_{\\text{worker}}}\n</var>\n</pre></div>\n\n\n<p><a id=\"worker-action-en\" class=\"anchor\"></a></p>\n<h4>Worker Actions</h4>\n<ul>\n<li><code>stay</code>:Neither move, nor perform a job, staying at the current location.</li>\n<li><code>move w</code>:Move a distance of <var>1</var> along the shortest path from the current position to the vertex which corresponds to vertex index <code>w</code>. If the following constraints are not satisfied, it will result in <code>WA</code>(Wrong Answer). <ul>\n<li>A vertex corresponding to vertex index <code>w</code> must exist.</li>\n<li>The current position must not be vertex <code>w</code>.</li>\n</ul>\n</li>\n<li><code>execute i a</code>:Perform the task for the job with ID=<code>i</code>, <code>a</code> times. If the following constraints are not satisfied, it will result in <code>WA</code>(Wrong Answer).<ul>\n<li>The worker’s current position must be the same as the location of the job with ID=<code>i</code>.</li>\n<li>The type of the job with ID=<code>i</code> must be included in the job types that the worker can perform.</li>\n<li><code>a</code> must be an integer greater than or equal to 1.</li>\n<li><code>a</code> must not exceed the amount of remaining tasks for the job with ID=<code>i</code>. </li>\n<li><code>a</code> must not exceed <var>L^\\text{max}_i</var>, the upper limit for number of tasks the worker can perform.</li>\n<li>The jobs on which the job with ID=<code>i</code> depends must have been completed.</li>\n<li>The reward value must be positive.</li>\n</ul>\n</li>\n</ul>\n<p>For <code>move w</code>, if there are 2 or more different shortest paths between the current location and vertex <code>w</code>, how to select one is not specified. In such cases, the contestant can choose the desired path by repeatedly selecting and moving to points along the path.</p>\n<p>Specifying an <var>\\text{action}</var> string that does not match any of the patterns above will result in <code>WA</code>(Wrong Answer).</p>\n<p>Also, if there exist some jobs whose total task amount processed exceeds its No. of tasks to complete <var>N^{\\text{task}}_i</var>, it will result in <code>WA</code> or <code>RE</code>.</p>\n<ul>\n<li><strong>Output</strong><ul>\n<li>For the following <var>N_\\text{worker}\\times T_\\text{max}</var> lines, output the actions, <var>\\text{action}^i_j</var>, for each worker, where <var>1 \\leq i \\leq T_\\text{max}</var> and <var>1 \\leq j \\leq N_\\text{worker}</var>. </li>\n</ul>\n</li>\n</ul>\n<p></p><details><summary>Output example</summary>\nThe following is an example with <var>T_\\text{max}=30,N_\\text{worker}=5</var>:<p></p>\n<div class=\"codehilite\"><pre><span></span>move 8\nstay\nmove 13\nstay\nstay\nexecute 1 100\nstay\nmove 13\nstay\nstay\nexecute 1 100\nstay\nmove 13\nmove 1\nstay\nexecute 1 100\nstay\nmove 13\nmove 1\nstay\nexecute 1 100\nstay\nmove 13\nmove 1\nstay\nexecute 1 100\nstay\nmove 13\nexecute 7 47\nstay\nexecute 1 100\nstay\nexecute 4 55\nexecute 7 47\nstay\nexecute 1 25\nmove 14\nexecute 4 55\nexecute 7 47\nstay\nstay\nmove 14\nexecute 4 55\nexecute 7 47\nstay\nstay\nmove 14\nexecute 4 55\nexecute 7 47\nstay\nstay\nmove 14\nexecute 4 55\nexecute 7 47\nstay\nstay\nmove 14\nexecute 4 55\nexecute 7 47\nstay\nstay\nmove 14\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nexecute 2 59\nexecute 4 55\nexecute 7 47\nstay\nstay\nstay\nexecute 4 55\nexecute 7 47\nstay\nstay\nstay\nstay\nexecute 7 47\nstay\nstay\nstay\nstay\nexecute 7 47\nstay\n</pre></div>\n\n\n<ul>\n<li>Lines 1-5: Specify the actions for all workers at time <var>1</var>. <ul>\n<li>Line 1:This worker (ID=1) moves from its current position toward vertex <code>8</code>. </li>\n<li>Line 2:This worker (ID=2) stays where it is without performing a job or moving.</li>\n<li>Line 3:This worker (ID=3) moves from its current position toward vertex <code>13</code>. </li>\n<li>Line 4:This worker (ID=4) stays where it is without performing a job or moving.</li>\n<li>Line 5:This worker (ID=5) stays where it is without performing a job or moving.</li>\n</ul>\n</li>\n<li>Lines 6-10: Specify the actions for all workers at time <var>2</var>. <ul>\n<li>Line 6:This worker (ID=1) performs the task for the job with ID=<code>1</code> at its current location <code>100</code> times. </li>\n<li>Line 7:This worker (ID=2) stays where it is without performing a job or moving.</li>\n<li>Line 8:This worker (ID=3) moves from its current position toward vertex <code>13</code>. </li>\n<li>Line 9:This worker (ID=4) stays where it is without performing a job or moving.</li>\n<li>Line 10:This worker (ID=5) stays where it is without performing a job or moving.</li>\n</ul>\n</li>\n<li>Lines 11-145 omitted.</li>\n<li>Lines 146-150: Specify the actions for all workers at time <var>30</var>. <ul>\n<li>Line 146:This worker (ID=1) stays where it is without performing a job or moving.</li>\n<li>Line 147:This worker (ID=2) stays where it is without performing a job or moving.</li>\n<li>Line 148:This worker (ID=3) stays where it is without performing a job or moving.</li>\n<li>Line 149:This worker (ID=4) performs the task for the job with ID=<code>7</code> at its current location <code>47</code> times. </li>\n<li>Line 150:This worker (ID=5) stays where it is without performing a job or moving.\n</li></ul></li></ul></details>\n\n\n\n<p><a id=\"input2-en\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<hr>\n\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input 2 (Scoring)</h3>\n<p>If <a href=\"#output1-en\">Output 1</a> is valid, input of score <var>S</var> is given on the standard input in the format below.</p>\n<div class=\"codehilite\"><pre><span></span><var>\nS\n</var>\n</pre></div>\n\n\n<p>If the contestant does not read this value from standard input, it may result in <code>TLE</code>.</p>\n<p>For details on ranking method, see <a href=\"#ranking-method-en\">Ranking method</a></p>\n<p><a id=\"scoring-method-en\" class=\"anchor\"></a></p>\n<h4>Scoring Method</h4>\n<p>Score, <var>S</var> is determined by the following formula.\n</p><p style=\"text-align:center;\">\n<var>\n\\begin{aligned}\nS=\\left\\lfloor\\sum_{j\\in J_\\text{finished}}\\sum_{w \\in W}\\sum_{t=1}^{T_\\text{max}}a^w_j(t)r_j(t)\\right\\rfloor\n\\end{aligned}\n</var>\n</p><p></p>\n<ul>\n<li>Set of completed jobs:<var>J_\\text{finished}</var></li>\n<li>Set of all workers:<var>W</var></li>\n<li>Number of job <var>j</var> tasks performed by worker <var>w</var> at time <var>t</var>:<var>a^w_j(t)</var></li>\n<li>The per-task reward for job <var>j</var> at time <var>t</var>:<var>r_j(t)</var></li>\n</ul>\n<p>Note that <var>\\left\\lfloor x \\right\\rfloor</var> represents the floor function, which returns the greatest integer less than or equal to <var>x</var>.</p>\n<p><a id=\"testcase-generation-rules-en\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Test Case Generation Rules</h3>\n<p></p><details><summary>Geographical data (graph)</summary><p></p>\n<ul>\n<li>\n<p>Terminology</p>\n<ul>\n<li>Here, we use the term <strong>partition</strong> for the operation of partitioning a rectangular area, <var>[x_0,x_1]\\times[y_0,y_1]\\,\\,(x_0&lt;x_1,y_0&lt;y_1)</var>, in half both vertically and horizontally, into four smaller rectangles.</li>\n<li>Specifically, the operation divides the area <var>[x_0,x_1]\\times[y_0,y_1]</var> into the following four pieces.<ul>\n<li><var>[x_0,(x_1+x_0)/2]\\times[y_0,(y_0+y_1)/2]</var></li>\n<li><var>[x_0,(x_1+x_0)/2]\\times[(y_0+y_1)/2,y_1]</var></li>\n<li><var>[(x_1+x_0)/2,x_1]\\times[y_0,(y_0+y_1)/2]</var></li>\n<li><var>[(x_1+x_0)/2,x_1]\\times[(y_0+y_1)/2,y_1]</var></li>\n</ul>\n</li>\n<li>We also define a function, <var>\\text{Split}(R)</var>, which performs this operation (giving the above set of regions from a received rectangular region).</li>\n</ul>\n</li>\n<li>\n<p>Parameters</p>\n<ul>\n<li>Rectangular region size:<var>L&gt;0</var></li>\n<li>Maximum partition depth:<var>d_\\text{max} \\in \\mathbb{Z}_{\\geq 0}</var></li>\n<li>(Max) number of rectangles:<var>M</var>(integer <var>0</var> or greater, <var>(4^{d_\\text{max}+1}-1)/3</var> or less)</li>\n<li>Distance minimum scale:<var>s&gt;0</var></li>\n<li>Cut area ratio:<var>C\\in (0,1]</var></li>\n</ul>\n</li>\n<li>\n<p><strong>Generation procedure 1 </strong>(generate graph)</p>\n<ol>\n<li>Prepare a set of rectangular regions, <var>U=\\{\\}</var>.</li>\n<li>Add rectangular region <var>R=[0,L]\\times[0,L]</var> to <var>U</var>. </li>\n<li>If <var>d_\\text{max}=0</var>, proceed to <code>8.</code></li>\n<li>Select a rectangle from <var>U</var> at random and call that rectangle <var>r</var>.</li>\n<li>If the area of <var>r</var> is <var>L^2/4^{d_\\text{max}}</var>, return to <code>4.</code></li>\n<li>Add all elements from <var>\\text{Split}(R)</var> to <var>U</var>. <ul>\n<li>If these elements are already in <var>U</var>, <var>U</var> does not change even if they are added. </li>\n</ul>\n</li>\n<li>If <var>|U| &gt; M</var>is satisfied, proceed to <code>8.</code> If not, return to <code>4.</code></li>\n<li>Create a weighted, non-directional graph, <var>G=(V,E),W:E\\rightarrow \\mathbb{R}_{&gt; 0}</var>, from set <var>A</var>, the union of edges of all rectangles in <var>U</var>.<ul>\n<li>The set <var>V</var> of vertices in the graph consists of all points where line segments intersect in set <var>A</var>, the union of all edges.  </li>\n<li>The set of edges <var>E</var> in the graph consists of all pairs of vertices <var>\\{a,b\\}</var>, where <var>a\\neq b</var> and it is possible to reach <var>b</var> from <var>a</var> on set <var>A</var>, the union of all edges, without passing through any other vertex. </li>\n<li>The weight <var>W</var> is derived from the Euclidean distances between the points.</li>\n</ul>\n</li>\n<li>This graph, <var>G=(V,E)</var> (with weight <var>W</var>), is used to generate the geographical data.</li>\n</ol>\n</li>\n</ul>\n<p>(Reference:Eisenstat, D., Random road networks: the quadtree model, Proceeding of the 8th Workshop on Analytic Algorithms and Combinatorics (ANALCO), pp.76-84, 2011 (DOI:<a href=\"https://doi.org/10.1137/1.9781611973013.9\">https://doi.org/10.1137/1.9781611973013.9</a>))</p>\n<ul>\n<li><strong>Generation procedure 2 </strong>(generate elevations)<ol>\n<li>Prepare a square region, <var>R=[0,1024]\\times[0,1024]</var>.</li>\n<li>Divide <var>R</var> by <var>128</var> in both <var>x</var> and <var>y</var> directions (creating <var>128\\times128</var> square regions of size <var>8\\times8</var>). </li>\n<li>Randomly select <var>20</var> of these square regions from <var>R</var> and call the union of them <var>A</var>.</li>\n<li>Again, randomly select <var>20</var> of these square regions from <var>R</var> and call the union of them <var>B</var>.</li>\n<li>Solve the following partial differential equation discretized by the above dividing operation <code>2</code> to time <var>t=100000</var> (in other words, compute <var>u(100000,x,y)</var>):\n<p style=\"text-align:center;\">\n<var>\\displaystyle\n\\frac{\\partial u}{\\partial t}=\\Delta u-b(x,y)u+a(x,y)\n</var>\n</p>\nThe initial value at time <var>t=0</var> is <var>u(0,x,y)=u_0(x,y)\\equiv 0</var>, and we use Neumann boundary conditions. <var>a(x,y)</var> and <var>b(x,y)</var> are defined as follows:<br>\n<var>a(x,y)=\\begin{cases}\n1/8^2, &amp; \\text{if}\\ (x,y) \\in A, \\\\\n0, &amp; \\text{otherwise},\n\\end{cases}</var><br><var>b(x,y)=\\begin{cases}\n1/8^2, &amp; \\text{if}\\ (x,y) \\in B, \\\\\n0, &amp; \\text{otherwise}.\n\\end{cases}</var><br></li>\n<li>Normalize <var>u(100000,x,y)</var> to the range <var>[0,1]</var>, and use it as the elevation, <var>e(x,y)</var>.</li>\n</ol>\n</li>\n<li>\n<p><strong>Generation procedure 3</strong>(cut the graph, distance scaling)</p>\n<ol>\n<li>\n<p>Match the elevation data <var>e(x,y)</var> generated in procedure 2 to the size of the graph space, <var>[0,L]\\times[0,L]</var>.\nIn other words, define space-scaled elevation <var>\\tilde e(x,y)</var>, as <var>\\tilde e(x,y)= e(L\\times x/1024,L\\times y/1024)</var>.</p>\n</li>\n<li>\n<p>For function <var>H(z)=\\{(x,y) \\in [0,L]\\times[0,L]|\\tilde e(x,y)&gt;z\\}</var>, which returns the parts where <var>\\tilde e(x,y)</var> is larger than real value <var>z</var>, call the largest value of <var>z</var> for which the area of <var>H(z)</var> is <var>C\\times L^2</var> or greater, <var>h</var>. </p>\n</li>\n<li>For the set of graph edges <var>E</var> generated in generation procedure 1, delete all edges from <var>E</var> where the two vertices on the both ends are below <var>h</var>.</li>\n<li>Let the graph <var>G'=(V',E')</var> be the largest connected component of graph <var>G=(V,E)</var>.</li>\n<li>Define weight <var>W':E' \\rightarrow \\mathbb{R}_{&gt; 0}:</var> as follows:<var>W'(e)= s\\times W(e)/\\min_{e' \\in E'}W(e')</var></li>\n<li>Use the graph <var>G'=(V',E')</var> (with weight <var>W'</var>) as the geographical data.\n</li></ol></li></ul></details>\n\n\n\n<p></p><details><summary>Segmented linear function representing reward</summary>\nFor this problem, the function representing reward for each time (more accurately, the reward value per task) is expressed using linear interpolation between a finite number of points. We refer to these points as control points, and the rules for generating this finite number of control points are as follows.<p></p>\n<ul>\n<li>Parameters<ul>\n<li>Length of section with positive reward:<var>L\\geq 1</var></li>\n<li>Length for partitioning the interval:<var>l\\geq 1</var></li>\n<li>Reward standard value:<var>s &gt; 0</var></li>\n<li>Standard deviation used when generating control point value:<var>\\sigma' &gt; 0</var></li>\n<li>Reward upper limit:<var>M &gt; 0</var></li>\n<li>Reward lower limit:<var>m &gt; 0</var></li>\n</ul>\n</li>\n</ul>\n<p><var>~</var></p>\n<ol>\n<li>Let the reward start time be <var>b=\\text{randint}(1,T_\\text{max}-L)</var>, the reward end time be <var>e=b+L</var>, and the number of segments be <var>d=\\text{round}(L/l)</var>. Here, <var>\\text{randint}(m,n)</var> is a function that uniformly selects a random integer between m and n inclusive, and <var>\\text{round}(x)</var> is a function that returns the value <var>x</var> rounded to the nearest integer. </li>\n<li>Generate <var>d+1</var> independent random values which follow a log-normal distribution with <var>\\mu=0</var> and <var>\\sigma=\\sigma'</var>, and let them be <var>\\{c_i\\}_{i=1}^{d+1}</var>. </li>\n<li>Define <var>\\{v_i\\}_{i=1}^{d+1}</var> by <var>v_i=\\prod_{j=1}^{i}c_j</var>. </li>\n<li>Let <var>B=s\\sqrt{(d+1)/\\sum_{i=1}^{d+1}v_i^2}</var>, and define <var>\\{r_i\\}_{i=1}^{d+1}</var> by <var>r_i=\\text{round}(Bv_i)</var>.</li>\n<li>If there exists <var>i</var> such that <var>r_i &gt; M</var> or <var>r_i &lt; m</var>, return to <code>2.</code></li>\n<li>Let <var>t_i=\\text{round}(b+(i-1)L/d)</var>, and use the list of time and reward value pairs <var>((b-1,0),(t_1,r_1),(t_2,r_2),\\cdots,(t_{d+1},r_{d+1}),(e+1,0))</var> as the list of control points. \n</li></ol></details>\n\n<p>If not otherwise specified, uniform random distributions are used.</p>\n<p><a id=\"ranking-method-en\" class=\"anchor\"></a></p>\n</section>\n</div>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Ranking method</h3>\n<h4>Provisional test</h4>\n<p>For the provisional test, <var>50</var> test cases are randomly selected from the ones used for the system test and executed. However, only one test case is selected for one parameter pattern.</p>\n<p>The evaluation method is the same as for the system test. See the System test section below.</p>\n<style>\n.testpar{\nmargin:auto;\nborder-collapse:unset;\n}\n.testpar td,.testpar th{\npadding:5px;\n}\n</style>\n\n<h4>System test</h4>\n<p>For the system test, some of the following characteristic parameters are given to satisfy the properties listed in the Remarks column:</p>\n<table border=\"1\" class=\"testpar\">\n<thead>\n<tr>\n<th>Factor</th><th>Corresponding parameter</th><th>No. of types</th><th>Remarks</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Length of work time frame</td><td><var>T_\\text{max}</var></td><td>3</td><td>short(<var>300</var>), medium(<var>700</var>), long(<var>1000</var>)</td>\n</tr><tr>\n<td>Space(Geographical data) size</td><td><var>d_\\text{max}</var> in the Test Case Generation Rules <br>for Geographical data</td><td>3</td><td>small(<var>5</var>), medium(<var>6</var>), large(<var>7</var>)</td>\n</tr><tr>\n<td>Number of workers</td><td><var>N_{\\text{worker}}</var></td><td>4</td><td>single(<var>1</var>), few(<var>2</var>), moderate(<var>5</var>), many(<var>10</var>)</td>\n</tr><tr>\n<td>Number of all jobs</td><td><var>N_{\\text{job}}</var></td><td>3</td><td>few(<var>250 \\leq N_{\\text{job}} \\leq 253 </var>), moderate(<var>500 \\leq N_{\\text{job}} \\leq 503</var>), many(<var>1000 \\leq N_{\\text{job}} \\leq 1003</var>)</td>\n</tr><tr>\n<td></td><td></td><td>Total:108 patterns</td><td>40 test cases are generated for each pattern</td>\n</tr>\n</tbody>\n</table>\n\n<p>For each pattern of these, <var>40</var> test cases with different seed values are generated, for a total of <var>3 \\times 3 \\times4\\times 3 \\times 40 = 4320</var> test cases.</p>\n<p>This is only pattern generation of the parameters in the above table. Apart from this process, data such as geographic information, jobs, etc. are generated for each test case.</p>\n<p>Relative evaluation system is used for rankings. For each test case, we compute the relative score <var>\\text{round}(10^{9} \\times \\frac{\\text{YOUR\\_SCORE}}{\\text{MAX\\_SCORE}})</var>, where <var>\\text{YOUR\\_SCORE}</var> is your <a href=\"#input2-en\">Score</a> and <var>\\text{MAX\\_SCORE}</var> is the highest score among all competitors obtained on that test case. The score of the submission is the sum of the relative scores.</p>\n<p>If your submission produces invalid output or exceeds the time limit for some test cases, only the score for those test cases will be zero.</p>\n<p>The system test will be performed only for <font color=\"red\"><strong>the last submission which received a result other than <code>CE</code></strong></font>. Be careful not to make a mistake in the final submission.</p>\n<h4>About Relative Evaluation System</h4>\n<p>In both the provisional/system test, the standings will be calculated using only the last submission which received a result other than <code>CE</code> . Only the last submissions are used to calculate the highest score among all competitors for each test case in calculating the relative scores.</p>\n<p>The scores shown in the standings are relative, and whenever a new submission arrives, all relative scores are recalculated. On the other hand, the score for each submission shown on the submissions page is an absolute score obtained by summing up the scores for each test case, and the relative scores are not shown. In order to know the relative score of submission other than the latest one in the current standings, you need to resubmit it. If your submission produces invalid output or exceeds the time limit for some test cases, the absolute score shown in the submissions page becomes 0, but the standings show the sum of the relative scores for the test cases that were answered correctly.</p>\n<p><a id=\"constraints-en\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>Character encoding is UTF-8 (although only ASCII characters are used).</li>\n<li>End-of-line code is <code>LF</code>(<code>0x0A</code>).</li>\n<li>Delimiter is the half-width space (<code>0x20</code>)</li>\n<li>Trailing delimiter characters are permitted.</li>\n</ul>\n<p>For decimal values, <strong>[Decimal]</strong> is appended.</p>\n<h4>Input 1</h4>\n<ul>\n<li><var>300 \\leq T_\\text{max} \\leq 1000</var>  and <var>T_\\text{max}</var> is a multiple of <var>100</var></li>\n<li><var>150\\leq N_V\\leq 2000</var></li>\n<li><var>4N_V/3\\leq N_E\\leq 2 N_V</var></li>\n<li><var>1\\leq u_i,v_i\\leq N_V, u_i \\neq v_i (1 \\leq i \\leq N_E)</var></li>\n<li><var>1\\leq d_i \\leq 128 (1 \\leq i \\leq N_E)</var> </li>\n<li>The graph given is guaranteed to be connected and not contain self-loops or multiple edges.</li>\n<li><var> 1 \\leq N_\\text{worker} \\leq 10</var></li>\n<li><var>1\\leq v^\\text{init}_i \\leq N_V (1 \\leq i \\leq N_\\text{worker})</var></li>\n<li><var>30\\leq L^\\text{max}_i\\leq 100 (1 \\leq i \\leq N_\\text{worker})</var></li>\n<li><var>1 \\leq N^\\text{JobType}_i \\leq 3 (1 \\leq i \\leq N_\\text{worker})</var></li>\n<li><var>1\\leq \\text{Type}^i_j\\leq 3 (1 \\leq i \\leq N_\\text{worker},1 \\leq j \\leq N^\\text{JobType}_i)</var></li>\n<li><var>250 \\leq N_\\text{job} \\leq 1003</var></li>\n<li><var>\\text{ID}^\\text{job}_i=i (1 \\leq i \\leq N_\\text{job})</var></li>\n<li><var>1\\leq \\text{Type}_i\\leq 3</var> and <var>\\text{Type}_i</var> is included in the processable job types of <var>1</var> or more workers.  <var>(1 \\leq i \\leq N_\\text{job})</var></li>\n<li><var>500 \\leq N^\\text{task}_i \\leq 1500(1 \\leq i \\leq N_\\text{job})</var></li>\n<li><var>1 \\leq v^\\text{job}_i \\leq N_V (1 \\leq i \\leq N_\\text{job})</var></li>\n<li><var>1 \\leq N^\\text{reward}_i \\leq 43 (1 \\leq i \\leq N_\\text{job})</var> </li>\n<li><var>0\\leq t^\\text{reward}_{i,1}&lt;t^\\text{reward}_{i,2}&lt;\\cdots&lt;t^\\text{reward}_{i,N^\\text{reward}_i}\\leq T_\\text{max}+1(1 \\leq i \\leq N_\\text{job})</var></li>\n<li><var>y^\\text{reward}_{i,1}=y^\\text{reward}_{i,N^\\text{reward}_i}=0,1 \\leq y^\\text{reward}_{i,j} \\leq 10^7 (1 \\leq i \\leq N_\\text{job},2 \\leq j \\leq N^\\text{reward}_i-1)</var></li>\n<li><var>0\\leq N^\\text{depend}_i\\leq 3(1 \\leq i \\leq N_\\text{job})</var></li>\n<li><var>1 \\leq \\text{id}^\\text{depend}_{i,j} \\leq N_\\text{job},\\text{id}^\\text{depend}_{i,j} \\neq \\text{id}^\\text{depend}_{i,k},\\text{id}^\\text{depend}_{i,j}\\neq i (1 \\leq i \\leq N_\\text{job},1\\leq j \\leq N^\\text{depend}_i,1\\leq k\\leq N^\\text{depend}_i,j\\neq k)</var></li>\n<li>Job dependency relationships can be viewed as a directed acyclic graph (which will not necessarily be connected) with each job as a vertex and dependencies between jobs as directed edges, and each connected component having size of <var>4</var> or less. </li>\n</ul>\n<h4>Input 2 (Scoring)</h4>\n<ul>\n<li><var>0 \\leq S \\leq 2^{63}-1</var></li>\n</ul>\n<h4>Geographical data</h4>\n<ul>\n<li><var>L=2048</var></li>\n<li><var>d_\\text{max}\\in\\{5,6,7\\}</var></li>\n<li><var>s=1</var></li>\n<li><var>0.3 \\leq C &lt; 0.4</var> <strong>[Decimal]</strong></li>\n<li><var>M=\\text{round}(0.45(4^{d_\\text{max}+1}-1)/(3\\times 2^{d_\\text{max}-5}))</var></li>\n</ul>\n<h4>Segmented linear reward function</h4>\n<ul>\n<li><var> 100 \\leq L \\leq T_\\text{max}</var></li>\n<li><var>l = 25</var></li>\n<li><var> 10^6 \\leq s \\leq 2\\times 10^6</var></li>\n<li><var> 0.3 \\leq \\sigma' &lt; 0.38 </var>  <strong>[Decimal]</strong></li>\n<li><var> M = 10^7 </var></li>\n<li><var> m = 1 </var></li>\n</ul>\n<p><a id=\"toolkit-en\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Toolkit</h3>\n<p>A toolkit for this problem can be downloaded from <a href=\"https://img.atcoder.jp/hokudai-hitachi2022/f3c44ba9531996b.zip\">here</a>. It includes the following:</p>\n<ul>\n<li>Judge program (for both A, B)</li>\n<li>Test case generator (both A and B)</li>\n<li>Sample codes (In C++, one each for problems A and B)</li>\n<li>Visualizer</li>\n</ul>\n<p><a id=\"visualizer-en\" class=\"anchor\"></a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Visualizer</h3>\n<p>Log files (in JSON format) generated from the judge program in the toolkit can be used to visualize the results.</p>\n<p>The visualizer is included in the toolkit, but is also available <a href=\"https://img.atcoder.jp/hokudai-hitachi2022/wVw8B4mE02x8rJNU.html?en\">here</a> on the server.</p>\n<p>For details, please read the README in the toolkit and the description at the bottom of the visualizer page.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/hokudai-hitachi2022/tasks/hokudai_hitachi2022_a"}