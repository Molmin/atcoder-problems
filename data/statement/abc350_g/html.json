{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>600</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><strong>特殊な入力形式に注意してください。 また、メモリ制限が通常より小さいことに注意してください。</strong></p>\n<p>頂点 <var>1,2,\\dots,N</var> の <var>N</var> 頂点からなる無向グラフがあり、最初辺はありません。<br>\nこのグラフに対して、以下の <var>Q</var> 個のクエリを処理してください。  </p>\n<p><br></p>\n<pre>1 <var>u</var> <var>v</var>\n</pre>\n<p>タイプ <var>1</var> : 頂点 <var>u</var> と頂点 <var>v</var> との間に辺を追加する。<br>\n辺を追加する前の時点で、 <var>u</var> と <var>v</var> は異なる連結成分に属する。(すなわち、グラフは常に森である。)</p>\n<p><br></p>\n<pre>2 <var>u</var> <var>v</var>\n</pre>\n<p>タイプ <var>2</var> : 頂点 <var>u</var> と頂点 <var>v</var> の双方に隣接する頂点があるならその番号を答え、無ければ <var>0</var> と答える。<br>\nグラフが常に森であることから、このクエリに対する解答は一意に定まることが示せる。</p>\n<p><br></p>\n<p>但し、上記のクエリは暗号化して与えられます。<br>\n本来のクエリは <var>3</var> つの整数 <var>A,B,C</var> として定義され、これをもとに暗号化されたクエリが <var>3</var> つの整数 <var>a,b,c</var> として与えられます。<br>\nタイプ <var>2</var> のクエリのうち、先頭から <var>k</var> 個目のものに対する解答を <var>X_k</var> とします。 さらに、 <var>k = 0</var> に対して <var>X_k = 0</var> と定義します。<br>\n与えられた <var>a,b,c</var> から以下の通りに <var>A,B,C</var> を復号してください。  </p>\n<ul>\n<li>そのクエリより前に与えられたタイプ <var>2</var> のクエリの個数を <var>l</var> とする(そのクエリ自身は数えない)。このとき、以下の通りに復号せよ。<ul>\n<li><var>A = 1 + (((a \\times (1+X_l)) \\mod 998244353) \\mod 2)</var></li>\n<li><var>B = 1 + (((b \\times (1+X_l)) \\mod 998244353) \\mod N)</var></li>\n<li><var>C = 1 + (((c \\times (1+X_l)) \\mod 998244353) \\mod N)</var></li>\n</ul>\n</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li>入力は全て整数</li>\n<li><var>2 \\le N \\le 10^5</var></li>\n<li><var>1 \\le Q \\le 10^5</var></li>\n<li><var>1 \\le u &lt; v \\le N</var></li>\n<li><var>0 \\le a,b,c &lt; 998244353</var></li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。<br>\n但し、 <var>\\rm{Query}</var><var>_i</var> は <var>i</var> 個目のクエリを表す。</p>\n<pre><var>N</var> <var>Q</var>\n<var>\\rm{Query}</var><var>_1</var>\n<var>\\rm{Query}</var><var>_2</var>\n<var>\\vdots</var>\n<var>\\rm{Query}</var><var>_Q</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>タイプ <var>2</var> のクエリの個数を <var>k</var> としたとき、全体で <var>k</var> 行出力せよ。<br>\nそのうち <var>i</var> 行目には、タイプ <var>2</var> のクエリのうち、先頭から <var>i</var> 個目のものに対する解答を出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>6 12\n143209915 123840720 97293110\n89822758 207184717 689046893\n67757230 270920641 26993265\n952858464 221010240 871605818\n730183361 147726243 445163345\n963432357 295317852 195433903\n120904472 106195318 615645575\n817920568 27584394 770578609\n38727673 250957656 506822697\n139174867 566158852 412971999\n205467538 606353836 855642999\n159292205 319166257 51234344\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>0\n2\n0\n2\n6\n0\n1\n</pre>\n<p>全てのクエリを復号した後の入力は以下の通りです。</p>\n<pre>6 12\n2 1 3\n1 2 6\n1 2 4\n1 1 3\n2 4 6\n2 1 4\n1 5 6\n1 1 2\n2 1 4\n2 2 5\n2 3 4\n2 2 3\n</pre>\n<p>この入力について、グラフは <var>6</var> 頂点であり、 <var>12</var> 個のクエリが含まれます。</p>\n<ul>\n<li><var>1</var> 個目のクエリは <code>2 1 3</code> である。<ul>\n<li>頂点 <var>1</var> と頂点 <var>3</var> の双方に隣接する頂点はないので、 <var>0</var> と答える。</li>\n</ul>\n</li>\n<li><var>2</var> 個目のクエリは <code>1 2 6</code> である。<ul>\n<li>頂点 <var>2</var> と頂点 <var>6</var> との間に辺を追加する。</li>\n</ul>\n</li>\n<li><var>3</var> 個目のクエリは <code>1 2 4</code> である。<ul>\n<li>頂点 <var>2</var> と頂点 <var>4</var> との間に辺を追加する。</li>\n</ul>\n</li>\n<li><var>4</var> 個目のクエリは <code>1 1 3</code> である。<ul>\n<li>頂点 <var>1</var> と頂点 <var>3</var> との間に辺を追加する。</li>\n</ul>\n</li>\n<li><var>5</var> 個目のクエリは <code>2 4 6</code> である。<ul>\n<li>頂点 <var>4</var> と頂点 <var>6</var> の双方に隣接する頂点は、頂点 <var>2</var> である。</li>\n</ul>\n</li>\n<li><var>6</var> 個目のクエリは <code>2 1 4</code> である。<ul>\n<li>頂点 <var>1</var> と頂点 <var>4</var> の双方に隣接する頂点はないので、 <var>0</var> と答える。</li>\n</ul>\n</li>\n<li><var>7</var> 個目のクエリは <code>1 5 6</code> である。<ul>\n<li>頂点 <var>5</var> と頂点 <var>6</var> との間に辺を追加する。</li>\n</ul>\n</li>\n<li><var>8</var> 個目のクエリは <code>1 1 2</code> である。<ul>\n<li>頂点 <var>1</var> と頂点 <var>2</var> との間に辺を追加する。</li>\n</ul>\n</li>\n<li><var>9</var> 個目のクエリは <code>2 1 4</code> である。<ul>\n<li>頂点 <var>1</var> と頂点 <var>4</var> の双方に隣接する頂点は、頂点 <var>2</var> である。</li>\n</ul>\n</li>\n<li><var>10</var> 個目のクエリは <code>2 2 5</code> である。<ul>\n<li>頂点 <var>2</var> と頂点 <var>5</var> の双方に隣接する頂点は、頂点 <var>6</var> である。</li>\n</ul>\n</li>\n<li><var>11</var> 個目のクエリは <code>2 3 4</code> である。<ul>\n<li>頂点 <var>3</var> と頂点 <var>4</var> の双方に隣接する頂点はないので、 <var>0</var> と答える。</li>\n</ul>\n</li>\n<li><var>12</var> 個目のクエリは <code>2 2 3</code> である。<ul>\n<li>頂点 <var>2</var> と頂点 <var>3</var> の双方に隣接する頂点は、頂点 <var>1</var> である。</li>\n</ul>\n</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>2 1\n377373366 41280240 33617925\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre></pre>\n<p>出力が空である場合もあります。</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score: <var>600</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><strong>Beware the special input format and the smaller memory limit than usual.</strong></p>\n<p>There is an undirected graph with vertices <var>1, 2, \\dots, N</var>, initially without edges.<br>\nYou need to process the following <var>Q</var> queries on this graph:</p>\n<p><br></p>\n<pre>1 <var>u</var> <var>v</var>\n</pre>\n<p>Type <var>1</var>: Add an edge between vertices <var>u</var> and <var>v</var>.<br>\nBefore adding the edge, <var>u</var> and <var>v</var> belong to different connected components (i.e., the graph always remains a forest).</p>\n<p><br></p>\n<pre>2 <var>u</var> <var>v</var>\n</pre>\n<p>Type <var>2</var>: If there is a vertex adjacent to both <var>u</var> and <var>v</var>, report its vertex number; otherwise, report <var>0</var>.<br>\nGiven that the graph always remains a forest, the answer to this query is uniquely determined.</p>\n<p><br></p>\n<p>The queries are given in an encrypted form.<br>\nThe original query is defined by three integers <var>A, B, C</var>, and the encrypted query is given as three integers <var>a, b, c</var>.<br>\nLet <var>X_k</var> be the answer to the <var>k</var>-th type-<var>2</var> query. Define <var>X_k = 0</var> for <var>k = 0</var>.<br>\nRestore <var>A, B, C</var> from the given <var>a, b, c</var> as follows:</p>\n<ul>\n<li>Let <var>l</var> be the number of type-<var>2</var> queries given before this query (not counting the query itself). Then, use the following:<ul>\n<li><var>A = 1 + (((a \\times (1+X_l)) \\mod 998244353) \\mod 2)</var></li>\n<li><var>B = 1 + (((b \\times (1+X_l)) \\mod 998244353) \\mod N)</var></li>\n<li><var>C = 1 + (((c \\times (1+X_l)) \\mod 998244353) \\mod N)</var></li>\n</ul>\n</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>2 \\le N \\le 10^5</var></li>\n<li><var>1 \\le Q \\le 10^5</var></li>\n<li><var>1 \\le u &lt; v \\le N</var></li>\n<li><var>0 \\le a,b,c &lt; 998244353</var></li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>\\rm{Query}</var><var>_1</var>\n<var>\\rm{Query}</var><var>_2</var>\n<var>\\vdots</var>\n<var>\\rm{Query}</var><var>_Q</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>k</var> be the number of type-<var>2</var> queries. Print <var>k</var> lines.<br>\nThe <var>i</var>-th line should contain the answer to the <var>i</var>-th type-<var>2</var> query.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 12\n143209915 123840720 97293110\n89822758 207184717 689046893\n67757230 270920641 26993265\n952858464 221010240 871605818\n730183361 147726243 445163345\n963432357 295317852 195433903\n120904472 106195318 615645575\n817920568 27584394 770578609\n38727673 250957656 506822697\n139174867 566158852 412971999\n205467538 606353836 855642999\n159292205 319166257 51234344\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n2\n0\n2\n6\n0\n1\n</pre>\n<p>After decrypting all queries, the input is as follows:</p>\n<pre>6 12\n2 1 3\n1 2 6\n1 2 4\n1 1 3\n2 4 6\n2 1 4\n1 5 6\n1 1 2\n2 1 4\n2 2 5\n2 3 4\n2 2 3\n</pre>\n<p>This input has a <var>6</var>-vertex graph and <var>12</var> queries.</p>\n<ul>\n<li>The first query is <code>2 1 3</code>.<ul>\n<li>No vertex is adjacent to both vertex <var>1</var> and vertex <var>3</var>, so report <var>0</var>.</li>\n</ul>\n</li>\n<li>The second query is <code>1 2 6</code>.<ul>\n<li>Add an edge between vertices <var>2</var> and <var>6</var>.</li>\n</ul>\n</li>\n<li>The third query is <code>1 2 4</code>.<ul>\n<li>Add an edge between vertices <var>2</var> and <var>4</var>.</li>\n</ul>\n</li>\n<li>The fourth query is <code>1 1 3</code>.<ul>\n<li>Add an edge between vertices <var>1</var> and <var>3</var>.</li>\n</ul>\n</li>\n<li>The fifth query is <code>2 4 6</code>.<ul>\n<li>The vertex adjacent to both vertices <var>4</var> and <var>6</var> is vertex <var>2</var>.</li>\n</ul>\n</li>\n<li>The sixth query is <code>2 1 4</code>.<ul>\n<li>No vertex is adjacent to both vertices <var>1</var> and <var>4</var>, so report <var>0</var>.</li>\n</ul>\n</li>\n<li>The seventh query is <code>1 5 6</code>.<ul>\n<li>Add an edge between vertices <var>5</var> and <var>6</var>.</li>\n</ul>\n</li>\n<li>The eighth query is <code>1 1 2</code>.<ul>\n<li>Add an edge between vertices <var>1</var> and <var>2</var>.</li>\n</ul>\n</li>\n<li>The ninth query is <code>2 1 4</code>.<ul>\n<li>The vertex adjacent to both vertices <var>1</var> and <var>4</var> is vertex <var>2</var>.</li>\n</ul>\n</li>\n<li>The tenth query is <code>2 2 5</code>.<ul>\n<li>The vertex adjacent to both vertices <var>2</var> and <var>5</var> is vertex <var>6</var>.</li>\n</ul>\n</li>\n<li>The eleventh query is <code>2 3 4</code>.<ul>\n<li>No vertex is adjacent to both vertices <var>3</var> and <var>4</var>, so report <var>0</var>.</li>\n</ul>\n</li>\n<li>The twelfth query is <code>2 2 3</code>.<ul>\n<li>The vertex adjacent to both vertices <var>2</var> and <var>3</var> is vertex <var>1</var>.</li>\n</ul>\n</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 1\n377373366 41280240 33617925\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre></pre>\n<p>The output may be empty.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/abc350/tasks/abc350_g"}