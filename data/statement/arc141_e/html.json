{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>700</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N^2</var> 頂点からなる無向グラフがあります。はじめ、グラフは辺を持ちません。 <var>0 \\leq i,\\ j &lt; N</var> を満たす整数の組 <var>(i,\\ j)</var> それぞれについて、それに対応する頂点がひとつ存在し、その頂点を <var>(i,\\ j)</var> と呼びます。</p>\n<p><var>Q</var> 個のクエリが与えられます。<var>i</var> 番目のクエリでは <var>4</var> つの整数 <var>a_i,\\ b_i,\\ c_i,\\ d_i</var> が与えられるので以下のように順番に処理してください。</p>\n<ul>\n<li>各 <var>k\\ (0 \\leq k &lt; N)</var> について、<var>2</var> 頂点 <var>((a_i+k) \\bmod N,\\ (b_i+k) \\bmod N),\\ ((c_i+k) \\bmod N,\\ (d_i+k) \\bmod N)</var> 間に辺を追加してください。その後、グラフの連結成分数を出力してください。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq Q \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq a_i,\\ b_i,\\ c_i,\\ d_i &lt; N</var></li>\n<li><var>(a_i,\\ b_i) \\neq (c_i,\\ d_i)</var></li>\n<li>入力される値はすべて整数</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられます。</p>\n<pre><var>N</var> <var>Q</var>\n<var>a_1</var> <var>b_1</var> <var>c_1</var> <var>d_1</var>\n<var>a_2</var> <var>b_2</var> <var>c_2</var> <var>d_2</var>\n<var>\\vdots</var>\n<var>a_Q</var> <var>b_Q</var> <var>c_Q</var> <var>d_Q</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p><var>Q</var> 行出力してください。<var>i</var> 行目には <var>i</var> 番目のクエリにおけるグラフの連結成分数を出力してください。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>3 3\n0 0 1 2\n2 0 0 0\n1 1 2 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>6\n4\n4\n</pre>\n<p><var>1</var> 番目のクエリでは頂点 <var>(0,\\ 0),\\ (1,\\ 2)</var> 間、<var>(1,\\ 1),\\ (2,\\ 0)</var> 間、<var>(2,\\ 2),\\ (0,\\ 1)</var> 間に辺が追加されます。これにより連結成分数は <var>9</var> から <var>6</var> に変化します。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>4 3\n0 0 2 2\n2 3 1 2\n1 1 3 3\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>14\n11\n11\n</pre>\n<p>クエリ処理の結果、グラフは単純グラフではなくなることがあります。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>6 5\n0 0 1 1\n1 2 3 4\n1 1 5 3\n2 0 1 5\n5 0 3 3\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>31\n27\n21\n21\n19\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an undirected graph with <var>N^2</var> vertices. Initially, it has no edges. For each pair of integers <var>(i,\\ j)</var> such that <var>0 \\leq i,\\ j &lt; N</var>, the graph has a corresponding vertex called <var>(i,\\ j)</var>.</p>\n<p>You will get <var>Q</var> queries, which should be processed in order. The <var>i</var>-th query, which gives you four integers <var>a_i,\\ b_i,\\ c_i,\\ d_i</var>, is as follows.</p>\n<ul>\n<li>For each <var>k</var> <var>(0 \\leq k &lt; N)</var>, add an edge between two vertices <var>((a_i+k) \\bmod N,\\ (b_i+k) \\bmod N)</var> and <var>((c_i+k) \\bmod N,\\ (d_i+k) \\bmod N)</var>. Then, print the current number of connected components in the graph.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq Q \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq a_i,\\ b_i,\\ c_i,\\ d_i &lt; N</var></li>\n<li><var>(a_i,\\ b_i) \\neq (c_i,\\ d_i)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>a_1</var> <var>b_1</var> <var>c_1</var> <var>d_1</var>\n<var>a_2</var> <var>b_2</var> <var>c_2</var> <var>d_2</var>\n<var>\\vdots</var>\n<var>a_Q</var> <var>b_Q</var> <var>c_Q</var> <var>d_Q</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines. The <var>i</var>-th line should contain the number of connected components in the graph at the <var>i</var>-th query.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n0 0 1 2\n2 0 0 0\n1 1 2 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n4\n4\n</pre>\n<p>The first query adds an edge between <var>(0,\\ 0),\\ (1,\\ 2)</var>, between <var>(1,\\ 1),\\ (2,\\ 0)</var>, and between <var>(2,\\ 2),\\ (0,\\ 1)</var>, changing the number of connected components from <var>9</var> to <var>6</var>.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 3\n0 0 2 2\n2 3 1 2\n1 1 3 3\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>14\n11\n11\n</pre>\n<p>The graph after queries may not be simple.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 5\n0 0 1 1\n1 2 3 4\n1 1 5 3\n2 0 1 5\n5 0 3 3\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>31\n27\n21\n21\n19\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/arc141/tasks/arc141_e"}