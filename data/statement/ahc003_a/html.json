{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>ストーリー</h3><p>AtCoder社は最短路アルゴリズムを活用した道案内アプリを開発している。\nサービスの対象エリアは30×30個の頂点をグリッド状に繋いだ道路網で表される。\nユーザーが現在位置の頂点と目的地の頂点を指定すると、アプリはその間の最短経路を出力する予定だ。\n困ったことに、アプリのリリース予定日が迫っているにもかかわらず、最短経路の計算に必要不可欠な各辺の長さの計測が全く出来ていない。\nそこで、事前に辺の長さを計測することを諦め、最短でないパスの出力も許すことにした。\nユーザーが目的地に到着するまでに実際にかかった時間の情報をもとに、出力した各辺の長さを推測することで、徐々に性能の改善が可能であるはずだ。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>辺の長さが未知の30×30頂点の無向グリッドグラフがある。\n一番左上の頂点を <var>(0,0)</var> とし、そこから下方向に <var>i</var> 回、右方向に <var>j</var> 回移動した先の頂点を <var>(i, j)</var> とする。\n以下のクエリを1000個処理せよ。</p>\n<p><var>k</var>番目のクエリでは、まずはじめに、標準入力から頂点 <var>s_k=(si_k,sj_k)</var> と <var>t_k=(ti_k,tj_k)</var> が以下の形式で与えられる。</p>\n<pre><var>si_k</var> <var>sj_k</var> <var>ti_k</var> <var>tj_k</var>\n</pre>\n\n<p>入力を読み込んだら、あなたのプログラムは <var>s_k</var> から <var>t_k</var> へのパス <var>P_k</var> を1つ求める。\n<var>(i, j)</var> から <var>(i-1,j)</var>, <var>(i+1,j)</var>, <var>(i,j-1)</var>, <var>(i,j+1)</var> の頂点への移動をそれぞれ <code>U</code>, <code>D</code>, <code>L</code>, <code>R</code> として、<var>P_k</var> を文字列で表し、標準出力に一行で出力せよ。\n<strong>出力のあとは標準出力を flush しなければならない。</strong>そうしない場合、<code>TLE</code>となる可能性がある。</p>\n<p>パスが出力されると、ジャッジプログラムはパスの長さ <var>b_k</var> を計算し、<var>0.9</var> 以上 <var>1.1</var> 以下の一様乱数 <var>e_k</var> を生成して、整数値 <var>\\mathrm{round}(b_k\\times e_k)</var> を標準入力に与える。\nそれを読み込むことで<var>k</var>番目のクエリが終了し、<var>k+1</var>番目のクエリへ進む。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>例</h3><table class=\"table table-bordered\">\n<thead>\n<tr>\n<th align=\"left\">Input</th>\n<th align=\"left\">Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><pre>3 19 16 17</pre></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><pre>DDDDDDDDDDDDDLL</pre></td>\n</tr>\n<tr>\n<td align=\"left\"><pre>99561</pre></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><pre>26 18 13 18</pre></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><pre>UUUUUUUUUUUUU</pre></td>\n</tr>\n<tr>\n<td align=\"left\"><pre>72947</pre></td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p><var>k</var> 番目 (<var>1\\leq k\\leq 1000</var>) のクエリに対する最短路長を <var>a_k</var>、出力されたパスの長さを <var>b_k</var> とすると、以下の得点が得られる。</p>\n<p><var>\\mathrm{round}(2312311\\times \\sum_{k=1}^{1000}0.998^{1000-k} \\frac{a_k}{b_k})</var></p>\n<p>各テストケースの得点の合計が提出の得点となる。\n不正なパス(同じ頂点を複数回通る、30×30の外へはみ出す、sからtへのパスでない)が出力された場合、<code>WA</code>と判定される。\nコンテスト終了後に一番最後の提出に対してシステムテストが行われ、最終順位が決定される。</p>\n<ul>\n<li>暫定テストは100個のテストケースを用いる。1つ以上のテストケースで<code>AC</code>以外の判定がされた場合、提出の得点は0点となる。</li>\n<li>システムテストは3000個のテストケースを用いる。<code>AC</code>以外の判定がされた場合、そのテストケースのみ0点となる。コンテスト終了後に<a href=\"https://img.atcoder.jp/ahc003/seeds.txt\">seeds.txt</a>(md5=0cf5051d586e7f62c0b3527f6f7fbb1c)を公開</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><p><var>L</var> 以上 <var>U</var> 以下の整数値を一様ランダムに生成する関数を <var>\\mathrm{rand}(L,U)</var> で表す。\nまずはじめに、2つのパラメータ <var>D=\\mathrm{rand}(100, 2000)</var> と <var>M=\\mathrm{rand}(1, 2)</var> を生成する。\n頂点 <var>(i, j)</var> と <var>(i,j+1)</var> を結ぶ辺の長さを <var>h_{i,j}</var>、頂点 <var>(i, j)</var> と <var>(i+1,j)</var> を結ぶ辺の長さを <var>v_{i,j}</var> とする。</p>\n<h4><var>h_{i,j}</var> の生成</h4>\n<ol>\n<li>各 <var>i\\in\\{0,\\ldots,29\\}</var>, <var>p\\in\\{0,\\ldots,M-1\\}</var> に対して独立に乱数値 <var>H_{i,p}=\\mathrm{rand}(1000+D,9000-D)</var> を生成する。</li>\n<li>各 <var>i\\in\\{0,\\ldots,29\\}</var>, <var>j\\in\\{0,\\ldots,28\\}</var> に対して独立に乱数値 <var>\\delta_{i,j}=\\mathrm{rand}(-D,D)</var> を生成する。</li>\n<li><var>M=1</var> の場合は、各 <var>i\\in\\{0,\\ldots,29\\}</var>, <var>j\\in\\{0,\\ldots,28\\}</var> に対して <var>h_{i,j}=H_{i,0}+\\delta_{i,j}</var> と設定する。</li>\n<li><var>M=2</var> の場合は、各 <var>i\\in\\{0,\\ldots,29\\}</var> に対して乱数 <var>x_i=\\mathrm{rand}(1,28)</var> を生成し、<var>j\\in\\{0,\\ldots,x_i-1\\}</var> に対しては <var>h_{i,j}=H_{i,0}+\\delta_{i,j}</var>、<var>j\\in\\{x_i,\\ldots,28\\}</var> に対しては <var>h_{i,j}=H_{i,1}+\\delta_{i,j}</var> と設定する。</li>\n</ol>\n<h4><var>v_{i,j}</var> の生成</h4>\n<ol>\n<li>各 <var>j\\in\\{0,\\ldots,29\\}</var>, <var>p\\in\\{0,\\ldots,M-1\\}</var> に対して独立に乱数値 <var>V_{j,p}=\\mathrm{rand}(1000+D,9000-D)</var> を生成する。</li>\n<li>各 <var>i\\in\\{0,\\ldots,28\\}</var>, <var>j\\in\\{0,\\ldots,29\\}</var> に対して独立に乱数値 <var>\\gamma_{i,j}=\\mathrm{rand}(-D,D)</var> を生成する。</li>\n<li><var>M=1</var> の場合は、各 <var>j\\in\\{0,\\ldots,29\\}</var>, <var>i\\in\\{0,\\ldots,28\\}</var> に対して <var>v_{i,j}=V_{j,0}+\\gamma_{i,j}</var> と設定する。</li>\n<li><var>M=2</var> の場合は、各 <var>j\\in\\{0,\\ldots,29\\}</var> に対して乱数 <var>y_j=\\mathrm{rand}(1,28)</var> を生成し、<var>i\\in\\{0,\\ldots,y_j-1\\}</var> に対しては <var>v_{i,j}=V_{j,0}+\\gamma_{i,j}</var>、<var>i\\in\\{y_j,\\ldots,28\\}</var> に対しては <var>v_{i,j}=V_{j,1}+\\gamma_{i,j}</var> と設定する。</li>\n</ol>\n<h4><var>s_k</var>, <var>t_k</var> の生成</h4>\n<p>クエリで与えられる頂点 <var>s_k</var>と<var>t_k</var> は、全ての頂点の中から一様ランダムに選択される。\n<var>s_k</var> と <var>t_k</var> のマンハッタン距離 <var>|si_k-ti_k|+|sj_k-tj_k|</var> が10未満の場合は、10以上になるまで選択を繰り返す。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc003/c1ae4a8996958aa31f5f9d3aa3f51033.zip\">ローカルテスタ</a>: 使用するには、<a href=\"https://www.rust-lang.org/ja\">Rust 言語</a>のコンパイル環境をご用意下さい。</li>\n<li><a href=\"https://img.atcoder.jp/ahc003/e7eb814463364c249c93216eee64275.html\">ビジュアライザ</a></li>\n<li><a href=\"https://img.atcoder.jp/ahc003/499df4d8fb8c9326c7b718917d14f17a.zip\">入力データ</a>: 上のローカルテスタを使用しない場合は、こちらのローカルテスト用の100個の入力データ(seed 0-99)を利用することも出来ます。これらの入力は実際のテストケースとは異なります。入力データは以下のフォーマットとなっており、各自でジャッジ用のプログラムを書いてご利用下さい。</li>\n</ul>\n<pre><var>h_{0,0}</var> <var>\\ldots</var> <var>h_{0,28}</var>\n<var>\\vdots</var>\n<var>h_{29,0}</var> <var>\\ldots</var> <var>h_{29,28}</var>\n<var>v_{0,0}</var> <var>\\ldots</var> <var>v_{0,29}</var>\n<var>\\vdots</var>\n<var>v_{28,0}</var> <var>\\ldots</var> <var>v_{28,29}</var>\n<var>si_1</var> <var>sj_1</var> <var>ti_1</var> <var>tj_1</var> <var>a_1</var> <var>e_1</var>\n<var>\\vdots</var>\n<var>si_{1000}</var> <var>sj_{1000}</var> <var>ti_{1000}</var> <var>tj_{1000}</var> <var>a_{1000}</var> <var>e_{1000}</var>\n</pre>\n\n<h4>ジャッジ用プログラムの例(疑似コード)</h4>\n<pre>string query(s, t, prev_result) {\n    // WRITE YOUR SOLUTION HERE\n}\n\nint main() {\n    if (LOCAL_TEST) {\n        read_h_v();\n    }\n    prev_result = 0;\n    score = 0.0;\n    for (int k = 0; k &lt; 1000; k++) {\n        if (LOCAL_TEST) {\n            read_s_t_a_e();\n        } else {\n            read_s_t();\n        }\n        path = query(s, t, prev_result);\n        print(path);\n        if (LOCAL_TEST) {\n            b = compute_path_length(path);\n            score = score * 0.998 + a / b;\n            prev_result = round(b * e);\n        } else {\n            prev_result = read_result();\n        }\n    }\n    if (LOCAL_TEST) {\n        print(round(2312311 * score));\n    }\n    return 0;\n}\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Story</h3><p>AtCoder is developing a route navigation application that utilizes shortest path algorithms.\nThe service area is represented as a road network of 30x30 vertices connected in a grid.\nWhen a user specifies the vertex of the current location and the vertex of the destination, the app will output the shortest path between them.\nThe trouble is that, even though the scheduled release date is approaching, the measurement of the length of each edge, which is essential for shortest path computations, is not finished at all.\nTherefore, AtCoder decided to give up measuring the edge length in advance and allows the app to output paths that are not the shortest.\nIt should be possible to gradually improve the performance by estimating the length of each edge based on the information about the actual time users take to arrive at their destinations.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an undirected grid graph with 30x30 vertices with unknown edge lengths.\nLet <var>(0, 0)</var> denote the top-left vertex, and <var>(i, j)</var> denote the vertex at the <var>i</var>-th row from the top and <var>j</var>-th column from the left.\nYour task is to process the following query 1000 times.</p>\n<p>In the <var>k</var>-th query, your program first receives the vertices <var>s_k=(si_k,sj_k)</var> and <var>t_k=(ti_k,tj_k)</var> from Standard Input in the following format:</p>\n<pre><var>si_k</var> <var>sj_k</var> <var>ti_k</var> <var>tj_k</var>\n</pre>\n\n<p>Then, your program should compute a path <var>P_k</var> from <var>s_k</var> to <var>t_k</var>.\nLet <code>U</code>, <code>D</code>, <code>L</code>, and <code>R</code> represent the movement from <var>(i,j)</var> to <var>(i-1,j)</var>, <var>(i+1,j)</var>, <var>(i,j-1)</var>, and <var>(i,j+1)</var>, respectively.\nOutput a string representing the path <var>P_k</var> to Standard Output in one line.\n<strong>After the output, you have to flush Standard Output.</strong> Otherwise, the submission might be judged as TLE.</p>\n<p>After your program outputs a path, the judge program calculates the length <var>b_k</var> of the path, generates a uniform random number <var>e_k</var> between <var>0.9</var> and <var>1.1</var>, and gives an integer value <var>\\mathrm{round}(b_k\\times e_k)</var> to Standard Input.\nBy reading that integer, the <var>k</var>-th query completes, and you should proceed to the <var>k+1</var>-th query.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Examples</h3><table class=\"table table-bordered\">\n<thead>\n<tr>\n<th align=\"left\">Input</th>\n<th align=\"left\">Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><pre>3 19 16 17</pre></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><pre>DDDDDDDDDDDDDLL</pre></td>\n</tr>\n<tr>\n<td align=\"left\"><pre>99561</pre></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><pre>26 18 13 18</pre></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><pre>UUUUUUUUUUUUU</pre></td>\n</tr>\n<tr>\n<td align=\"left\"><pre>72947</pre></td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>Let <var>a_k</var> and <var>b_k</var> be the lengths of the shortest path and the output path for the <var>k</var>-th query (<var>1\\leq k\\leq 1000</var>), respectively.\nThen the score for the test case is</p>\n<p><var>\\mathrm{round}(2312311\\times \\sum_{k=1}^{1000}0.998^{1000-k} \\frac{a_k}{b_k})</var></p>\n<p>The score of a submission is the total score for each test case.\nIf your program outputs an illegal path (visiting the same vertex multiple times, going outside of 30x30, or not a path from <var>s</var> to <var>t</var>), it is judged as <code>WA</code>.\nAfter the contest is over, the final ranking will be determined by system tests against the last submission.</p>\n<ul>\n<li>Provisional tests consist of 100 test cases. If you get a result other than <code>AC</code> for one or more test cases, the score of the submission will be zero.</li>\n<li>System tests consist of 3000 test cases. If you get a result other than <code>AC</code> for some test cases, only the score for those test cases will be zero. We will publish <a href=\"https://img.atcoder.jp/ahc003/seeds.txt\">seeds.txt</a> (md5=0cf5051d586e7f62c0b3527f6f7fbb1c) after the contest is over.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><p>Let <var>\\mathrm{rand}(L,U)</var> be a function that generates a uniformly random integer between <var>L</var> and <var>U</var>, inclusive.\nWe first generate two parameters <var>D=\\mathrm{rand}(100, 2000)</var> and <var>M=\\mathrm{rand}(1, 2)</var>.\nLet <var>h_{i,j}</var> be the length of the edge between <var>(i, j)</var> and <var>(i,j+1)</var>, and let <var>v_{i,j}</var> be the length of the edge between <var>(i, j)</var> and <var>(i+1,j)</var>.</p>\n<h4>Generation of <var>h_{i,j}</var></h4>\n<ol>\n<li>For each <var>i\\in\\{0,\\ldots,29\\}</var> and <var>p\\in\\{0,\\ldots,M-1\\}</var>, we independently generate a random integer <var>H_{i,p}=\\mathrm{rand}(1000+D,9000-D)</var>.</li>\n<li>For each <var>i\\in\\{0,\\ldots,29\\}</var> and <var>j\\in\\{0,\\ldots,28\\}</var>, we independently generate a random integer <var>\\delta_{i,j}=\\mathrm{rand}(-D,D)</var>.</li>\n<li>If <var>M=1</var>, for each <var>i\\in\\{0,\\ldots,29\\}</var> and <var>j\\in\\{0,\\ldots,28\\}</var>, we set <var>h_{i,j}=H_{i,0}+\\delta_{i,j}</var>.</li>\n<li>If <var>M=2</var>, for each <var>i\\in\\{0,\\ldots,29\\}</var>, we generate a random integer <var>x_i=\\mathrm{rand}(1,28)</var>, and then for each <var>j\\in\\{0,\\ldots,x_i-1\\}</var>, we set <var>h_{i,j}=H_{i,0}+\\delta_{i,j}</var>, and for each <var>j\\in\\{x_i,\\ldots,28\\}</var>, we set <var>h_{i,j}=H_{i,1}+\\delta_{i,j}</var>.</li>\n</ol>\n<h4>Generation of <var>v_{i,j}</var></h4>\n<ol>\n<li>For each <var>j\\in\\{0,\\ldots,29\\}</var> and <var>p\\in\\{0,\\ldots,M-1\\}</var>, we independently generate a random integer <var>V_{j,p}=\\mathrm{rand}(1000+D,9000-D)</var>.</li>\n<li>For each <var>i\\in\\{0,\\ldots,28\\}</var> and <var>j\\in\\{0,\\ldots,29\\}</var>, we independently generate a random integer <var>\\gamma_{i,j}=\\mathrm{rand}(-D,D)</var>.</li>\n<li>If <var>M=1</var>, for each <var>j\\in\\{0,\\ldots,29\\}</var> and <var>i\\in\\{0,\\ldots,28\\}</var>, we set <var>v_{i,j}=V_{j,0}+\\gamma_{i,j}</var>.</li>\n<li>If <var>M=2</var>, for each <var>j\\in\\{0,\\ldots,29\\}</var>, we generate a random integer <var>y_j=\\mathrm{rand}(1,28)</var>, and then for each <var>i\\in\\{0,\\ldots,y_j-1\\}</var>, we set <var>v_{i,j}=V_{j,0}+\\gamma_{i,j}</var>, and for each <var>i\\in\\{y_j,\\ldots,28\\}</var>, we set <var>v_{i,j}=V_{j,1}+\\gamma_{i,j}</var>.</li>\n</ol>\n<h4>Generation of <var>s_k</var>, <var>t_k</var></h4>\n<p>The vertices <var>s_k</var> and <var>t_k</var> given in the query are chosen uniformly at random among all the vertices.\nIf the Manhattan distance between <var>s_k</var> and <var>t_k</var> (<var>|si_k-ti_k|+|sj_k-tj_k|</var>) is strictly less than 10, we repeat the random selection until the distance becomes at least 10.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc003/c1ae4a8996958aa31f5f9d3aa3f51033.zip\">Local tester</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.</li>\n<li><a href=\"https://img.atcoder.jp/ahc003/e7eb814463364c249c93216eee64275.html\">Visualizer</a></li>\n<li><a href=\"https://img.atcoder.jp/ahc003/499df4d8fb8c9326c7b718917d14f17a.zip\">Inputs</a>: If you don't use the above local tester, you can instead use these 100 inputs (seed 0-99) for local testing. These inputs are different from the actual test cases. The inputs are in the following format, and you can use them by writing a judge program by yourself.</li>\n</ul>\n<pre><var>h_{0,0}</var> <var>\\ldots</var> <var>h_{0,28}</var>\n<var>\\vdots</var>\n<var>h_{29,0}</var> <var>\\ldots</var> <var>h_{29,28}</var>\n<var>v_{0,0}</var> <var>\\ldots</var> <var>v_{0,29}</var>\n<var>\\vdots</var>\n<var>v_{28,0}</var> <var>\\ldots</var> <var>v_{28,29}</var>\n<var>si_1</var> <var>sj_1</var> <var>ti_1</var> <var>tj_1</var> <var>a_1</var> <var>e_1</var>\n<var>\\vdots</var>\n<var>si_{1000}</var> <var>sj_{1000}</var> <var>ti_{1000}</var> <var>tj_{1000}</var> <var>a_{1000}</var> <var>e_{1000}</var>\n</pre>\n\n<h4>Example of judge program (pseudo code)</h4>\n<pre>string query(s, t, prev_result) {\n    // WRITE YOUR SOLUTION HERE\n}\n\nint main() {\n    if (LOCAL_TEST) {\n        read_h_v();\n    }\n    prev_result = 0;\n    score = 0.0;\n    for (int k = 0; k &lt; 1000; k++) {\n        if (LOCAL_TEST) {\n            read_s_t_a_e();\n        } else {\n            read_s_t();\n        }\n        path = query(s, t, prev_result);\n        print(path);\n        if (LOCAL_TEST) {\n            b = compute_path_length(path);\n            score = score * 0.998 + a / b;\n            prev_result = round(b * e);\n        } else {\n            prev_result = read_result();\n        }\n    }\n    if (LOCAL_TEST) {\n        print(round(2312311 * score));\n    }\n    return 0;\n}\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ahc003/tasks/ahc003_a"}