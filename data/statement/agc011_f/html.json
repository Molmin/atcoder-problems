{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>1700</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>高橋王国には，<var>1</var> 本の鉄道路線が走っています．\nこの路線は <var>N</var> 個の区間 <var>1</var>, <var>2</var>, ..., <var>N</var> と <var>N+1</var> 個の駅 <var>0</var>, <var>1</var>, ..., <var>N</var> からなり，区間 <var>i</var> は駅 <var>i-1</var> と駅 <var>i</var> を直接結んでいます．\n列車が区間 <var>i</var> を走行するには，方向によらず，ちょうど <var>A_i</var> 分かかります．\nまた，<var>N</var> 個の区間のそれぞれは，区間全体にわたって複線であるか，区間全体にわたって単線であるかのどちらかです．\n<var>B_i = 1</var> のときは区間 <var>i</var> は単線，<var>B_i = 2</var> のときは区間 <var>i</var> は複線です．\n複線の区間では両方向の列車がすれ違うことができますが，単線の区間ではすれ違うことはできません．\nただし，列車が駅にいる場合は列車同士がすれ違うことができます．</p>\n<p>すぬけ君は，この路線に図のように <var>K</var> 分間隔で列車を走らせようとしています．ここで，太線は列車が走行している位置を表します． (詳しくは，入出力例 1 を見てください．)</p>\n<p><img alt=\"\" src=\"https://atcoder.jp/img/agc011/a5c221ce77ab6ee8aee48e75a4e5c969.png\"></p>\n<p>このとき，駅 <var>0</var> から駅 <var>N</var> までの列車の所要時間と，駅 <var>N</var> から駅 <var>0</var> までの列車の所要時間の合計の最小値を求めてください．\nこの問題の制約の下，適切な列車の走らせ方が存在するとき，この最小値は必ず整数になることが証明できます．</p>\n<p>なお，列車の発車時刻や到着時刻が満たすべき条件は，厳密に書くと下のようになります．</p>\n<ul>\n<li>どの列車も，駅 <var>0</var> を出発して駅 <var>N</var> まで向かうか，駅 <var>N</var> を出発して駅 <var>0</var> まで向かうかのいずれかである．</li>\n<li>どの列車も，区間 <var>i</var> をちょうど <var>A_i</var> 分かけて走行する．例えば，駅 <var>N</var> 行きのある列車が駅 <var>i-1</var> を時刻 <var>t</var> に出発したなら，この列車は駅 <var>i</var> にちょうど時刻 <var>t+A_i</var> に到着する．</li>\n<li>ある駅で，時刻 <var>s</var> に駅 <var>N</var> 行きの列車が到着し，その列車が時刻 <var>t</var> に発車したとすると，駅 <var>N</var> 行きの次の列車は時刻 <var>s+K</var> に到着し，時刻 <var>t+K</var> に発車する．また，駅 <var>N</var> 行きの前の列車は時刻 <var>s-K</var> に到着し，時刻 <var>t-K</var> に発車する．駅 <var>0</var> 行きの列車についても同様である．</li>\n<li>異なる方向の列車が，同時に同じ単線区間（両端の駅を除く）を走行していてはならない．</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq N \\leq 100000</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>A_i</var> は整数</li>\n<li><var>B_i = 1</var> または <var>B_i = 2</var></li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>部分点</h3><ul>\n<li><var>500</var> 点分のテストケースでは，すべての区間が単線である．すなわち，<var>B_i = 1</var> が成り立つ．</li>\n<li>別の <var>500</var> 点分のテストケースでは，<var>N \\leq 200</var> が成り立つ．</li>\n</ul>\n</section>\n</div>\n\n<hr>\n\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n:\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>駅 <var>0</var> から駅 <var>N</var> までの列車の所要時間と，駅 <var>N</var> から駅 <var>0</var> までの列車の所要時間の合計の最小値を表す整数を出力せよ．\nただし，条件をすべて満たすように列車を走らせることが不可能な場合は，<var>-1</var> を出力せよ．</p>\n</section>\n</div>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>3 10\n4 1\n3 1\n4 1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>26\n</pre>\n\n<p>例えば，下図に示すように列車を走らせると，所要時間の合計が <var>26</var> 分になります．</p>\n<p><img alt=\"\" src=\"https://atcoder.jp/img/agc011/a5c221ce77ab6ee8aee48e75a4e5c969.png\"></p>\n<p>例えば，赤線で示した列車は，時刻 <var>0</var> に駅 <var>0</var> を出発し，時刻 <var>4</var> に駅 <var>1</var> に到着し，時刻 <var>5</var> に駅 <var>1</var> を出発し，時刻 <var>8</var> に駅 <var>2</var> に到着します．</p>\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>1 10\n10 1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>-1\n</pre>\n\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>6 4\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>12\n</pre>\n\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 4</h3><pre>20 987654321\n129662684 2\n162021979 1\n458437539 1\n319670097 2\n202863355 1\n112218745 1\n348732033 1\n323036578 1\n382398703 1\n55854389 1\n283445191 1\n151300613 1\n693338042 2\n191178308 2\n386707193 1\n204580036 1\n335134457 1\n122253639 1\n824646518 2\n902554792 2\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 4</h3><pre>14829091348\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>1700</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a railroad in Takahashi Kingdom.\nThe railroad consists of <var>N</var> sections, numbered <var>1</var>, <var>2</var>, ..., <var>N</var>, and <var>N+1</var> stations, numbered <var>0</var>, <var>1</var>, ..., <var>N</var>. Section <var>i</var> directly connects the stations <var>i-1</var> and <var>i</var>.\nA train takes exactly <var>A_i</var> minutes to run through section <var>i</var>, regardless of direction.\nEach of the <var>N</var> sections is either single-tracked over the whole length, or double-tracked over the whole length.\nIf <var>B_i = 1</var>, section <var>i</var> is single-tracked; if <var>B_i = 2</var>, section <var>i</var> is double-tracked.\nTwo trains running in opposite directions can cross each other on a double-tracked section, but not on a single-tracked section.\nTrains can also cross each other at a station.</p>\n<p>Snuke is creating the timetable for this railroad. In this timetable, the trains on the railroad run every <var>K</var> minutes, as shown in the following figure. Here, bold lines represent the positions of trains running on the railroad. (See Sample 1 for clarification.)</p>\n<p><img alt=\"\" src=\"https://atcoder.jp/img/agc011/a5c221ce77ab6ee8aee48e75a4e5c969.png\"></p>\n<p>When creating such a timetable, find the minimum sum of the amount of time required for a train to depart station <var>0</var> and reach station <var>N</var>, and the amount of time required for a train to depart station <var>N</var> and reach station <var>0</var>.\nIt can be proved that, if there exists a timetable satisfying the conditions in this problem, this minimum sum is always an integer.</p>\n<p>Formally, the times at which trains arrive and depart must satisfy the following:</p>\n<ul>\n<li>Each train either departs station <var>0</var> and is bound for station <var>N</var>, or departs station <var>N</var> and is bound for station <var>0</var>.</li>\n<li>Each train takes exactly <var>A_i</var> minutes to run through section <var>i</var>. For example, if a train bound for station <var>N</var> departs station <var>i-1</var> at time <var>t</var>, the train arrives at station <var>i</var> exactly at time <var>t+A_i</var>.</li>\n<li>Assume that a train bound for station <var>N</var> arrives at a station at time <var>s</var>, and departs the station at time <var>t</var>. Then, the next train bound for station <var>N</var> arrives at the station at time <var>s+K</var>, and departs the station at time <var>t+K</var>. Additionally, the previous train bound for station <var>N</var> arrives at the station at time <var>s-K</var>, and departs the station at time <var>t-K</var>. This must also be true for trains bound for station <var>0</var>.</li>\n<li>Trains running in opposite directions must not be running on the same single-tracked section (except the stations at both ends) at the same time.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100000</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>A_i</var> is an integer.</li>\n<li><var>B_i</var> is either <var>1</var> or <var>2</var>.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li>In the test set worth <var>500</var> points, all the sections are single-tracked. That is, <var>B_i = 1</var>.</li>\n<li>In the test set worth another <var>500</var> points, <var>N \\leq 200</var>.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n:\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer representing the minimum sum of the amount of time required for a train to depart station <var>0</var> and reach station <var>N</var>, and the amount of time required for a train to depart station <var>N</var> and reach station <var>0</var>.\nIf it is impossible to create a timetable satisfying the conditions, print <var>-1</var> instead.</p>\n</section>\n</div>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 10\n4 1\n3 1\n4 1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>26\n</pre>\n\n<p>For example, the sum of the amount of time in question will be <var>26</var> minutes in the following timetable:</p>\n<p><img alt=\"\" src=\"https://atcoder.jp/img/agc011/a5c221ce77ab6ee8aee48e75a4e5c969.png\"></p>\n<p>In this timetable, the train represented by the red line departs station <var>0</var> at time <var>0</var>, arrives at station <var>1</var> at time <var>4</var>, departs station <var>1</var> at time <var>5</var>, arrives at station <var>2</var> at time <var>8</var>, and so on.</p>\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 10\n10 1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 4\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>12\n</pre>\n\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>20 987654321\n129662684 2\n162021979 1\n458437539 1\n319670097 2\n202863355 1\n112218745 1\n348732033 1\n323036578 1\n382398703 1\n55854389 1\n283445191 1\n151300613 1\n693338042 2\n191178308 2\n386707193 1\n204580036 1\n335134457 1\n122253639 1\n824646518 2\n902554792 2\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>14829091348\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/agc011/tasks/agc011_f"}