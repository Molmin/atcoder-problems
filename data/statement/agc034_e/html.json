{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>1500</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>頂点に番号 <var>1, 2, ..., N</var> がついた <var>N</var> 頂点の木が与えられます。<var>i</var> 番目の辺は頂点 <var>a_i</var> と頂点 <var>b_i</var> を結んでいます。\nまた長さ <var>N</var> の <code>0</code>, <code>1</code> からなる文字列 <var>S</var> が与えられ、<var>S</var> の <var>i</var> 文字目は頂点 <var>i</var> に置いてあるコマの個数を表しています。</p>\n<p>すぬけ君は、以下の操作を好きなだけ行います。</p>\n<ul>\n<li>距離が <var>2</var> 以上離れたコマ <var>2</var> 個を選び、お互いに <var>1</var> ずつ近づける。\n正確に述べると、コマの置かれた頂点 <var>u, v</var> を選び、<var>u, v</var> 間の最短パスを考える。ここでパスの辺数が <var>2</var> 以上となるように選ぶことにする。パスにおいて <var>u</var> に隣り合う頂点にコマを <var>1</var> 個 <var>u</var> から動かし、<var>v</var> に隣り合う頂点にコマを <var>1</var> 個 <var>v</var> から動かす。</li>\n</ul>\n<p>すぬけ君はこれを繰り返し、すべてのコマを同じ頂点に集めたいです。このようなことは可能でしょうか？\n可能な場合、それを達成するのに必要な操作の最小回数も求めてください。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>2 \\leq N \\leq 2000</var></li>\n<li><var>|S| = N</var></li>\n<li><var>S</var> は <code>0</code>, <code>1</code>からなり、また少なくとも <var>1</var> 文字は <code>1</code> を含む</li>\n<li><var>1 \\leq a_i, b_i \\leq N(a_i \\neq b_i)</var></li>\n<li>辺 <var>(a_1, b_1), (a_2, b_2), ..., (a_{N - 1}, b_{N - 1})</var> は木をなす</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var>\n<var>S</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>:</var>\n<var>a_{N - 1}</var> <var>b_{N - 1}</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>コマを同じ頂点に集められない場合 <code>-1</code>、集められる場合は操作の最小回数を出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>7\n0010101\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>3\n</pre>\n\n<ul>\n<li>頂点 <var>3, 5</var> のコマを選ぶ</li>\n<li>頂点 <var>2, 7</var> のコマを選ぶ</li>\n<li>頂点 <var>4, 6</var> のコマを選ぶ</li>\n</ul>\n<p>の <var>3</var> 回の操作ですべてのコマを頂点 <var>1</var> に集めることができます。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>7\n0010110\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>-1\n</pre>\n\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>2\n01\n1 2\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>0\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>1500</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a tree with <var>N</var> vertices numbered <var>1, 2, ..., N</var>. The <var>i</var>-th edge connects Vertex <var>a_i</var> and Vertex <var>b_i</var>.\nYou are also given a string <var>S</var> of length <var>N</var> consisting of <code>0</code> and <code>1</code>. The <var>i</var>-th character of <var>S</var> represents the number of pieces placed on Vertex <var>i</var>.</p>\n<p>Snuke will perform the following operation some number of times:</p>\n<ul>\n<li>Choose two pieces the distance between which is at least <var>2</var>, and bring these pieces closer to each other by <var>1</var>. More formally, choose two vertices <var>u</var> and <var>v</var>, each with one or more pieces, and consider the shortest path between them. Here the path must contain at least two edges. Then, move one piece from <var>u</var> to its adjacent vertex on the path, and move one piece from <var>v</var> to its adjacent vertex on the path.</li>\n</ul>\n<p>By repeating this operation, Snuke wants to have all the pieces on the same vertex. Is this possible?\nIf the answer is yes, also find the minimum number of operations required to achieve it.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2000</var></li>\n<li><var>|S| = N</var></li>\n<li><var>S</var> consists of <code>0</code> and <code>1</code>, and contains at least one <code>1</code>.</li>\n<li><var>1 \\leq a_i, b_i \\leq N(a_i \\neq b_i)</var></li>\n<li>The edges <var>(a_1, b_1), (a_2, b_2), ..., (a_{N - 1}, b_{N - 1})</var> forms a tree.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>:</var>\n<var>a_{N - 1}</var> <var>b_{N - 1}</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is impossible to have all the pieces on the same vertex, print <code>-1</code>. If it is possible, print the minimum number of operations required.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\n0010101\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n\n<p>We can gather all the pieces in three operations as follows:</p>\n<ul>\n<li>Choose the pieces on Vertex <var>3</var> and <var>5</var>.</li>\n<li>Choose the pieces on Vertex <var>2</var> and <var>7</var>.</li>\n<li>Choose the pieces on Vertex <var>4</var> and <var>6</var>.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7\n0010110\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n01\n1 2\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/agc034/tasks/agc034_e"}