{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>AtCoder社はブロックを組み合わせて指定されたシルエットの立体を作る知育玩具を開発している。\nこの玩具は <var>1\\times 1\\times 1</var> の立方体を面同士で接合したポリキューブ状のブロックが複数と2次元の白黒シルエット画像2枚の組がセットになっている。\nブロックを組み合わせて一つの立体を作り、作った立体を正面から見た時のシルエットと、右側から見た時のシルエットが、シルエット画像に完全一致していたらゲームクリアである。</p>\n<p>長く遊べるように、1セットのブロックに対して、シルエットの組を複数用意したい。\n例えば左図の例にある6ブロックのセットからは、右図にあるようなシルエットの組2つが達成可能である。</p>\n<div style=\"display: flex; width: 100%;\">\n  <div style=\"flex-basis: 40%; text-align: center; margin-right: 10%;\">\n    <img src=\"https://img.atcoder.jp/ahc019/b36525d8_1.png\" style=\"max-width: 100%; max-height: 100%; vertical-align: middle;\">\n  </div>\n  <div style=\"flex-basis: 50%; text-align: center;\">\n    <img src=\"https://img.atcoder.jp/ahc019/b36525d8_2.png\" style=\"max-width: 100%; max-height: 100%; vertical-align: middle;\">\n  </div>\n</div>\n\n<p>玩具デザイナーであるあなたの仕事は、正面・右側のシルエットのペアが2組与えられるので、両方を作ることが出来るようなブロックのセットと、その作り方を求めることである。\n小さなブロックは子供が誤って飲み込んでしまう可能性があるため、少数の大きなブロックのみからなるセットが望ましい。</p>\n<h4>パズルのルールについての補足</h4>\n<ul>\n<li>ブロックは全て使い切らなくても良い(が、全て使い切るほうが良いスコアが得られる)。</li>\n<li>各ブロックは <var>x</var>軸、<var>y</var>軸、<var>z</var>軸に対して90度単位で回転させることが出来るが反転させることは出来ない。</li>\n<li>ブロックの配置は各頂点が整数座標となるようにしなくてはならず、ブロック同士は正の体積の共通部分を持ってはならない。</li>\n<li>作成する立体は連結でなくても良い。簡単のため、宙に浮かせるような配置も可能であるとする(追加で透明なブロックが大量にあり、自由に支えることが出来ると解釈せよ)。</li>\n</ul>\n<h4>シルエットについて</h4>\n<p>左から右方向に <var>x</var> 軸、手前から奥方向に <var>y</var> 軸、上から下方向に <var>z</var> 軸を取る。\n全てのブロックは <var>(0,0,0)</var> と <var>(D,D,D)</var> を対角とする立方体領域内に収まっているとする。\n三次元の01配列 <var>b(x,y,z)</var> を、<var>(x,y,z)</var> と <var>(x+1,y+1,z+1)</var> を対角とする単位立方体の領域をブロックが占めている場合に <var>b(x,y,z)=1</var>、そうでない場合に <var>b(x,y,z)=0</var> と定義する。\nこのとき、前から見たシルエットは二次元の01配列 <var>f(z,x)</var> であり、以下のように定義される。</p>\n<p>\\[\n    f(z,x)=\\begin{cases}\n    1&amp;(\\sum_{y=0}^{D-1}b(x,y,z)\\geq 1)\\\\\n    0&amp;(\\sum_{y=0}^{D-1}b(x,y,z)=0)\n    \\end{cases}\n\\]</p>\n<p>同様に、右から見たシルエットは二次元の01配列 <var>r(z,y)</var> であり、以下のように定義される。</p>\n<p>\\[\n    r(z,y)=\\begin{cases}\n    1&amp;(\\sum_{x=0}^{D-1}b(x,y,z)\\geq 1)\\\\\n    0&amp;(\\sum_{x=0}^{D-1}b(x,y,z)=0)\n    \\end{cases}\n\\]</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p>作成した玩具セットに含まれる各ブロックの体積を <var>v_1,\\cdots,v_n</var> とする。\nここで、ブロックの体積とはそれを構成する <var>1\\times 1\\times 1</var> の立方体の個数に等しい。\n各ブロックは連結、すなわち構成するどの立方体同士も面を共有する立方体への移動によって到達可能でなければならない。\n非連結なブロックが一つでもある場合は <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span> と判定される。\n各ブロックは連結でなければならないが、ブロックを組み合わせて作る立体は非連結でも構わないことに注意せよ。</p>\n<p><var>i=1,2</var> 番目のシルエットの組に対して、出力した立体の作り方において使用しなかったブロックの体積の合計を <var>r_i</var> 、両方で使用したブロックの集合を <var>S</var> とする。\nこのとき、以下の評価値が得られる。評価値は低ければ低いほど良い。</p>\n<p>\\[\n    \\mathrm{round}\\left(10^9\\times \\left(r_1+r_2+\\sum_{i\\in S} \\frac{1}{v_i}\\right)\\right)\n\\]</p>\n<p>例えば、ブロックのセットが体積5のブロックA、体積3のブロックB、体積2のブロックCからなり、AとBを用いて作成できる立体で1組目のシルエットを達成し、AとCを用いて作成出来る立体で2組目のシルエットを達成した場合、得られる評価値は <var>\\mathrm{round}\\left(10^9\\times \\left(2+3+1/5\\right)\\right)</var> となる。</p>\n<p>各テストケース毎に、<var>\\mathrm{round}(10^9\\times \\frac{全参加者中の最小評価値}{自身の評価値})</var> の<font color=\"red\"><strong>相対評価スコア</strong></font>が得られ、その和が提出の得点となる。</p>\n<p>最終順位はコンテスト終了後に実施されるより多くの入力に対するシステムテストにおける得点で決定される。\n暫定テスト、システムテストともに、一部のテストケースで不正な出力や制限時間超過をした場合、そのテストケースの相対評価スコアは0点となり、そのテストケースにおいては「全参加者中の最小評価値」の計算から除外される。\nシステムテストは<font color=\"red\"><strong> <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"コンパイルエラー\">CE</span> 以外の結果を得た一番最後の提出</strong></font>に対してのみ行われるため、最終的に提出する解答を間違えないよう注意せよ。</p>\n<h4>テストケース数</h4>\n<ul>\n<li>暫定テスト: 50個</li>\n<li>システムテスト: 2000個、コンテスト終了後に <a href=\"https://img.atcoder.jp/ahc019/seeds.txt\">seeds.txt</a> (sha256=08db725cbdc37734a2e8fbe5bc0cbc1e95d7a68933b7f43dcdd0ffc3d2a95e34) を公開</li>\n<li>システムテストは与えられるシルエットの大きさが <var>D=5,6,\\cdots,14</var> であるような入力を <var>200</var> 個ずつ含む</li>\n<li>seed=0 の入力は手動で作成されたものであり、暫定テスト、システムテストには含まれない。</li>\n</ul>\n<h4>相対評価システムについて</h4>\n<p>暫定テスト、システムテストともに、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"コンパイルエラー\">CE</span> 以外の結果を得た一番最後の提出のみが順位表に反映される。\n相対評価スコアの計算に用いられる各テストケース毎の全参加者中の最小評価値の算出においても、順位表に反映されている最終提出のみが用いられる。</p>\n<p>順位表に表示されているスコアは相対評価スコアであり、新規提出があるたびに、相対評価スコアが再計算される。\n一方、提出一覧から確認出来る各提出のスコアは各テストケース毎の評価値をそのまま足し合わせたものであり、相対評価スコアは表示されない。\n最新以外の提出の、現在の順位表における相対評価スコアを知るためには、再提出が必要である。\n不正な出力や制限時間超過をした場合、提出一覧から確認出来るスコアは0となるが、順位表には正解したテストケースに対する相対スコアの和が表示されている。</p>\n<h4>実行時間について</h4>\n<p>実行時間には多少のブレが生じます。\nまた、システムテストでは同時に大量の実行を行うため、暫定テストに比べて数%程度実行時間が伸びる現象が確認されています。\nそのため、実行時間制限ギリギリの提出がシステムテストで<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる可能性があります。\nプログラム内で時間を計測して処理を打ち切るか、実行時間に余裕を持たせるようお願いします。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>D</var>\n<var>f_1(0,0)</var> <var>\\cdots</var> <var>f_1(0,D-1)</var>\n<var>\\vdots</var>\n<var>f_1(D-1,0)</var> <var>\\cdots</var> <var>f_1(D-1,D-1)</var>\n<var>r_1(0,0)</var> <var>\\cdots</var> <var>r_1(0,D-1)</var>\n<var>\\vdots</var>\n<var>r_1(D-1,0)</var> <var>\\cdots</var> <var>r_1(D-1,D-1)</var>\n<var>f_2(0,0)</var> <var>\\cdots</var> <var>f_2(0,D-1)</var>\n<var>\\vdots</var>\n<var>f_2(D-1,0)</var> <var>\\cdots</var> <var>f_2(D-1,D-1)</var>\n<var>r_2(0,0)</var> <var>\\cdots</var> <var>r_2(0,D-1)</var>\n<var>\\vdots</var>\n<var>r_2(D-1,0)</var> <var>\\cdots</var> <var>r_2(D-1,D-1)</var>\n</pre>\n\n<ul>\n<li><var>D</var> はシルエット画像の大きさを表し、各シルエット画像は <var>D\\times D</var> の正方形である。<var>5\\leq D\\leq 14</var> を満たす。</li>\n<li><var>f_i,r_i</var> は <var>i</var> 番目のシルエット画像の組であり、<var>f_i</var> が正面から見たシルエット、<var>r_i</var> が右側から見たシルエットである。それぞれ <var>D\\times D</var> の 01 行列であり、長さ <var>D</var> の01文字列 <var>D</var> 個として与えられる。値の意味については先の「シルエットについて」の項目を参照せよ。</li>\n<li>各シルエットについて、全ての1の要素は1つの連結成分をなす。</li>\n<li><var>z=0,\\cdots,D-1</var> に対して、<var>f_i(z,0)+\\cdots+f_i(z,D-1)\\geq 1</var>、<var>r_i(z,0)+\\cdots+r_i(z,D-1)\\geq 1</var> を満たす。この条件により、指定されたシルエットの組と合致する立体が必ず存在することが保証される。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>ブロックの総数を <var>n</var> とする。\n<var>i</var> 番目のシルエットの組に対応するブロックの組み方を、<var>D\\times D\\times D</var> の三次元配列 <var>b_i(x,y,z)</var> を用いて以下のように表現する。</p>\n<p><var>(x,y,z)</var> と <var>(x+1,y+1,z+1)</var> を対角とする単位立方体の領域を <var>k (1\\leq k\\leq n)</var> 番のブロックが占めている場合に <var>b_i(x,y,z)=k</var>、どのブロックもその領域を占めていない場合に <var>b(x,y,z)=0</var>。</p>\n<p>ブロックは変形できないため、各 <var>i=1,2</var> について、同じ番号が振られたブロックは同じ形状、すなわち、回転と平行移動によって完全に一致させることが出来なければならない。</p>\n<p>このとき、以下の形式で標準出力に出力せよ。</p>\n<pre><var>n</var>\n<var>b_1(0,0,0)</var> <var>b_1(0,0,1)</var> <var>\\cdots</var> <var>b_1(D-1,D-1,D-1)</var>\n<var>b_2(0,0,0)</var> <var>b_2(0,0,1)</var> <var>\\cdots</var> <var>b_2(D-1,D-1,D-1)</var>\n</pre>\n\n<p>ここで、<var>b_i</var> の出力の <var>x\\times D^2+y\\times D+z</var> 個目が <var>b_i(x,y,z)</var> である。\n各 <var>i=1,\\cdots,n</var> に対して、<var>i</var> 番のブロックは <var>b_1</var> もしくは <var>b_2</var> の少なくとも一方では使われていなければならない。どちらでも使われていないブロックが存在する場合、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span> と判定される。</p>\n<p><a href=\"https://img.atcoder.jp/ahc019/b36525d8.html?lang=ja&amp;seed=0&amp;output=19%0D%0A0+1+2+3+0+4+5+0+3+3+6+0+0+0+3+7+7+0+3+3+0+7+0+8+0+0+5+9+0+0+0+5+0+0+0+0+0+0+0+0+0+0+0+0+0+0+7+0+0+0+0+0+9+10+0+0+0+0+10+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+9+9+0+0+0+9+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+11+12+12+0+13+0+0+12+14+0+0+0+0+14+0+0+0+14+14+0+0+0+14+0%0D%0A15+0+0+0+3+14+0+0+0+3+0+0+0+0+9+16+0+0+9+9+0+0+0+17+0+0+0+0+0+0+14+0+10+0+3+14+0+10+0+9+0+0+0+18+0+0+0+0+0+0+0+0+0+0+3+0+0+12+0+3+14+0+12+0+9+0+0+0+0+0+0+0+0+0+0+0+0+0+0+3+0+0+12+0+0+14+0+7+0+0+0+7+7+0+5+0+19+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+5+0+7+0+0+5+0+0+0+0+0%0D%0A\">例を見る</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>サンプルプログラム</h3><p></p><details>\nPythonでの解答例を示す。\nこのプログラムでは、<var>f(z,x)=1</var> かつ <var>r(z,y)=1</var> であるような全ての <var>(x,y,z)</var> に対して、<var>1\\times 1\\times 1</var> のブロックを敷き詰めることで目的のシルエットを達成している。<p></p>\n<pre class=\"prettyprint linenums\">D = int(input())\nf = [[] for i in range(2)]\nr = [[] for i in range(2)]\nfor i in range(2):\n    for k in range(D):\n        f[i].append(input())\n    for k in range(D):\n        r[i].append(input())\n\nb = [[0 for j in range(D * D * D)] for i in range(2)]\nn = 0\nfor i in range(2):\n    for x in range(D):\n        for y in range(D):\n            for z in range(D):\n                if f[i][z][x] == '1' and r[i][z][y] == '1':\n                    n += 1\n                    b[i][x * D * D + y * D + z] = n\n\nprint(n)\nprint(' '.join(map(str, b[0])))\nprint(' '.join(map(str, b[1])))\n</pre>\n\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><p></p><details>\n<var>L</var> 以上 <var>U</var> 以下の整数値を一様ランダムに生成する関数を <var>\\mathrm{randint}(L,U)</var> で表す。\n<var>L</var> 以上 <var>U</var> 未満の浮動小数値を一様ランダムに生成する関数を <var>\\mathrm{randdouble}(L,U)</var> で表す。<p></p>\n<h4><var>D</var> の生成</h4>\n<p><var>D=\\mathrm{randint}(5,14)</var> により生成する。</p>\n<h4><var>f,r</var> の生成</h4>\n<p>まずはじめに、生成されるシルエットの特徴を決める数値を以下のように生成する。</p>\n<ul>\n<li><var>p(0)=0</var></li>\n<li><var>p(1)=D^{\\mathrm{randdouble}(-1,1)}</var></li>\n<li><var>p(2)=D^{\\mathrm{randdouble}(-1,1)}</var></li>\n<li><var>p(3)=D^{\\mathrm{randdouble}(-0.5,1.5)}</var></li>\n<li><var>p(4)=D^{\\mathrm{randdouble}(-0.5,1.5)}</var></li>\n</ul>\n<p>次に、各 <var>f_1,r_1,f_2,r_2</var> を以下のように生成する。</p>\n<p>生成するシルエット配列を <var>g</var> とし、全ての <var>(z,x)</var> について、<var>g(z,x)=0</var> と初期化する。\n<var>1</var> の個数を表す値 <var>m=\\mathrm{randint}(2D,\\lfloor D^2/2\\rfloor)</var> を生成する。\n<var>z=\\mathrm{randint}(0,D-1)</var> と <var>x=\\mathrm{randint}(0,D-1)</var> を生成し、<var>g(z,x)=1</var> とする。\n<var>1</var> の個数が <var>m</var> になるまで、以下の処理を繰り返す。</p>\n<p>各 <var>(z,x)</var> について、4方向に隣接する 1 の値の個数を <var>d(z,x)</var> とする。\n<var>g(z,x)=0</var> であるような <var>(z,x)</var> を <var>p(d(z,x))</var> に比例する確率で一つ選び、<var>g(z,x)=1</var> に更新する。</p>\n<p><var>1</var> の個数が <var>m</var> となったとき、全ての <var>z=0,\\cdots,D-1</var> について、<var>\\sum_{x=0}^{D-1}g(z,x)\\geq 1</var> であるかをチェックし、成り立っていない場合は <var>g</var> を<var>0</var> に再度初期化して <var>m</var> を生成する処理からやり直す。\n</p></details><p></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール(入力ジェネレータ・ビジュアライザ)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc019/b36525d8.html?lang=ja\">Web版</a>: 3D表示が可能です。</li>\n<li><a href=\"https://img.atcoder.jp/ahc019/b36525d8.zip\">ローカル版</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。<ul>\n<li><a href=\"https://img.atcoder.jp/ahc019/b36525d8_windows.zip\">Windows用のコンパイル済みバイナリ</a>: Rust言語の環境構築が面倒な方は代わりにこちらをご利用下さい。</li>\n</ul>\n</li>\n</ul>\n<p><font color=\"red\">\nコンテスト期間中に、seed=0 に対するビジュアライザの出力画像(PNG)のみ twitter で共有が可能です。\n</font>\n必ず指定されたハッシュタグを用い、公開アカウントを使用して下さい。共有出来るのはseed=0に対するビジュアライズ結果と点数のみで、動画や出力文字列、他のシードでの点数の共有や、解法・考察に関する言及は禁止です。</p>\n<p><a href=\"https://twitter.com/search?q=%23AHC019%20%23visualizer&amp;src=typed_query&amp;f=live\">共有された画像の一覧</a></p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>5\n10001\n11011\n11111\n10101\n10001\n01110\n11011\n10000\n11011\n01110\n11110\n00011\n01110\n11000\n11111\n11110\n00011\n01110\n00011\n11110\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>19\n0 1 2 3 0 4 5 0 3 3 6 0 0 0 3 7 7 0 3 3 0 7 0 8 0 0 5 9 0 0 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 0 9 10 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 9 9 0 0 0 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 11 12 12 0 13 0 0 12 14 0 0 0 0 14 0 0 0 14 14 0 0 0 14 0\n15 0 0 0 3 14 0 0 0 3 0 0 0 0 9 16 0 0 9 9 0 0 0 17 0 0 0 0 0 0 14 0 10 0 3 14 0 10 0 9 0 0 0 18 0 0 0 0 0 0 0 0 0 0 3 0 0 12 0 3 14 0 12 0 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 12 0 0 14 0 7 0 0 0 7 7 0 5 0 19 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 7 0 0 5 0 0 0 0 0\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>AtCoder is developing an educational toy that combines blocks to create a three-dimensional object with a specified silhouette.\nThe toy consists of a set of polycube-shaped blocks consisting of <var>1\\times 1\\times 1</var> cubes joined face to face and a pair of two 2D monochrome silhouette images.\nYou will win the game if you can construct a single 3D object by combining the blocks, so that the two silhouettes of the created object, viewed from the front and from the right side, completely match the given silhouette images.</p>\n<p>In order to allow children to play for a long time, we want to prepare multiple pairs of silhouettes for a single set of blocks.\nFor example, the set of 6 blocks shown on the left figure can be used to create two pairs of silhouettes, as shown on the right.</p>\n<div style=\"display: flex; width: 100%;\">\n  <div style=\"flex-basis: 40%; text-align: center; margin-right: 10%;\">\n    <img src=\"https://img.atcoder.jp/ahc019/b36525d8_1.png\" style=\"max-width: 100%; max-height: 100%; vertical-align: middle;\">\n  </div>\n  <div style=\"flex-basis: 50%; text-align: center;\">\n    <img src=\"https://img.atcoder.jp/ahc019/b36525d8_2.png\" style=\"max-width: 100%; max-height: 100%; vertical-align: middle;\">\n  </div>\n</div>\n\n<p>As a toy designer, you are given two pairs of front/right silhouettes, and your task is to find a set of blocks from which you can construct two objects having the given pairs of silhouettes, and a way to construct them.\nBecause children may accidentally swallow small blocks, sets of blocks consisting only of a small number of large blocks are preferable.</p>\n<h4>Detailed puzzle rules</h4>\n<ul>\n<li>You don't have to use all the blocks (but you will get a better score if you do).</li>\n<li>Each block can be rotated by 90 degrees around the x-axis, y-axis, and z-axis, but cannot be flipped.</li>\n<li>The blocks must be arranged so that each vertex has integer coordinates, and different blocks must not have a positive common volume.</li>\n<li>The constructed object do not have to be connected. For the sake of simplicity, we assume that a floating arrangement is also possible (you may interpret this as there are a large number of additional transparent blocks, which can be used to support blocks).</li>\n</ul>\n<h4>About silhouette</h4>\n<p>Take the x-axis from left to right, the y-axis from front to back, and the z-axis from top to bottom.\nWe assume that all blocks are within a cubic region that has <var>(0,0,0)</var> and <var>(D,D,D)</var> as diagonal corners.\nWe define a three-dimensional 01-array <var>b(x,y,z)</var> as <var>b(x,y,z)=1</var> if some block occupies the cubic region that has <var>(x,y,z)</var> and <var>(x+1,y+1,z+1)</var> as diagonal corners, and <var>b(x,y,z)=0</var> otherwise.\nThen, the silhouette viewed from the front is a two-dimensional 01-array <var>f(z,x)</var> defined as follows.</p>\n<p>\\[\n    f(z,x)=\\begin{cases}\n    1&amp;(\\sum_{y=0}^{D-1}b(x,y,z)\\geq 1)\\\\\n    0&amp;(\\sum_{y=0}^{D-1}b(x,y,z)=0)\n    \\end{cases}\n\\]</p>\n<p>Similarly, the silhouette viewed from the right is a two-dimensional 01-array <var>r(z,y)</var>, defined as follows</p>\n<p>\\[\n    r(z,y)=\\begin{cases}\n    1&amp;(\\sum_{x=0}^{D-1}b(x,y,z)\\geq 1)\\\\\n    0&amp;(\\sum_{x=0}^{D-1}b(x,y,z)=0)\n    \\end{cases}\n\\]</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>Let <var>v_1,\\cdots,v_n</var> be the volume of each block in the created toy set.\nHere, the volume of a block is equal to the number of <var>1\\times 1\\times 1</var> cubes it comprises.\nEach block must be connected, i.e., every cube it comprises must be reachable by moving through shared faces.\nIf there is a disconnected block, it will be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Wrong Answer\">WA</span>.\nNote that the 3D object created by combining the blocks can be disconnected.</p>\n<p>For the <var>i</var>-th pair of silhouettes (<var>i=1,2</var>), let <var>r_i</var> be the sum of the volumes of the blocks that were not used in the output 3D object.\nLet <var>S</var> be the set of blocks that were used in both two objects.\nThen you get the following evaluation value.\nThe lower the evaluation value, the better.</p>\n<p>\\[\n    \\mathrm{round}\\left(10^9\\times \\left(r_1+r_2+\\sum_{i\\in S} \\frac{1}{v_i}\\right)\\right)\n\\]</p>\n<p>For example, if the set of blocks consists of block A with volume 5, block B with volume 3, and block C with volume 2, and if the first set of silhouettes is achieved by a 3D object that can be created using A and B and the second set of silhouettes is achieved by a 3D object that can be created using A and C, the resulting evaluation value is <var>\\mathrm{round}\\left(10^9\\times \\left(2+3+1/5\\right)\\right)</var>.</p>\n<p>For each test case, we compute the <font color=\"red\"><strong>relative score</strong></font> <var>\\mathrm{round}(10^9\\times \\frac{\\mathrm{MIN}}{\\mathrm{YOUR}})</var>, where YOUR is your evaluation value and MIN is the lowest evaluation value among all competitors obtained on that test case. The score of the submission is the sum of the relative scores.</p>\n<p>The final ranking will be determined by the system test with more inputs which will be run after the contest is over.\nIn both the provisional/system test, if your submission produces illegal output or exceeds the time limit for some test cases, only the score for those test cases will be zero, and your submission will be excluded from the MIN calculation for those test cases.</p>\n<p>The system test will be performed only for <font color=\"red\"><strong>the last submission which received a result other than <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Compilation Error\">CE</span> </strong></font>.\nBe careful not to make a mistake in the final submission.</p>\n<h4>Number of test cases</h4>\n<ul>\n<li>Provisional test: 50</li>\n<li>System test: 2000. We will publish <a href=\"https://img.atcoder.jp/ahc019/seeds.txt\">seeds.txt</a>  (sha256=08db725cbdc37734a2e8fbe5bc0cbc1e95d7a68933b7f43dcdd0ffc3d2a95e34) after the contest is over.</li>\n<li>The system test contains <var>200</var> inputs for each <var>D=5,6,\\cdots,14</var>, where <var>D</var> is the size of each silhouette.</li>\n<li>The input for seed=0 is manually created and is not included in the provisional or system test.</li>\n</ul>\n<h4>About relative evaluation system</h4>\n<p>In both the provisional/system test, the standings will be calculated using only the last submission which received a result other than <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Compilation Error\">CE</span>.\nOnly the last submissions are used to calculate the MIN for each test case when calculating the relative scores.</p>\n<p>The scores shown in the standings are relative, and whenever a new submission arrives, all relative scores are recalculated.\nOn the other hand, the score for each submission shown on the submissions page is the sum of the evaluation value for each test case, and the relative scores are not shown.\nIn order to know the relative score of submission other than the latest one in the current standings, you need to resubmit it.\nIf your submission produces illegal output or exceeds the time limit for some test cases, the score shown on the submissions page will be 0, but the standings show the sum of the relative scores for the test cases that were answered correctly.</p>\n<h4>About execution time</h4>\n<p>Execution time may vary slightly from run to run.\nIn addition, since system tests simultaneously perform a large number of executions, it has been observed that execution time increases by several percent compared to provisional tests.\nFor these reasons, submissions that are very close to the time limit may result in <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> in the system test.\nPlease measure the execution time in your program to terminate the process, or have enough margin in the execution time.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>D</var>\n<var>f_1(0,0)</var> <var>\\cdots</var> <var>f_1(0,D-1)</var>\n<var>\\vdots</var>\n<var>f_1(D-1,0)</var> <var>\\cdots</var> <var>f_1(D-1,D-1)</var>\n<var>r_1(0,0)</var> <var>\\cdots</var> <var>r_1(0,D-1)</var>\n<var>\\vdots</var>\n<var>r_1(D-1,0)</var> <var>\\cdots</var> <var>r_1(D-1,D-1)</var>\n<var>f_2(0,0)</var> <var>\\cdots</var> <var>f_2(0,D-1)</var>\n<var>\\vdots</var>\n<var>f_2(D-1,0)</var> <var>\\cdots</var> <var>f_2(D-1,D-1)</var>\n<var>r_2(0,0)</var> <var>\\cdots</var> <var>r_2(0,D-1)</var>\n<var>\\vdots</var>\n<var>r_2(D-1,0)</var> <var>\\cdots</var> <var>r_2(D-1,D-1)</var>\n</pre>\n\n<ul>\n<li><var>D</var> is the size of the silhouette image and satisfies <var>5\\leq D\\leq 14</var>.</li>\n<li><var>f_i,r_i</var> are the <var>i</var>-th silhouette image pair, where <var>f_i</var> is the silhouette viewed from the front and <var>r_i</var> is the silhouette viewed from the right. Each of them is 01 matrix of size <var>D\\times D</var> and is given as <var>D</var> 01 strings of length <var>D</var>. For the meaning of these values, see the previous section \"About silhouette\".</li>\n<li>For each silhouette, all 1 elements form one connected component.</li>\n<li>For <var>z=0,\\cdots,D-1</var>, it holds that <var>f_i(z,0)+\\cdots+f_i(z,D-1)\\geq 1</var> and <var>r_i(z,0)+\\cdots+r_i(z,D-1)\\geq 1</var>. This condition guarantees that there always exists a 3D object that matches the specified pair of silhouettes.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>n</var> be the total number of blocks.\nThe block arrangement corresponding to the <var>i</var>-th pair of silhouettes is expressed as follows using a three-dimensional array <var>b_i(x,y,z)</var> of size <var>D\\times D\\times D</var>.</p>\n<p><var>b_i(x,y,z)=k</var> if the <var>k (1\\leq k\\leq n)</var>-th block occupies the cubic region that has <var>(x,y,z)</var> and <var>(x+1,y+1,z+1)</var> as diagonal corners, and <var>b(x,y,z)=0</var> if none of the blocks occupy that region.</p>\n<p>Since blocks cannot be reshaped, the same numbered blocks appearing in both <var>i=1,2</var> must have the same shape, i.e., they must be able to be perfectly matched by rotation and translation.</p>\n<p>Then, output to Standard Output in the following format.</p>\n<pre><var>n</var>\n<var>b_1(0,0,0)</var> <var>b_1(0,0,1)</var> <var>\\cdots</var> <var>b_1(D-1,D-1,D-1)</var>\n<var>b_2(0,0,0)</var> <var>b_2(0,0,1)</var> <var>\\cdots</var> <var>b_2(D-1,D-1,D-1)</var>\n</pre>\n\n<p>Here, the <var>(x\\times D^2+y\\times D+z)</var>-th output for <var>b_i</var> is <var>b_i(x,y,z)</var>.\nFor each <var>i=1,\\cdots,n</var>, the <var>i</var>-th block must be used in at least one of <var>b_1</var> or <var>b_2</var>. If there is a block that is not used in either, it is judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Wrong Answer\">WA</span>.</p>\n<p><a href=\"https://img.atcoder.jp/ahc019/b36525d8.html?lang=en&amp;seed=0&amp;output=19%0D%0A0+1+2+3+0+4+5+0+3+3+6+0+0+0+3+7+7+0+3+3+0+7+0+8+0+0+5+9+0+0+0+5+0+0+0+0+0+0+0+0+0+0+0+0+0+0+7+0+0+0+0+0+9+10+0+0+0+0+10+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+9+9+0+0+0+9+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+11+12+12+0+13+0+0+12+14+0+0+0+0+14+0+0+0+14+14+0+0+0+14+0%0D%0A15+0+0+0+3+14+0+0+0+3+0+0+0+0+9+16+0+0+9+9+0+0+0+17+0+0+0+0+0+0+14+0+10+0+3+14+0+10+0+9+0+0+0+18+0+0+0+0+0+0+0+0+0+0+3+0+0+12+0+3+14+0+12+0+9+0+0+0+0+0+0+0+0+0+0+0+0+0+0+3+0+0+12+0+0+14+0+7+0+0+0+7+7+0+5+0+19+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+5+0+7+0+0+5+0+0+0+0+0%0D%0A\">Show example</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Solution</h3><p></p><details>\nThis is a sample solution in Python.\nIn this program, the target silhouette is achieved by placing a unit block of size <var>1\\times 1\\times 1</var> for all <var>(x,y,z)</var> such that <var>f(z,x)=1</var> and <var>r(z,y)=1</var>.<p></p>\n<pre class=\"prettyprint linenums\">D = int(input())\nf = [[] for i in range(2)]\nr = [[] for i in range(2)]\nfor i in range(2):\n    for k in range(D):\n        f[i].append(input())\n    for k in range(D):\n        r[i].append(input())\n\nb = [[0 for j in range(D * D * D)] for i in range(2)]\nn = 0\nfor i in range(2):\n    for x in range(D):\n        for y in range(D):\n            for z in range(D):\n                if f[i][z][x] == '1' and r[i][z][y] == '1':\n                    n += 1\n                    b[i][x * D * D + y * D + z] = n\n\nprint(n)\nprint(' '.join(map(str, b[0])))\nprint(' '.join(map(str, b[1])))\n</pre>\n\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><p></p><details>\nLet <var>\\mathrm{randint}(L,U)</var> be a function that generates a uniform random integer between <var>L</var> and <var>U</var>, inclusive.\nLet <var>\\mathrm{randdouble}(L,U)</var> be a function that generates a uniform random floating-point number at least <var>L</var> and less than <var>U</var>.<p></p>\n<h4>Generation of <var>D</var></h4>\n<p>We generate <var>D</var> by <var>D=\\mathrm{randint}(5,14)</var>.</p>\n<h4>Generation of <var>f,r</var></h4>\n<p>First, we generate the following values which determine the characteristics of the silhouettes to be generated.</p>\n<ul>\n<li><var>p(0)=0</var></li>\n<li><var>p(1)=D^{\\mathrm{randdouble}(-1,1)}</var></li>\n<li><var>p(2)=D^{\\mathrm{randdouble}(-1,1)}</var></li>\n<li><var>p(3)=D^{\\mathrm{randdouble}(-0.5,1.5)}</var></li>\n<li><var>p(4)=D^{\\mathrm{randdouble}(-0.5,1.5)}</var></li>\n</ul>\n<p>Next, we generate each <var>f_1,r_1,f_2,r_2</var> as follows.</p>\n<p>Let <var>g</var> be the silhouette array to be generated and initialize it with <var>g(z,x)=0</var> for all <var>(z,x)</var>.\nGenerate a value <var>m=\\mathrm{randint}(2D,\\lfloor D^2/2\\rfloor)</var> representing the number of <var>1</var>.\nGenerate <var>z=\\mathrm{randint}(0,D-1)</var> and <var>x=\\mathrm{randint}(0,D-1)</var>, and then set <var>g(z,x)=1</var>.\nRepeat the following process until the number of <var>1</var> becomes <var>m</var>.</p>\n<p>For each <var>(z,x)</var>, let <var>d(z,x)</var> be the number of adjacent <var>1</var> in the four directions.\nChoose <var>(z,x)</var> such that <var>g(z,x)=0</var> with probability proportional to <var>p(d(z,x))</var> and update <var>g(z,x)=1</var>.</p>\n<p>When the number of <var>1</var> becomes <var>m</var>, check whether <var>\\sum_{x=0}^{D-1}g(z,x)\\geq 1</var> for all <var>z=0,\\cdots,D-1</var>, and if not, reinitialize <var>g</var> to <var>0</var> and retry the process from generating <var>m</var>.</p>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools (Input generator and visualizer)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc019/b36525d8.html?lang=en\">Web version</a>: You can see 3D animation.</li>\n<li><a href=\"https://img.atcoder.jp/ahc019/b36525d8.zip\">Local version</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.<ul>\n<li><a href=\"https://img.atcoder.jp/ahc019/b36525d8_windows.zip\">Pre-compiled binary for Windows</a>: If you are not familiar with the Rust language environment, please use this instead.</li>\n</ul>\n</li>\n</ul>\n<p><font color=\"red\">\nYou are allowed to share output images (PNG) of the provided visualizer for seed=0 on twitter during the contest.\n</font>\nYou have to use the specified hashtag and public account. You can only share visualization results and scores for seed=0. Do not share videos, output itself, scores for other seeds or mention solutions or discussions.</p>\n<p><a href=\"https://twitter.com/search?q=%23AHC019%20%23visualizer&amp;src=typed_query&amp;f=live\">List of shared images</a></p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n10001\n11011\n11111\n10101\n10001\n01110\n11011\n10000\n11011\n01110\n11110\n00011\n01110\n11000\n11111\n11110\n00011\n01110\n00011\n11110\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>19\n0 1 2 3 0 4 5 0 3 3 6 0 0 0 3 7 7 0 3 3 0 7 0 8 0 0 5 9 0 0 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 0 9 10 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 9 9 0 0 0 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 11 12 12 0 13 0 0 12 14 0 0 0 0 14 0 0 0 14 14 0 0 0 14 0\n15 0 0 0 3 14 0 0 0 3 0 0 0 0 9 16 0 0 9 9 0 0 0 17 0 0 0 0 0 0 14 0 10 0 3 14 0 10 0 9 0 0 0 18 0 0 0 0 0 0 0 0 0 0 3 0 0 12 0 3 14 0 12 0 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 12 0 0 14 0 7 0 0 0 7 7 0 5 0 19 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 7 0 0 5 0 0 0 0 0\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ahc019/tasks/ahc019_a"}