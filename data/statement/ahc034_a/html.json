{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>ストーリー</h3><p>AtCoder社は頻繁にオンサイトコンテストを開催しており、コンテスト会場を自前で建設することにした。\n建設予定地は山の中にあり、まずは地面を平らに整地しなければならない。\n整地にはダンプカーを使用し、土砂を積む、降ろす、運ぶそれぞれに対してコストがかかる。\nできるだけ少ないコストで整地を行う方法を求めてほしい。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N \\times N</var> マスの土地がある。\n一番左上のマスの座標を <var>(0,0)</var> とし、そこから下方向に <var>i</var> マス、右方向に <var>j</var> マス進んだ先のマスの座標を <var>(i,j)</var> とする。</p>\n<p>各マス <var>(i,j)</var> の高さ <var>h_{i,j}</var> が入力として与えられる。\n全てのマスの高さの合計はちょうど <var>0</var> である。</p>\n<p>初期状態で <var>(0,0)</var> のマスにダンプカーが空の積荷の状態で停まっている。\n毎ターン以下の3種類の操作から1つを選んで行うことができる。</p>\n<ul>\n<li><var>0&lt;d\\leq 10^6</var> を満たす整数 <var>d</var> を指定し、現在位置から <var>d</var> の土砂をダンプカーに積む。この操作により、現在位置の高さは <var>d</var> 減少し、ダンプカーに積まれた土砂が <var>d</var> 増加する。高さは負の値となっても良い。この操作は <var>d</var> のコストが発生する。</li>\n<li><var>0&lt;d\\leq 10^6</var> を満たす整数 <var>d</var> を指定し、ダンプカーから <var>d</var> の土砂を現在位置に降ろす。この操作により、現在位置の高さは <var>d</var> 増加し、ダンプカーに積まれた土砂が <var>d</var> 減少する。<var>d</var> の値は操作前にダンプカーに積まれている量以下でなければならない。この操作は <var>d</var> のコストが発生する。</li>\n<li>上下左右に隣接するマスへダンプカーを移動させる。<var>N \\times N</var> マスの外部へ移動することはできない。ダンプカーに積まれた土砂が <var>d</var> のとき、この操作は <var>100+d</var> のコストが発生する。</li>\n</ul>\n<p>操作は最大で <var>100000</var> ターン行うことが出来る。\n最終的に全てのマスの高さが <var>0</var> となるような、出来るだけコストの小さい操作列を求めて欲しい。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p>出力した操作列の合計コストを <var>\\mathrm{cost}</var> とする。\n全ての <var>(i,j)</var> について <var>|h_{i,j}|</var> の和を取ったものを <var>\\mathrm{base}</var> とする。\nマス <var>(i,j)</var> の最終的な高さを <var>h_{i,j}'</var> としたとき、<var>h_{i,j}'\\neq 0</var> であるような全ての <var>(i,j)</var> について <var>100|h_{i,j}'|+10000</var> の和を取ったものを <var>\\mathrm{diff}</var> と定義する。\nこのとき、以下の得点が得られる。</p>\n<p>\\[\n\\mathrm{round}\\left(10^9\\times \\frac{\\mathrm{base}}{\\mathrm{cost}+\\mathrm{diff}}\\right)\n\\]</p>\n<p>テストケースは全部で 150 個あり、各テストケースの得点の合計が提出の得点となる。\n一つ以上のテストケースで不正な出力や制限時間超過をした場合、提出全体の判定が<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span>や<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる。\nコンテスト時間中に得た最高得点で最終順位が決定され、コンテスト終了後のシステムテストは行われない。 同じ得点を複数の参加者が得た場合、提出時刻に関わらず同じ順位となる。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var>\n<var>h_{0,0}</var> <var>\\cdots</var> <var>h_{0,N-1}</var>\n<var>\\vdots</var>\n<var>h_{N-1,0}</var> <var>\\cdots</var> <var>h_{N-1,N-1}</var>\n</pre>\n<p>全てのテストケースで <var>N = 20</var> で固定である。\n初期状態におけるマス <var>(i,j)</var> の高さ <var>h_{i,j}</var> は <var>-100\\leq h_{i,j}\\leq 100</var> を満たす整数値であり、その総和は <var>0</var> となることが保証されている。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>操作ターン数を <var>T</var> とする。\n<var>t</var> ターン目の操作を以下のように文字列 <var>s_t</var> で表す。</p>\n<ul>\n<li>現在位置から <var>d</var> の土砂をダンプカーに積む操作: <code>+d</code></li>\n<li>ダンプカーから <var>d</var> の土砂を現在位置に降ろす操作: <code>-d</code></li>\n<li>隣接するマスへダンプカーを移動させる操作: 上下左右それぞれ <code>U</code>、<code>D</code>、<code>L</code>、<code>R</code></li>\n</ul>\n<p>このとき、以下の形式で標準出力に出力せよ。</p>\n<pre><var>s_0</var>\n<var>\\vdots</var>\n<var>s_{T-1}</var>\n</pre>\n<p><a href=\"https://img.atcoder.jp/ahc034/vImT4eac.html?lang=ja&amp;seed=0&amp;output=sample\">例を見る</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><details>\n<p>\n必ずしも理解する必要はありません。\nWeb版ビジュアライザのseed値を変えて、どのような入力が生成されるかを眺めることをオススメします。\n</p>\n<p>\n<var>L</var> 以上 <var>U</var> 以下の整数値を一様ランダムに生成する関数を <var>\\mathrm{rand}(L,U)</var> で表す。\n乱数シード <var>\\mathrm{seed}</var> を元に、<var>-1</var> 以上 <var>1</var> 以下の範囲にスケーリングされた二次元の <a href=\"https://ja.wikipedia.org/wiki/%E3%83%91%E3%83%BC%E3%83%AA%E3%83%B3%E3%83%8E%E3%82%A4%E3%82%BA\">Perlin noise</a> を生成する関数を \n<var>\\mathrm{noise}(y,x,\\mathrm{seed})</var> で表す。\n</p>\n<p>\nまずはじめに、Perlin noise 生成に用いるシード値 <var>\\mathrm{seed}=\\mathrm{rand}(0,2^{32}-1)</var> を生成する。\n</p>\n<p>\n次に、各 <var>(i,j)</var> について、<var>h_{i,j}=\\mathrm{round}(\\mathrm{noise}(i/10,j/10,\\mathrm{seed})\\times 50)</var> を生成する。\nもし全ての <var>(i,j)</var> で <var>h_{i,j}=0</var> であれば、<var>\\mathrm{seed}</var> を生成し直す。\n</p>\n<p>\n<var>h_{i,j}</var> の総和を <var>S</var> とする。\n<var>S=0</var> となるよう、以下のようにして変形を行う。\n</p>\n<p>\n全ての座標 <var>(0,0),(0,1),\\cdots,(N-1,N-1)</var> を一様ランダムな順番にシャッフルし、その <var>k</var> 番目の座標を <var>(i_k,j_k)</var> とする。\n<var>S&gt;0</var> ならば、各 <var>k=0,1,\\cdots,S-1</var> について、<var>h_{i_{k\\% N^2},j_{k\\% N^2}}</var> を <var>1</var> 減らす。\n<var>S&lt;0</var> ならば、各 <var>k=0,1,\\cdots,-S-1</var> について、<var>h_{i_{k\\% N^2},j_{k\\% N^2}}</var> を <var>1</var> 増やす。\n</p>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール(入力ジェネレータ・ビジュアライザ)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc034/vImT4eac.html?lang=ja\">Web版</a>: ローカル版より高性能でアニメーション表示が可能です。</li>\n<li><a href=\"https://img.atcoder.jp/ahc034/vImT4eac.zip\">ローカル版</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。<ul>\n<li><a href=\"https://img.atcoder.jp/ahc034/vImT4eac_windows.zip\">Windows用のコンパイル済みバイナリ</a>: Rust言語の環境構築が面倒な方は代わりにこちらをご利用下さい。</li>\n</ul>\n</li>\n</ul>\n<p>コンテスト期間中に、ビジュアライズ結果の共有や、解法・考察に関する言及は禁止されています。ご注意下さい。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">20\n10 4 0 0 4 10 16 20 21 16 11 2 -7 -16 -23 -25 -23 -16 -7 2\n16 10 6 5 7 10 13 15 14 10 4 -4 -13 -21 -29 -32 -29 -22 -13 -3\n20 14 10 8 9 10 11 12 10 6 0 -7 -15 -24 -31 -33 -31 -25 -16 -8\n20 15 12 10 10 10 10 11 8 5 0 -5 -12 -20 -26 -29 -28 -23 -15 -7\n16 13 12 10 10 10 10 10 9 7 4 1 -4 -10 -16 -20 -20 -17 -10 -3\n10 10 10 10 11 10 10 10 10 10 10 9 7 2 -3 -8 -9 -8 -3 3\n4 7 9 10 10 10 10 10 11 14 16 18 17 14 9 5 1 1 4 9\n0 5 8 10 10 10 10 10 12 15 20 24 25 24 19 14 9 7 9 13\n0 6 10 12 11 11 9 9 10 14 20 26 29 28 24 18 13 10 10 14\n4 10 14 16 13 10 7 5 6 10 16 23 26 26 23 16 10 8 6 10\n11 16 20 21 16 10 4 0 0 4 10 16 21 20 16 10 4 0 1 4\n16 23 26 24 18 9 1 -4 -7 -4 2 9 12 12 8 3 -3 -6 -7 -3\n20 26 27 24 17 7 -3 -11 -14 -12 -7 -1 2 2 -1 -5 -10 -12 -11 -7\n20 24 24 20 13 3 -8 -17 -21 -20 -16 -12 -9 -9 -11 -14 -15 -15 -12 -6\n16 18 17 14 6 -3 -13 -20 -24 -25 -23 -21 -20 -19 -21 -21 -18 -15 -10 -3\n10 10 8 4 -1 -8 -14 -20 -23 -25 -25 -26 -27 -28 -28 -25 -21 -14 -5 3\n4 2 -1 -4 -7 -9 -12 -15 -18 -19 -23 -26 -29 -31 -31 -28 -21 -11 -1 8\n0 -4 -7 -9 -9 -8 -7 -7 -8 -11 -16 -20 -26 -30 -31 -28 -20 -8 2 12\n0 -6 -9 -10 -7 -3 1 3 3 -1 -7 -13 -20 -26 -29 -27 -20 -9 2 13\n4 -3 -6 -6 -3 3 9 12 12 9 3 -5 -12 -20 -25 -26 -21 -12 -1 9\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">+10\nR\n+4\nR\nR\nR\nR\nR\nR\nR\n+50\nR\nR\nR\nR\n-7\nD\n-13\nL\n-44\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Story</h3><p>AtCoder frequently hosts onsite contests and has decided to build its own contest venue.\nThe planned construction site is in a mountain area, and the ground must first be leveled.\nLeveling will involve using a dump truck, which incurs costs for loading, unloading, and transporting soil.\nDetermine the method to level the ground with as little cost as possible.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an <var>N \\times N</var> grid of land.\nLet <var>(0,0)</var> be the coordinates of the top-left square and <var>(i,j)</var> be the coordinates of the square located <var>i</var> squares down and <var>j</var> squares to the right from there.</p>\n<p>The height <var>h_{i,j}</var> of each square <var>(i,j)</var> is given as input.\nThe total height of all squares is exactly <var>0</var>.</p>\n<p>Initially, the dump truck is at the square <var>(0,0)</var> with an empty load.\nIn each turn, you can perform one of the following three operations:</p>\n<ul>\n<li>Specify an integer <var>d</var> satisfying <var>0&lt;d\\leq 10^6</var> to load <var>d</var> units of soil from the current square onto the dump truck. This operation decreases the height of the current square by <var>d</var> and increases the amount of soil loaded onto the dump truck by <var>d</var>. The height can become negative. This operation incurs a cost of <var>d</var>.</li>\n<li>Specify an integer <var>d</var> satisfying <var>0&lt;d\\leq 10^6</var> to unload <var>d</var> units of soil from the dump truck to the current square. This operation increases the height of the current square by <var>d</var> and decreases the amount of soil loaded onto the dump truck by <var>d</var>. The value of <var>d</var> must not exceed the amount of soil currently loaded onto the dump truck. This operation incurs a cost of <var>d</var>.</li>\n<li>Move the dump truck to an adjacent square (up, down, left, or right). The dump truck cannot move outside the <var>N \\times N</var> grid. If the dump truck has <var>d</var> units of soil loaded, this operation incurs a cost of <var>100+d</var>.</li>\n</ul>\n<p>You can perform a maximum of <var>100000</var> turns of operation.\nYour task is to determine the sequence of operations that minimizes the cost to make the height of every square <var>0</var>.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>Let <var>\\mathrm{cost}</var> be the total cost of the output operation sequence.\nLet <var>\\mathrm{base}</var> be the sum of <var>|h_{i,j}|</var> for all <var>(i,j)</var>.\nLet <var>h_{i,j}'</var> be the final height of square <var>(i,j)</var>.\nDefine <var>\\mathrm{diff}</var> as the sum of <var>100|h_{i,j}'|+10000</var> for all <var>(i,j)</var> such that <var>h_{i,j}' \\neq 0</var>.\nThen, you will obtain the following score.</p>\n<p>\\[\n\\mathrm{round}\\left(10^9\\times \\frac{\\mathrm{base}}{\\mathrm{cost}+\\mathrm{diff}}\\right)\n\\]</p>\n<p>There are <var>150</var> test cases, and the score of a submission is the total score for each test case.\nIf your submission produces an illegal output or exceeds the time limit for some test cases, the submission itself will be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Wrong Answer\">WA</span> or <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> , and the score of the submission will be zero.\nThe highest score obtained during the contest will determine the final ranking, and there will be no system test after the contest.\nIf more than one participant gets the same score, they will be ranked in the same place regardless of the submission time.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>h_{0,0}</var> <var>\\cdots</var> <var>h_{0,N-1}</var>\n<var>\\vdots</var>\n<var>h_{N-1,0}</var> <var>\\cdots</var> <var>h_{N-1,N-1}</var>\n</pre>\n<p>In all test cases, <var>N</var> is fixed at <var>20</var>.\nThe initial height <var>h_{i,j}</var> of square <var>(i,j)</var> is an integer that satisfies <var>-100 \\leq h_{i,j} \\leq 100</var>, and the total sum of all heights is guaranteed to be <var>0</var>.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>T</var> be the number of operation turns.\nThe operation in the <var>t</var>-th turn is represented by the string <var>s_t</var> as follows:</p>\n<ul>\n<li>The operation to load <var>d</var> units of soil from the current square onto the dump truck: <code>+d</code></li>\n<li>The operation to unload <var>d</var> units of soil from the dump truck to the current square: <code>-d</code></li>\n<li>The operation to move the dump truck to an adjacent square: <code>U</code>, <code>D</code>, <code>L</code>, and <code>R</code> for up, down, left, and right, respectively.</li>\n</ul>\n<p>Then, output to Standard Output in the following format:</p>\n<pre><var>s_0</var>\n<var>\\vdots</var>\n<var>s_{T-1}</var>\n</pre>\n<p><a href=\"https://img.atcoder.jp/ahc034/vImT4eac.html?lang=en&amp;seed=0&amp;output=sample\">Show example</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><details>\n<p>\nYou are not required to understand this.\nWe recommend changing the seed value in the web visualizer to observe what kind of inputs are generated.\n</p>\n<p>\nLet <var>\\mathrm{rand}(L,U)</var> be a function that generates a uniform random integer between <var>L</var> and <var>U</var>, inclusive.\nLet <var>\\mathrm{noise}(y,x,\\mathrm{seed})</var> be a function that generates two-dimensional <a href=\"https://en.wikipedia.org/wiki/Perlin_noise\">Perlin noise</a> scaled to the range between <var>-1</var> and <var>1</var> based on a random seed value <var>\\mathrm{seed}</var>.\n</p>\n<p>\nFirst, generate a seed value for Perlin noise generation as <var>\\mathrm{seed}=\\mathrm{rand}(0,2^{32}-1)</var>.  \n</p>\n<p>\nNext, for each <var>(i,j)</var>, generate <var>h_{i,j}=\\mathrm{round}(\\mathrm{noise}(i/10,j/10,\\mathrm{seed})\\times 50)</var>.\nIf <var>h_{i,j}=0</var> for all <var>(i,j)</var>, then regenerate <var>\\mathrm{seed}</var>.\n</p>\n<p>\nLet <var>S</var> be the sum of <var>h_{i,j}</var>.\nTo make <var>S=0</var>, perform the following transformation.\n</p>\n<p>\nShuffle all coordinates <var>(0,0),(0,1),\\cdots,(N-1,N-1)</var> in a uniformly random order, and let the <var>k</var>-th coordinate be <var>(i_k,j_k)</var>.  \nIf <var>S&gt;0</var>, then for each <var>k=0,1,\\cdots,S-1</var>, decrease <var>h_{i_{k\\% N^2},j_{k\\% N^2}}</var> by <var>1</var>.  \nIf <var>S&lt;0</var>, then for each <var>k=0,1,\\cdots,-S-1</var>, increase <var>h_{i_{k\\% N^2},j_{k\\% N^2}}</var> by <var>1</var>.\n</p>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools (Input generator and visualizer)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc034/vImT4eac.html?lang=en\">Web version</a>: This is more powerful than the local version providing animations.</li>\n<li><a href=\"https://img.atcoder.jp/ahc034/vImT4eac.zip\">Local version</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.<ul>\n<li><a href=\"https://img.atcoder.jp/ahc034/vImT4eac_windows.zip\">Pre-compiled binary for Windows</a>: If you are not familiar with the Rust language environment, please use this instead.</li>\n</ul>\n</li>\n</ul>\n<p>Please be aware that sharing visualization results or discussing solutions/ideas during the contest is prohibited.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">20\n10 4 0 0 4 10 16 20 21 16 11 2 -7 -16 -23 -25 -23 -16 -7 2\n16 10 6 5 7 10 13 15 14 10 4 -4 -13 -21 -29 -32 -29 -22 -13 -3\n20 14 10 8 9 10 11 12 10 6 0 -7 -15 -24 -31 -33 -31 -25 -16 -8\n20 15 12 10 10 10 10 11 8 5 0 -5 -12 -20 -26 -29 -28 -23 -15 -7\n16 13 12 10 10 10 10 10 9 7 4 1 -4 -10 -16 -20 -20 -17 -10 -3\n10 10 10 10 11 10 10 10 10 10 10 9 7 2 -3 -8 -9 -8 -3 3\n4 7 9 10 10 10 10 10 11 14 16 18 17 14 9 5 1 1 4 9\n0 5 8 10 10 10 10 10 12 15 20 24 25 24 19 14 9 7 9 13\n0 6 10 12 11 11 9 9 10 14 20 26 29 28 24 18 13 10 10 14\n4 10 14 16 13 10 7 5 6 10 16 23 26 26 23 16 10 8 6 10\n11 16 20 21 16 10 4 0 0 4 10 16 21 20 16 10 4 0 1 4\n16 23 26 24 18 9 1 -4 -7 -4 2 9 12 12 8 3 -3 -6 -7 -3\n20 26 27 24 17 7 -3 -11 -14 -12 -7 -1 2 2 -1 -5 -10 -12 -11 -7\n20 24 24 20 13 3 -8 -17 -21 -20 -16 -12 -9 -9 -11 -14 -15 -15 -12 -6\n16 18 17 14 6 -3 -13 -20 -24 -25 -23 -21 -20 -19 -21 -21 -18 -15 -10 -3\n10 10 8 4 -1 -8 -14 -20 -23 -25 -25 -26 -27 -28 -28 -25 -21 -14 -5 3\n4 2 -1 -4 -7 -9 -12 -15 -18 -19 -23 -26 -29 -31 -31 -28 -21 -11 -1 8\n0 -4 -7 -9 -9 -8 -7 -7 -8 -11 -16 -20 -26 -30 -31 -28 -20 -8 2 12\n0 -6 -9 -10 -7 -3 1 3 3 -1 -7 -13 -20 -26 -29 -27 -20 -9 2 13\n4 -3 -6 -6 -3 3 9 12 12 9 3 -5 -12 -20 -25 -26 -21 -12 -1 9\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">+10\nR\n+4\nR\nR\nR\nR\nR\nR\nR\n+50\nR\nR\nR\nR\n-7\nD\n-13\nL\n-44\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ahc034/tasks/ahc034_a"}