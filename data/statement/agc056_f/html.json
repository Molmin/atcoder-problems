{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>1600</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>整数 <var>N</var> と <var>M</var> が与えられます．\n以下の手順で生成されうる整数列 <var>a=(a_1,a_2,\\cdots,a_N)</var> の個数を <var>998244353</var> で割った余りを求めてください．</p>\n<ul>\n<li><var>N</var> 頂点，<var>M</var> 辺からなる連結な無向グラフ <var>G</var> を用意する．\nここで，<var>G</var> は自己ループを含んではならないが，<strong>多重辺を含んでもよい</strong>．</li>\n<li><var>G</var> 上で DFS を行い，<var>i</var> (<var>1 \\leq i \\leq N</var>) 番目に訪れた頂点の次数を <var>a_i</var> とする．\nより正確には，以下の疑似コードを実行して <var>a</var> を得る．</li>\n</ul>\n<pre>a = empty array\n\ndfs(v):\n    visited[v]=True\n    a.append(degree[v])\n    for u in g[v]:\n        if not visited[u]:\n            dfs(u)\n\ndfs(arbitrary root)\n</pre>\n<p>ここで，変数 <var>g</var> はグラフ <var>G</var> を隣接リストとして表したものであり，<var>g[v]</var> は頂点 <var>v</var> に隣接する頂点を<strong>任意の順番</strong>で格納したリストである．</p>\n<p>例えば，<var>N=4,M=5</var> の時，<var>a=(2,4,1,3)</var> を生成することは可能です．\nそのためには，以下のようなグラフ <var>G</var> を用意すればよいです．</p>\n<p><img alt=\"picture\" src=\"https://img.atcoder.jp/agc056/3bfec17f881ae4cd27eccae94ebeae10.png\"></p>\n<p>ここで，頂点にかかれている数は，その頂点を DFS で何番目に訪れたかを表しています．（<var>1</var> と書かれた頂点から   DFS を開始しています．）\nまた，オレンジ色の矢印は DFS での遷移を示しており，その横の数字は辺をたどる順番を表しています．</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>2 \\leq N \\leq M \\leq 10^6</var></li>\n<li>入力される値はすべて整数である</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる．</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>答えを出力せよ．</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>2 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>1\n</pre>\n<p>あり得るのは <var>a=(2,2)</var> のみです．\n<var>G</var> は多重辺を持ってもよいことに注意してください．</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>3 4\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>9\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>10 20\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>186225754\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 4</h3><pre>100000 1000000\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 4</h3><pre>191021899\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are integers <var>N</var> and <var>M</var>.\nFind the number of integer sequences <var>a=(a_1,a_2,\\cdots,a_N)</var> that can be generated as follows, modulo <var>998244353</var>.</p>\n<ul>\n<li>Provide an undirected connected graph <var>G</var> with <var>N</var> vertices and <var>M</var> edges.\nHere, <var>G</var> may not contain self-loops, but <strong>may contain multi-edges</strong>.</li>\n<li>Perform DFS on <var>G</var> and let <var>a_i</var> be the degree of the <var>i</var>-th vertex to be visited.\nMore accurately, execute the pseudo-code below to get <var>a</var>.</li>\n</ul>\n<pre>a = empty array\n\ndfs(v):\n    visited[v]=True\n    a.append(degree[v])\n    for u in g[v]:\n        if not visited[u]:\n            dfs(u)\n\ndfs(arbitrary root)\n</pre>\n<p>Here, the variable <var>g</var> represents the graph <var>G</var> as an adjacency list, where <var>g[v]</var> is the list of vertices adjacent to the vertex <var>v</var> in <strong>arbitrary order</strong>.</p>\n<p>For example, when <var>N=4,M=5</var>, it is possible to generate <var>a=(2,4,1,3)</var>, by providing the graph <var>G</var> as follows.</p>\n<p><img alt=\"picture\" src=\"https://img.atcoder.jp/agc056/3bfec17f881ae4cd27eccae94ebeae10.png\"></p>\n<p>Here, the numbers written on vertices represent the order they are visited in the DFS. (The DFS starts at the vertex labeled <var>1</var>.)\nThe orange arrows show the transitions in the DFS, and the numbers next to them represent the order the edges are traversed.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq M \\leq 10^6</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>The only possible result is <var>a=(2,2)</var>.\nNote that <var>G</var> may have multi-edges.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 4\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>9\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 20\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>186225754\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>100000 1000000\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>191021899\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/agc056/tasks/agc056_f"}