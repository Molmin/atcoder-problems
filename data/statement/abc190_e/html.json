{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>500</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>AtCoder 王国には <var>1, 2, \\dots, N</var> の番号がついた <var>N</var> 種類の魔法石が流通しています。<br>\n高橋くんは、魔法石を一列に並べて飾りを作ろうとしています。<br>\n魔法石には隣り合わせにできる組とできない組があります。\n隣り合わせにできる組は <var>(</var>魔法石 <var>A_1,</var> 魔法石 <var>B_1), (</var>魔法石 <var>A_2,</var> 魔法石 <var>B_2), \\dots, (</var>魔法石 <var>A_M,</var> 魔法石 <var>B_M)</var> の <var>M</var> 組で、それ以外の組は隣り合わせることができません。(これらの組において、石の順序は不問です。)<br>\n魔法石 <var>C_1, C_2, \\dots, C_K</var> をそれぞれ <var>1</var> 個以上含む魔法石の列を作ることができるか判定し、作れる場合はそのような列を作るのに必要な魔法石の個数の最小値を求めてください。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li>入力は全て整数</li>\n<li><var>1 ≤&nbsp;N ≤ 10^5</var></li>\n<li><var>0 ≤&nbsp;M ≤ 10^5</var></li>\n<li><var>1 ≤ A_i &lt; B_i ≤ N</var></li>\n<li><var>i ≠ j</var> ならば <var>(A_i, B_i) ≠ (A_j, B_j)</var></li>\n<li><var>1 ≤ K ≤ 17</var></li>\n<li><var>1 ≤ C_1 &lt; C_2 &lt; \\dots &lt; C_K ≤ N</var></li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>\\hspace{7mm}\\vdots</var>\n<var>A_M</var> <var>B_M</var>\n<var>K</var>\n<var>C_1</var> <var>C_2</var> <var>\\cdots</var> <var>C_K</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>魔法石 <var>C_1, C_2, \\dots, C_K</var> を含む魔法石の列を作るのに必要な魔法石の個数の最小値を出力せよ。<br>\n作ることができない場合、代わりに <code>-1</code> を出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>4 3\n1 4\n2 4\n3 4\n3\n1 2 3\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>5\n</pre>\n<p>例えば、魔法石を <var>[1, 4, 2, 4, 3]</var> と並べると、魔法石 <var>1, 2, 3</var> を含む長さ <var>5</var> の列を作ることができます。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>4 3\n1 4\n2 4\n1 2\n3\n1 2 3\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>-1\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>10 10\n3 9\n3 8\n8 10\n2 10\n5 8\n6 8\n5 7\n6 7\n1 6\n2 4\n4\n1 2 7 9\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>11\n</pre>\n<p>例えば、魔法石を <var>[1, 6, 7, 5, 8, 3, 9, 3, 8, 10, 2]</var> と並べると、魔法石 <var>1, 2, 7, 9</var> を含む長さ <var>11</var> の列を作ることができます。</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> kinds of magical gems, numbered <var>1, 2, \\ldots, N</var>, distributed in the AtCoder Kingdom.<br>\nTakahashi is trying to make an ornament by arranging gems in a row.<br>\nFor some pairs of gems, we can put the two gems next to each other; for other pairs, we cannot. We have <var>M</var> pairs for which the two gems can be adjacent: (Gem <var>A_1</var>, Gem <var>B_1</var>), (Gem <var>A_2</var>, Gem <var>B_2</var>), <var>\\ldots</var>, (Gem <var>A_M</var>, Gem <var>B_M</var>). For the other pairs, the two gems cannot be adjacent. (Order does not matter in these pairs.)<br>\nDetermine whether it is possible to form a sequence of gems that has one or more gems of each of the kinds <var>C_1, C_2, \\dots, C_K</var>. If the answer is yes, find the minimum number of stones needed to form such a sequence.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 ≤&nbsp;N ≤ 10^5</var></li>\n<li><var>0 ≤&nbsp;M ≤ 10^5</var></li>\n<li><var>1 ≤ A_i &lt; B_i ≤ N</var></li>\n<li>If <var>i ≠ j</var>, <var>(A_i, B_i) ≠ (A_j, B_j)</var>.</li>\n<li><var>1 ≤ K ≤ 17</var></li>\n<li><var>1 ≤ C_1 &lt; C_2 &lt; \\dots &lt; C_K ≤ N</var></li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>\\hspace{7mm}\\vdots</var>\n<var>A_M</var> <var>B_M</var>\n<var>K</var>\n<var>C_1</var> <var>C_2</var> <var>\\cdots</var> <var>C_K</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of stones needed to form a sequence of gems that has one or more gems of each of the kinds <var>C_1, C_2, \\dots, C_K</var>.<br>\nIf such a sequence cannot be formed, print <code>-1</code> instead.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3\n1 4\n2 4\n3 4\n3\n1 2 3\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>For example, by arranging the gems in the order <var>[1, 4, 2, 4, 3]</var>, we can form a sequence of length <var>5</var> with Gems <var>1, 2, 3</var>.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 3\n1 4\n2 4\n1 2\n3\n1 2 3\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 10\n3 9\n3 8\n8 10\n2 10\n5 8\n6 8\n5 7\n6 7\n1 6\n2 4\n4\n1 2 7 9\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>11\n</pre>\n<p>For example, by arranging the gems in the order <var>[1, 6, 7, 5, 8, 3, 9, 3, 8, 10, 2]</var>, we can form a sequence of length <var>11</var> with Gems <var>1, 2, 7, 9</var>.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/abc190/tasks/abc190_e"}