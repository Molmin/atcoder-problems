{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>ストーリー</h3><p>たこ焼きが大好きな高橋社長は、たこ焼きを移動させるロボットアームの開発をしている。\n二次元グリッドで表現されたたこ焼き器上のいくつかのマスにたこ焼きが置かれている。\nロボットアームを用いて、これらのたこ焼きを指定されたマス集合へ移動させたい。\nロボットアームは複数の指先を持ち、関節と指先を頂点とした木構造で表現される。\n一回の操作で、ロボットアーム全体を上下左右に動かす、関節を軸に90度回転させる、指先でたこ焼きを掴む、離す、という操作を同時に行うことが出来る。\n操作ターン数が出来るだけ少なくなるようにロボットアームを設計し、操作方法を求めて欲しい。</p>\n<p><img src=\"https://img.atcoder.jp/ahc038/GhBuR36w.gif\" alt=\"example\" width=\"300\"></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N\\times N</var> マスのたこ焼き器がある。\n一番左上のマスの座標を <var>(0,0)</var> とし、そこから下方向に <var>i</var> マス、右方向に <var>j</var> マス進んだ先のマスの座標を <var>(i,j)</var> とする。</p>\n<p>初期状態で異なる <var>M</var> マスにたこ焼きが置かれており、\nこれらを指定された <var>M</var> マスの目的地に移動させたい。</p>\n<p>まずはじめに、ロボットアームの設計を行う。\nロボットアームは「関節」と「指先」を頂点とし、その間を剛体の線分で結んだ木構造として表現される。\n指先は木の葉に対応し、関節はそれ以外の頂点に対応する。\n頂点 <var>u</var> とその子供 <var>v</var> を結ぶ辺の長さを <var>L(u,v)</var> と表記する。</p>\n<p>使用可能なロボットアームの頂点数 <var>V</var> が指定されるので、頂点数が <var>V</var> 以下の木を設計し、根の初期位置とともに出力せよ。\n木の各辺の長さ <var>L(u,v)</var> は、<var>1\\leq L(u,v)\\leq N-1</var> を満たす整数値でなければならない。</p>\n<p>次に、設計したロボットアームを操作して、たこ焼きの移動を行う。\n指定した初期位置に根があり、全ての辺が右方向に伸びた状態から開始して、毎ターン以下の操作を独立に行うことが出来る。</p>\n<ol>\n<li>ロボットアーム全体を上下左右に1マス動かすことが出来る。移動後の根の座標 <var>(x,y)</var> は <var>0\\leq x,y\\leq N-1</var> を満たす必要がある。</li>\n<li>根以外の各頂点 <var>u</var> について独立に、<var>u</var> の親 <var>p</var> を軸として <var>u</var> 以下の部分木全体を反時計回りもしくは時計回りに90度回転させることが出来る。</li>\n<li>各指先について独立に、掴んでいるたこ焼きを現在のマスに置く、もしくは現在のマスに存在するたこ焼きを掴むことが出来る。すでにたこ焼きが置かれているマスや <var>N\\times N</var> マスの範囲外にたこ焼きを置くことは出来ない。一つの指先で複数のたこ焼きを同時に掴むことも出来ない。</li>\n</ol>\n<h4>操作2の例</h4>\n<div style=\"display: flex; align-items: center;\">\n    <img src=\"https://img.atcoder.jp/ahc038/GhBuR36w_1.png\" style=\"width: 15%;\">\n    <span style=\"font-size: 24px; margin: 0 10px;\">➡</span>\n    <img src=\"https://img.atcoder.jp/ahc038/GhBuR36w_2.png\" style=\"width: 15%;\">\n    <span style=\"font-size: 24px; margin: 0 10px;\">➡</span>\n    <img src=\"https://img.atcoder.jp/ahc038/GhBuR36w_3.png\" style=\"width: 15%;\">\n</div>\n\n<p>左図から、頂点 <var>0</var> を軸として <var>1</var> 以下の部分木全体を時計回りに回転させると真ん中の図の状態となる。\n更に、頂点 <var>1</var> を軸として <var>3</var> 以下の部分木全体を時計回りに回転させると右図の状態となる。</p>\n<p>操作は 1 と 2 の後に 3 の順で行われ、操作 3 の中では頂点番号の小さい指先から順に処理が行われる (1、2 内の順番は操作後の状態に影響を与えない)。\n操作後にロボットアームの一部が <var>N\\times N</var> マスの外部にはみ出しても良く、ロボットアームの複数の頂点が同じマスを共有しても良い。</p>\n<p>操作は最大で <var>10^5</var> ターン行うことが出来る。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p>操作ターン数を <var>K</var>、操作終了時に目的地に存在するたこ焼きの個数を <var>M'</var> とする。\nこのとき、以下の絶対スコアが得られる。\n<font color=\"red\"><strong>絶対スコアは小さければ小さいほど良い。</strong></font></p>\n<ul>\n<li><var>M'=M</var> の場合、<var>K</var></li>\n<li><var>M'&lt;M</var> の場合、<var>10^5+1000\\times (M-M')</var></li>\n</ul>\n<p>各テストケース毎に、<var>\\mathrm{round}(10^9\\times \\frac{全参加者中の最小絶対スコア}{自身の絶対スコア})</var> の<font color=\"red\"><strong>相対評価スコア</strong></font>が得られ、その和が提出の得点となる。</p>\n<p>最終順位はコンテスト終了後に実施されるより多くの入力に対するシステムテストにおける得点で決定される。\n暫定テスト、システムテストともに、一部のテストケースで不正な出力や制限時間超過をした場合、そのテストケースの相対評価スコアは0点となり、そのテストケースにおいては「全参加者中の最小絶対スコア」の計算から除外される。\nシステムテストは<font color=\"red\"><strong> <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"コンパイルエラー\">CE</span> 以外の結\n果を得た一番最後の提出</strong></font>に対してのみ行われるため、最終的に提出する解答を間違えないよう注意せよ。</p>\n<h4>テストケース数</h4>\n<ul>\n<li>暫定テスト: 50個</li>\n<li>システムテスト: 2000個、コンテスト終了後に <a href=\"https://img.atcoder.jp/ahc038/seeds.txt\">seeds.txt</a> (sha256=c5e999464ec12906e690f995b8d1db2a03a87eec65faff2cecf01263dd035c68) を公開</li>\n</ul>\n<h4>相対評価システムについて</h4>\n<p>暫定テスト、システムテストともに、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"コンパイルエラー\">CE</span> 以外の結果を得た一番最後の提出のみが順位表に反映される。\n相対評価スコアの計算に用いられる各テストケース毎の全参加者中の最小絶対スコアの算出においても、順位表に反映されている最終提出のみが用いられる。</p>\n<p>順位表に表示されているスコアは相対評価スコアであり、新規提出があるたびに、相対評価スコアが再計算される。\n一方、提出一覧から確認出来る各提出のスコアは各テストケース毎の絶対スコアをそのまま足し合わせたものであり、相対評価スコアは表示されない。\n最新以外の提出の、現在の順位表における相対評価スコアを知るためには、再提出が必要である。\n不正な出力や制限時間超過をした場合、提出一覧から確認出来るスコアは0となるが、順位表には正解したテストケースに対する相対スコアの和が表示されている。</p>\n<h4>実行時間について</h4>\n<p>実行時間には多少のブレが生じます。\nまた、システムテストでは同時に大量の実行を行うため、暫定テストに比べて数%程度実行時間が伸びる現象が確認されています。\nそのため、実行時間制限ギリギリの提出がシステムテストで<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる可能性がありま\nす。\nプログラム内で時間を計測して処理を打ち切るか、実行時間に余裕を持たせるようお願いします。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var> <var>M</var> <var>V</var>\n<var>s_{0,0}\\cdots s_{0,N-1}</var>\n<var>\\vdots</var>\n<var>s_{N-1,0}\\cdots s_{N-1,N-1}</var>\n<var>t_{0,0}\\cdots t_{0,N-1}</var>\n<var>\\vdots</var>\n<var>t_{N-1,0}\\cdots t_{N-1,N-1}</var>\n</pre>\n<ul>\n<li>グリッドの大きさ <var>N</var> は <var>15\\leq N\\leq 30</var> を満たす整数値である。</li>\n<li>たこ焼きの個数 <var>M</var> は <var>N^2/10\\leq M\\leq N^2/2</var> を満たす整数値である。</li>\n<li>使用可能なロボットアームの頂点数 <var>V</var> は <var>5\\leq V\\leq 15</var> を満たす整数値である。</li>\n<li><var>s_{i,0}\\cdots s_{i,N-1}</var> は <code>01</code> からなる <var>N</var> 文字の文字列であり、その <var>j</var> 文字目が <code>1</code> の場合、初期状態でマス <var>(i,j)</var> にたこ焼きが置かれていることを表す。たこ焼きが置かれているマスの個数はちょうど <var>M</var> である。</li>\n<li><var>t_{i,0}\\cdots t_{i,N-1}</var> は <code>01</code> からなる <var>N</var> 文字の文字列であり、その <var>j</var> 文字目が <code>1</code> の場合、マス <var>(i,j)</var> は目的地であることを表す。目的地であるマスの個数はちょうど <var>M</var> である。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>設計したロボットアームの頂点数を <var>V'(1\\leq V'\\leq V)</var> とする。\n頂点 <var>0</var> を根とし、頂点 <var>u</var> の親は <var>u</var> 未満となるよう、ロボットアームの各頂点に <var>0,\\cdots,V'-1</var> の番号を振る。\n頂点 <var>u</var> (<var>1\\leq u\\leq V'-1</var>) の親を <var>p_u</var> (<var>0\\leq p_u\\leq u-1</var>) とし、辺 <var>(p_u,u)</var> の長さを <var>L(p_u,u)</var> (<var>1\\leq L(p_u,u)\\leq N-1</var>) とする。\n初期状態における根の座標を <var>(x,y)</var> (<var>0\\leq x,y\\leq N-1</var>) とする。\nこのとき、以下の形式で標準出力に出力せよ。</p>\n<pre><var>V'</var>\n<var>p_1</var> <var>L(p_1,1)</var>\n<var>\\vdots</var>\n<var>p_{V'-1}</var> <var>L(p_{V'-1},V'-1)</var>\n<var>x</var> <var>y</var>\n</pre>\n<p>次に、操作列を出力する。\n1ターンの操作を以下のようにして <var>2V'</var> 文字の文字列 <var>S</var> で表現する。</p>\n<ul>\n<li><var>0</var> 文字目は、ロボットアーム全体を上下左右に1マス動かすならばそれぞれ、<code>U</code>、<code>D</code>、<code>L</code>、<code>R</code> であり、動かさないならば <code>.</code> である。</li>\n<li><var>i</var> 文字目 (<var>1\\leq i\\leq V'-1</var>) は、<var>p_i</var> を軸として頂点 <var>i</var> 以下の部分木全体を反時計回りに <var>90</var> 度回転させるならば <code>L</code>、時計回りに <var>90</var> 度回転させるならば <code>R</code>、何もしないならば <code>.</code>である。</li>\n<li><var>(V'+i)</var> 文字目 (<var>0\\leq i\\leq V'-1</var>) は、頂点 <var>i</var> が指先(葉)でないもしくは何もしないならば <code>.</code>、たこ焼きを掴むもしくは離すならば <code>P</code> である。</li>\n</ul>\n<p>操作列の長さを <var>T</var>、<var>t</var> ターン目の操作列を表す文字列を <var>S_t</var> としたとき、以下の形式で標準出力に出力せよ。</p>\n<pre><var>S_0</var>\n<var>\\vdots</var>\n<var>S_{T-1}</var>\n</pre>\n<p><a href=\"https://img.atcoder.jp/ahc038/GhBuR36w.html?lang=ja&amp;seed=sample&amp;output=sample\">例を見る</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>サンプルプログラム(Python)</h3><details>\nPythonでの解答例を示す。\nこのプログラムでは、2頂点の間を長さ1の辺で結んだ木を作成し、100ターンの間ランダムに動かしながら、目的地へたこ焼きを運んでいる。\n\n<pre class=\"prettyprint linenums\">import random\n\nrandom.seed(42)\nDX = [0, 1, 0, -1]\nDY = [1, 0, -1, 0]\nDIR = ['R', 'D', 'L', 'U']\n\n# read input\nN, M, V = map(int, input().split())\ns = [list(map(int, list(input()))) for _ in range(N)]\nt = [list(map(int, list(input()))) for _ in range(N)]\n\n# design the tree\ntree = [[0, 1]]\nprint(len(tree) + 1)\nfor p, L in tree:\n    print(p, L)\n\n# decide the initial position\nrx, ry = 0, 0\nprint(rx, ry)\n\ndir1 = 0 # direction of edge (0, 1)\nholding = False # whether holding a takoyaki\n\nfor turn in range(100):\n    S = []\n    # random move\n    dir = random.randint(0, 3)\n    dx, dy = DX[dir], DY[dir]\n    if 0 &lt;= rx + dx &lt; N and 0 &lt;= ry + dy &lt; N:\n        rx += dx\n        ry += dy\n        S.append(DIR[dir])\n    else:\n        S.append('.')\n    # random rotate\n    rot = random.randint(0, 2)\n    if rot == 0:\n        S.append('.')\n    elif rot == 1:\n        S.append('L')\n        dir1 = (dir1 + 3) % 4\n    else:\n        S.append('R')\n        dir1 = (dir1 + 1) % 4\n    # grab or release takoyaki\n    x, y = rx + DX[dir1], ry + DY[dir1]\n    change = False\n    if 0 &lt;= x and x &lt; N and 0 &lt;= y and y &lt; N:\n        if s[x][y] == 1 and t[x][y] == 0 and not holding:\n            change = True\n            s[x][y] = 0\n            holding = True\n        elif s[x][y] == 0 and t[x][y] == 1 and holding:\n            change = True\n            s[x][y] = 1\n            holding = False\n    S.append('.') # vertex 0 (root) is not a leaf\n    if change:\n        S.append('P')\n    else:\n        S.append('.')\n    # output the command\n    print(''.join(S))\n</pre>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><p><var>L</var> 以上 <var>U</var> 以下の整数値を一様ランダムに生成する関数を <var>\\mathrm{rand}(L,U)</var>、\n<var>L</var> 以上 <var>U</var> 以下の浮動小数値を一様ランダムに生成する関数を <var>\\mathrm{rand\\_double}(L,U)</var> で表す。</p>\n<p><var>N, M, V</var> は指定された範囲の整数から一様ランダムに生成される。\nたこ焼きの初期位置は以下のようにして生成される。</p>\n<p>まず、<var>N\\times N</var> の重み配列 <var>w</var> を <var>0</var> で初期化する。\n以下の処理を <var>\\mathrm{rand}(1, 5)</var> 回繰り返す。</p>\n<ul>\n<li>中心 <var>(cx,cy)</var> を <var>cx=\\mathrm{rand\\_double}(-1,N), cy=\\mathrm{rand\\_double}(-1,N)</var> により生成</li>\n<li>係数 <var>a</var> を <var>a=\\mathrm{rand\\_double}(0,1)</var> により生成</li>\n<li><var>\\sigma</var> を <var>\\sigma=\\mathrm{rand\\_double}(2,5)</var> により生成</li>\n<li>各マス <var>(i,j)</var> について、<var>w_{i,j}</var> に <var>a\\exp(-((i-cx)^2+(j-cy)^2)/(2\\sigma^2))</var> を加算</li>\n</ul>\n<p>得られた重み <var>w_{i,j}</var> に比例する確率で <var>M</var> 個のマスを非復元抽出し、たこ焼きの初期位置とする。</p>\n<p>たこ焼きの目的地も同じ方法で生成する。\n初期位置に含まれるが目的地に含まれない、もしくは初期位置に含まれないが目的地に含まれるマスの個数を数え、それが <var>M</var> 未満であれば、初期位置と目的地の生成をやり直す。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール(入力ジェネレータ・ビジュアライザ)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc038/GhBuR36w.html?lang=ja\">Web版</a>: ローカル版より高性能でアニメーション表示が可能です。</li>\n<li><a href=\"https://img.atcoder.jp/ahc038/GhBuR36w.zip\">ローカル版</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。<ul>\n<li><a href=\"https://img.atcoder.jp/ahc038/GhBuR36w_windows.zip\">Windows用のコンパイル済みバイナリ</a>: Rust言語の環境構築が面倒な方は代わりにこちらをご利用下さい。</li>\n</ul>\n</li>\n</ul>\n<p>コンテスト期間中に、ビジュアライズ結果の共有や、解法・考察に関する言及は禁止されています。ご注意下さい。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">4 3 4\n0000\n1010\n0000\n0100\n0100\n0001\n1000\n0000\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">4\n0 1\n1 1\n1 2\n0 0\nRRL...PP\nR..R..P.\nDRR...P.\nD.....PP\n</pre>\n<p>問題文の先頭で図示した入出力例となります。\nこの例は、入力の制約は満たしていません。</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Story</h3><p>CEO Takahashi, who loves <a href=\"https://en.wikipedia.org/wiki/Takoyaki\">takoyaki</a> (japanese food), is developing a robotic arm to assist in moving takoyaki on a takoyaki cooker.\nOn the takoyaki cooker represented by a 2D grid, several takoyaki are placed on some of the grid squares.\nUsing a robotic arm, you need to move the takoyaki from these squares to a specified set of target squares.\nThe robotic arm has multiple fingertips and is structured as a tree, with joints and fingertips as its vertices.\nIn a single turn, the robotic arm can simultaneously perform the following actions: move the entire arm up, down, left, or right; rotate around a joint by 90 degrees; grab or release takoyaki with its fingertips.\nDesign the robotic arm and determine the operation method to reduce the number of turns as much as possible.</p>\n<p><img src=\"https://img.atcoder.jp/ahc038/GhBuR36w.gif\" alt=\"example\" width=\"300\"></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an <var>N \\times N</var> takoyaki cooker.\nLet <var>(0,0)</var> be the coordinates of the top-left square and <var>(i,j)</var> be the coordinates of the square located <var>i</var> squares down and <var>j</var> squares to the right from there.</p>\n<p>Initially, takoyaki are placed on <var>M</var> different squares, and you need to move them to <var>M</var> specified target squares.</p>\n<p>First, you must design the robotic arm.\nThe robotic arm is represented as a tree where the \"joints\" and \"fingertips\" are the vertices, and the rigid segments connecting them are the edges.<br>\nThe fingertips correspond to the leaves of the tree, while the joints correspond to the other vertices.<br>\nThe length of the edge connecting vertex <var>u</var> and its child <var>v</var> is denoted as <var>L(u,v)</var>.  </p>\n<p>You are given the number of vertices <var>V</var> available for the robotic arm, and your task is to design a tree with no more than <var>V</var> vertices and output it along with the initial position of the root.\nThe length of each edge <var>L(u,v)</var> must be an integer satisfying <var>1 \\leq L(u,v) \\leq N-1</var>.</p>\n<p>Next, you must operate the designed robotic arm to move the takoyaki.\nStarting from the initial position where the root is at the specified position and all edges extend to the right, you can perform the following operations independently each turn:</p>\n<ol>\n<li>You can move the entire robotic arm one square up, down, left, or right. The new coordinates of the root <var>(x,y)</var> must satisfy <var>0 \\leq x, y \\leq N-1</var>.</li>\n<li>For each vertex <var>u</var> other than the root, you can independently rotate the entire subtree rooted at <var>u</var> by 90 degrees either counterclockwise or clockwise around its parent <var>p</var>.</li>\n<li>For each fingertip, you can independently place the takoyaki it is holding on the current square, or pick up a takoyaki from the current square. You cannot place a takoyaki on a square that already contains one or outside the <var>N \\times N</var> grid. Each fingertip cannot hold more than one takoyaki at the same time.</li>\n</ol>\n<h4>Example of Operation 2</h4>\n<div style=\"display: flex; align-items: center;\">\n    <img src=\"https://img.atcoder.jp/ahc038/GhBuR36w_1.png\" style=\"width: 15%;\">\n    <span style=\"font-size: 24px; margin: 0 10px;\">➡</span>\n    <img src=\"https://img.atcoder.jp/ahc038/GhBuR36w_2.png\" style=\"width: 15%;\">\n    <span style=\"font-size: 24px; margin: 0 10px;\">➡</span>\n    <img src=\"https://img.atcoder.jp/ahc038/GhBuR36w_3.png\" style=\"width: 15%;\">\n</div>\n\n<p>Starting from the left figure, rotating the entire subtree rooted at vertex 1 by 90 degrees clockwise around vertex 0 results in the middle figure.<br>\nFurthermore, rotating the entire subtree rooted at vertex 3 by 90 degrees clockwise around vertex 1 results in the right figure.</p>\n<p>Operations are performed in the order of 1 and 2 first, followed by 3.\nIn operation 3, the fingertips are processed in order from the smallest vertex number to the largest (the order within 1 and 2 does not affect the result).\nIt is allowed for part of the robotic arm to extend outside the <var>N \\times N</var> grid after an operation, and multiple vertices of the robotic arm can occupy the same square.</p>\n<p>You can perform up to <var>10^5</var> turns.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>Let <var>K</var> be the number of turns, and let <var>M'</var> be the number of takoyaki at the target positions at the end of the operations.<br>\nThen, you will obtain the following absolute score.\n<font color=\"red\"><strong>The lower the absolute score, the better.</strong></font></p>\n<ul>\n<li>If <var>M'=M</var>, <var>K</var></li>\n<li>If <var>M'&lt;M</var>, <var>10^5+1000\\times (M-M')</var></li>\n</ul>\n<p>For each test case, we compute the <font color=\"red\"><strong>relative score</strong></font> <var>\\mathrm{round}(10^9\\times \\frac{\\mathrm{MIN}}{\\mathrm{YOUR}})</var>, where YOUR is your absolute score and MIN is the lowest absolute score among all competitors obtained on that test case. The score of the submission is the sum of the relative scores.</p>\n<p>The final ranking will be determined by the system test with more inputs which will be run after the contest is over.\nIn both the provisional/system test, if your submission produces illegal output or exceeds the time limit for some test cases, only the score for those test cases will be zero, and your submission will be excluded from the MIN calculation for those test cases.</p>\n<p>The system test will be performed only for <font color=\"red\"><strong>the last submission which received a result other than <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Compilation Error\">CE</span> </strong></font>.\nBe careful not to make a mistake in the final submission.</p>\n<h4>Number of test cases</h4>\n<ul>\n<li>Provisional test: 50</li>\n<li>System test: 2000. We will publish <a href=\"https://img.atcoder.jp/ahc038/seeds.txt\">seeds.txt</a> (sha256=c5e999464ec12906e690f995b8d1db2a03a87eec65faff2cecf01263dd035c68) after the contest is over.</li>\n</ul>\n<h4>About relative evaluation system</h4>\n<p>In both the provisional/system test, the standings will be calculated using only the last submission which received a result other than <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Compilation Error\">CE</span>.\nOnly the last submissions are used to calculate the MIN for each test case when calculating the relative scores.</p>\n<p>The scores shown in the standings are relative, and whenever a new submission arrives, all relative scores are recalculated.\nOn the other hand, the score for each submission shown on the submissions page is the sum of the absolute score for each test case, and the relative scores are not shown.\nIn order to know the relative score of submission other than the latest one in the current standings, you need to resubmit it.\nIf your submission produces illegal output or exceeds the time limit for some test cases, the score shown on the submissions page will be 0, but the standings show the sum of the relative scores for the test cases that were answered correctly.</p>\n<h4>About execution time</h4>\n<p>Execution time may vary slightly from run to run.\nIn addition, since system tests simultaneously perform a large number of executions, it has been observed that execution time increases by several percent compared to provisional tests.\nFor these reasons, submissions that are very close to the time limit may result in <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> in the system test.\nPlease measure the execution time in your program to terminate the process, or have enough margin in the execution time.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format.</p>\n<pre><var>N</var> <var>M</var> <var>V</var>\n<var>s_{0,0}\\cdots s_{0,N-1}</var>\n<var>\\vdots</var>\n<var>s_{N-1,0}\\cdots s_{N-1,N-1}</var>\n<var>t_{0,0}\\cdots t_{0,N-1}</var>\n<var>\\vdots</var>\n<var>t_{N-1,0}\\cdots t_{N-1,N-1}</var>\n</pre>\n<ul>\n<li>The size of the grid <var>N</var> is an integer that satisfies <var>15 \\leq N \\leq 30</var>.  </li>\n<li>The number of takoyaki <var>M</var> is an integer that satisfies <var>N^2/10 \\leq M \\leq N^2/2</var>.  </li>\n<li>The number of vertices <var>V</var> available for the robotic arm is an integer that satisfies <var>5 \\leq V \\leq 15</var>.  </li>\n<li><var>s_{i,0} \\cdots s_{i,N-1}</var> is a string of length <var>N</var> consisting of <code>01</code>. If the <var>j</var>-th character is <code>1</code>, it means that a takoyaki is initially placed on square <var>(i,j)</var>. The total number of squares with takoyaki is exactly <var>M</var>.  </li>\n<li><var>t_{i,0} \\cdots t_{i,N-1}</var> is a string of length <var>N</var> consisting of <code>01</code>. If the <var>j</var>-th character is <code>1</code>, it means that square <var>(i,j)</var> is a target position. The total number of target squares is exactly <var>M</var>.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>V'</var> be the number of vertices in the designed robotic arm, where <var>1 \\leq V' \\leq V</var>.<br>\nThe vertices of the robotic arm are numbered from <var>0</var> to <var>V'-1</var> such that vertex <var>0</var> is the root, and the parent of vertex <var>u</var> is a vertex with a number smaller than <var>u</var>.<br>\nLet <var>p_u</var> (<var>0 \\leq p_u \\leq u-1</var>) be the parent of vertex <var>u</var> (<var>1 \\leq u \\leq V'-1</var>), and let the length of the edge <var>(p_u, u)</var> be <var>L(p_u, u)</var>, where <var>1 \\leq L(p_u, u) \\leq N-1</var>.<br>\nLet the coordinates of the root in the initial state be <var>(x, y)</var>, where <var>0 \\leq x, y \\leq N-1</var>.\nThen, output to Standard Output in the following format.</p>\n<pre><var>V'</var>\n<var>p_1</var> <var>L(p_1, 1)</var>\n<var>\\vdots</var>\n<var>p_{V'-1}</var> <var>L(p_{V'-1}, V'-1)</var>\n<var>x</var> <var>y</var>\n</pre>\n<p>Next, output the sequence of operations.<br>\nEach turn's operation is represented by a string <var>S</var> of length <var>2V'</var> as follows:</p>\n<ul>\n<li>The <var>0</var>-th character represents the movement of the entire robotic arm by one square up (<code>U</code>), down (<code>D</code>), left (<code>L</code>), right (<code>R</code>), or no movement (<code>.</code>).</li>\n<li>The <var>i</var>-th character (<var>1 \\leq i \\leq V'-1</var>) represents the rotation of the entire subtree rooted at vertex <var>i</var> around <var>p_i</var>: counterclockwise by 90 degrees is represented by <code>L</code>, clockwise by 90 degrees is represented by <code>R</code>, and no rotation is represented by <code>.</code>.</li>\n<li>The <var>(V' + i)</var>-th character (<var>0 \\leq i \\leq V'-1</var>) represents the action of vertex <var>i</var>. If the vertex is not a fingertip (leaf) or no action is taken, it is represented by a <code>.</code>. If the fingertip grabs or releases a takoyaki, it is represented by <code>P</code>.</li>\n</ul>\n<p>Let <var>T</var> be the number of turns, and let <var>S_t</var> represent the string for the <var>t</var>-th turn.\nOutput to Standard Output in the following format.</p>\n<pre><var>S_0</var>\n<var>\\vdots</var>\n<var>S_{T-1}</var>\n</pre>\n<p><a href=\"https://img.atcoder.jp/ahc038/GhBuR36w.html?lang=en&amp;seed=sample&amp;output=sample\">Show example</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Solution(Python)</h3><details>\nHere is a sample solution in Python.\nIn this program, a two-vertex tree with an edge of length 1 is created, and the takoyaki is transported to the destination by moving randomly for 100 turns.\n\n<pre class=\"prettyprint linenums\">import random\n\nrandom.seed(42)\nDX = [0, 1, 0, -1]\nDY = [1, 0, -1, 0]\nDIR = ['R', 'D', 'L', 'U']\n\n# read input\nN, M, V = map(int, input().split())\ns = [list(map(int, list(input()))) for _ in range(N)]\nt = [list(map(int, list(input()))) for _ in range(N)]\n\n# design the tree\ntree = [[0, 1]]\nprint(len(tree) + 1)\nfor p, L in tree:\n    print(p, L)\n\n# decide the initial position\nrx, ry = 0, 0\nprint(rx, ry)\n\ndir1 = 0 # direction of edge (0, 1)\nholding = False # whether holding a takoyaki\n\nfor turn in range(100):\n    S = []\n    # random move\n    dir = random.randint(0, 3)\n    dx, dy = DX[dir], DY[dir]\n    if 0 &lt;= rx + dx &lt; N and 0 &lt;= ry + dy &lt; N:\n        rx += dx\n        ry += dy\n        S.append(DIR[dir])\n    else:\n        S.append('.')\n    # random rotate\n    rot = random.randint(0, 2)\n    if rot == 0:\n        S.append('.')\n    elif rot == 1:\n        S.append('L')\n        dir1 = (dir1 + 3) % 4\n    else:\n        S.append('R')\n        dir1 = (dir1 + 1) % 4\n    # grab or release takoyaki\n    x, y = rx + DX[dir1], ry + DY[dir1]\n    change = False\n    if 0 &lt;= x and x &lt; N and 0 &lt;= y and y &lt; N:\n        if s[x][y] == 1 and t[x][y] == 0 and not holding:\n            change = True\n            s[x][y] = 0\n            holding = True\n        elif s[x][y] == 0 and t[x][y] == 1 and holding:\n            change = True\n            s[x][y] = 1\n            holding = False\n    S.append('.') # vertex 0 (root) is not a leaf\n    if change:\n        S.append('P')\n    else:\n        S.append('.')\n    # output the command\n    print(''.join(S))\n</pre>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><p>Let <var>\\mathrm{rand}(L,U)</var> be a function that generates a uniform random integer between <var>L</var> and <var>U</var>, inclusive.\nLet <var>\\mathrm{rand\\_double}(L,U)</var> be a function that generates a uniform random floating-point number between <var>L</var> and <var>U</var>, inclusive.</p>\n<p>The values of <var>N</var>, <var>M</var>, and <var>V</var> are uniformly generated as random integers within the specified ranges.<br>\nThe initial positions of the takoyaki are generated as follows:</p>\n<p>First, initialize the weight array <var>w</var> of size <var>N \\times N</var> with zeros.<br>\nRepeat the following process <var>\\mathrm{rand}(1, 5)</var> times:</p>\n<ul>\n<li>Generate a center <var>(cx, cy)</var> where <var>cx = \\mathrm{rand\\_double}(-1, N)</var> and <var>cy = \\mathrm{rand\\_double}(-1, N)</var>.</li>\n<li>Generate a coefficient <var>a</var> where <var>a = \\mathrm{rand\\_double}(0, 1)</var>.</li>\n<li>Generate <var>\\sigma</var> where <var>\\sigma = \\mathrm{rand\\_double}(2, 5)</var>.</li>\n<li>For each square <var>(i, j)</var>, add <var>a \\exp(-((i - cx)^2 + (j - cy)^2) / (2 \\sigma^2))</var> to <var>w_{i,j}</var>.</li>\n</ul>\n<p>Then, using probabilities proportional to the obtained weights <var>w_{i,j}</var>, extract <var>M</var> squares without replacement to determine the initial positions of the takoyaki.</p>\n<p>The target positions for the takoyaki are generated in the same way.<br>\nIf the number of squares that are included in the initial positions but not in the target positions, or vice versa, is less than <var>M</var>, redo the generation of both the initial positions and the target positions.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools (Input generator and visualizer)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc038/GhBuR36w.html?lang=en\">Web version</a>: This is more powerful than the local version providing animations.</li>\n<li><a href=\"https://img.atcoder.jp/ahc038/GhBuR36w.zip\">Local version</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.<ul>\n<li><a href=\"https://img.atcoder.jp/ahc038/GhBuR36w_windows.zip\">Pre-compiled binary for Windows</a>: If you are not familiar with the Rust language environment, please use this instead.</li>\n</ul>\n</li>\n</ul>\n<p>Please be aware that sharing visualization results or discussing solutions/ideas during the contest is prohibited.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">4 3 4\n0000\n1010\n0000\n0100\n0100\n0001\n1000\n0000\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">4\n0 1\n1 1\n1 2\n0 0\nRRL...PP\nR..R..P.\nDRR...P.\nD.....PP\n</pre>\n<p>This is an example of input and output, visualized at the beginning of the problem statement.\nThis example does not satisfy the input constraints.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ahc038/tasks/ahc038_a"}