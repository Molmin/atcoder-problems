{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>ストーリー</h3><p>高橋市警では警察官の人手不足解消のために、自動運転の無人パトカーによる自動パトロールが実施されることになった。\n無人パトカーには屋根の上に高性能な全方位カメラが取り付けられており、現在位置からの直線上にある道路全体を一度に見渡すことが出来、画像処理技術を用いて異変が無いかを自動検出する。\n市民の安全で安心な暮らしを守るため、市内の隅から隅まで少なくとも一度は見渡すことが出来るような巡回ルートを設定したい。\nそのような巡回ルートの中で出来るだけ短いものを求めてほしい。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N\\times N</var> マスの地図が与えられる。\n一番左上のマスを <var>(0,0)</var> とし、そこから下方向に <var>i</var> 回、右方向に <var>j</var> 回移動した先のマスを <var>(i, j)</var> とする。\n各マスは障害物(<code>#</code>)もしくは道路であり、道路マス上を上下左右に移動することが出来る。\n各道路マスは<code>5</code>-<code>9</code>の数字で表され、隣接マスからそのマスへの移動にかかる時間を表している。\n位置 <var>(i, j)</var> の道路マス上に居る時、以下の条件を満たす道路マス <var>(i',j')</var> を「視界に入る」と定義する。</p>\n<ul>\n<li><var>i=i'</var> であり、全ての <var>\\min(j,j')\\leq j''\\leq\\max(j,j')</var> に対して <var>(i,j'')</var> が道路マス、もしくは</li>\n<li><var>j=j'</var> であり、全ての <var>\\min(i,i')\\leq i''\\leq\\max(i,i')</var> に対して <var>(i'',j)</var> が道路マス。</li>\n</ul>\n<p>例えば下図では灰色のマスが障害物を、白色と薄黄色のマスが道路を表しており、緑丸の地点に居るときに視界に入る道路マスが薄黄色で塗られている。</p>\n<p><img alt=\"\" src=\"https://img.atcoder.jp/ahc005/1bc7c896310a65486d0ce3aa275f41b7.png\" title=\"視界の例\"></p>\n<p>指定された道路マス <var>(si,sj)</var> からスタートして、道路マス上を上下左右に移動することを繰り返して <var>(si,sj)</var> に戻ってくるような巡回ルートのうちで、全ての道路マスが少なくとも一回は視界に入るようなもののうち、出来るだけ総移動時間の短いものを求めよ。\n同じマス上を何度も移動してよく、Uターンすることも可能である。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p>道路マスの総数を <var>r</var>、少なくとも一回は視界に入った道路マスの総数を <var>v</var>、巡回ルートの総移動時間を <var>t</var> とすると、以下の得点が得られる。</p>\n<ul>\n<li><var>v&lt;r</var> の場合、<var>\\mathrm{round}(10^4\\times \\frac{v}{r})</var></li>\n<li><var>v=r</var> の場合、<var>\\mathrm{round}(10^4+10^7\\times \\frac{N}{t})</var></li>\n</ul>\n<p>不正なルート(<var>N\\times N</var> の外に出る、障害物マス上に移動する、<var>(si,sj)</var> に戻ってこない)が出力された場合、<code>WA</code>と判定される。\nテストケースは全部で100個あり、各テストケースの得点の合計が提出の得点となる。\n1つ以上のテストケースで<code>AC</code>以外の判定がされた場合、提出の得点は0点となる。\nコンテスト時間中に得た最高得点で最終順位が決定され、コンテスト終了後のシステムテストは行われない。\n同じ得点を複数の参加者が得た場合、その得点を獲得した提出の早い方が上位となる。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var> <var>si</var> <var>sj</var>\n<var>c_0</var>\n<var>\\vdots</var>\n<var>c_{N-1}</var>\n</pre>\n\n<ul>\n<li><var>N</var> は <var>49</var> 以上 <var>69</var> 以下の奇数。</li>\n<li><var>si, sj</var> は <var>0\\leq si\\leq N-1</var>、<var>0\\leq sj\\leq N-1</var> を満たす整数値。</li>\n<li>各 <var>c_i</var> は<code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, <code>9</code>, <code>#</code> からなる長さ <var>N</var> の文字列であり、<var>j</var> (<var>0\\leq j\\leq N-1</var>) 文字目の文字は位置 <var>(i, j)</var> のマスの情報を以下のように示している。<ul>\n<li><code>#</code> はそのマスに障害物があることを表す。<var>(si, sj)</var> のマスには障害物が無いことが保証されている。</li>\n<li><code>5</code>から<code>9</code>はそのマスが道路であることを示しており、その数字はそのマスへの移動にかかる時間を表している。</li>\n</ul>\n</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p><var>(i, j)</var> から <var>(i-1,j)</var>, <var>(i+1,j)</var>, <var>(i,j-1)</var>, <var>(i,j+1)</var> への移動をそれぞれ <code>U</code>, <code>D</code>, <code>L</code>, <code>R</code> として巡回ルートを文字列で表し、標準出力に一行で出力せよ。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><p><var>L</var> 以上 <var>U</var> 以下の整数値を一様ランダムに生成する関数を <var>\\mathrm{rand}(L,U)</var> で表す。\nまずはじめに、地図の大きさを表す奇数 <var>N=\\mathrm{rand}(25, 35)\\times 2 - 1</var> と、道路の本数を表すパラメータ <var>K=\\mathrm{rand}(2 N, 4 N)</var> を生成する。\n全てのマスが障害物の状態からスタートし、以下の操作を <var>K</var> 回繰り返す。</p>\n<ol>\n<li>道路の向きを表す整数 <var>d=\\mathrm{rand}(0, 1)</var> を生成する。</li>\n<li>道路の中心を表す整数 <var>i=\\mathrm{rand}(0, (N-1)/2)\\times 2</var> と、<var>j=\\mathrm{rand}(0, N-1)</var> を生成する。</li>\n<li>道路の長さを表す整数 <var>h=\\mathrm{rand}(3, 10)</var> を生成する。</li>\n<li>移動時間を表す整数 <var>w=\\mathrm{rand}(5, 9)</var> を生成する。</li>\n<li>各 <var>\\max(j-h,0)\\leq k\\leq \\min(j+h,N-1)</var> に対して、<var>d=0</var>の場合はマス <var>(i,k)</var> を、<var>d=1</var> の場合はマス <var>(k,i)</var> を移動コスト <var>w</var> の道路マスで上書きする。</li>\n</ol>\n<p>最後に、道路マスの最大連結成分のみを残して残りを障害物に置き換え、道路マスの中から一様ランダムに1マス選んで <var>(si,sj)</var> とする。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc005/c746dac8cc11fd18c68063546997666e.zip\">入力データ</a>: サンプル入力(seed 0)を含む、ローカルテスト用の100個の入力データ(seed 0-99)です。これらの入力は実際のテストケースとは異なります。</li>\n<li><a href=\"https://img.atcoder.jp/ahc005/dc9ed10f037e2dd4b48ca255dbd470d9.html\">Web版ビジュアライザ</a></li>\n<li><a href=\"https://img.atcoder.jp/ahc005/dc9ed10f037e2dd4b48ca255dbd470d9.zip\">入力ジェネレータ・ビジュアライザ</a>: より多くの入力を生成するための入力ジェネレータとローカル実行用のビジュアライザです。使用するには、<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。</li>\n</ul>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>49 32 20\n597999666666666666#99999999999##5###########6####\n5#7###6#############9#6###9#####5#8#########6####\n5#7###6#6666666666666666669#####88888877777777777\n5#7###6#########9###9#6###9#####5#8###5#####6####\n5#7###6#########9##99969999988888889##5#####6####\n5#7###6#########9###9#6###9#####5#8###5#####6####\n5#7###6#6#######9###55555595555555899999888868888\n5#7###6#6#8#####9###9#6###9#####5#8###5#####6####\n7777777777777777777#9#6###9##8895989995999996####\n5#7###6#6#8#6###9###9#6#####6###5#8###5#####6####\n5#5#6#6#677777778888888888886###6#8##666666666###\n6#5#6#6#6#8#6###6###5#6#####6###6#8###5#5###6####\n6#5999696989699999#777777777777777777777999999999\n6#5#6#6###8#6###6#####6#####6###6#8###5#5###6####\n6#5#6#6###8868888###########676666666666666666666\n6#5#6#6###8#6###6#9#########6###8#8#####5###6####\n6#5#6#6555555555579777777777677787877777577777778\n6#5#6#6###8#6###6#9#####5###6###8#8#####5#####6##\n555555555555555666665677777777768#866666666666666\n7#5#6#9###8#6###6#9#5###5#8#####8#8#######9###9##\n7959699999896###9#9#5###5#8#####88888888889888988\n7#5#6#9#5#8#6###9#9#5###5#8#####8#8#######9###9##\n7#777797578777777797577#5#8#####8#########9###9##\n7###9#9#5#8#####9#9#5###5#8#####8#8#######9###9##\n7###9#5#5#8#####9#9#5###5#8#####8#8#######9###9##\n7###9#5#5#8#####9#9#5#####8#####8#8#####8#9###9##\n7###9999558555555555555555559999899#####8#9###9##\n7###9#5#5#8#######8#5#####8#####8#8#####8#9###9##\n688898685888######8#599999999999895###9#8#8###9##\n6###9#6#5#########8#5#####8#####8#5#8#9#8#8###9##\n67779777777777777788555555555555866686968666666##\n6###9#6#5###8#8###8#5###8#8#####8#5#8#8#8#8###6##\n6666966666698999998959999999##5#8#5#8#8#8#8###6##\n6###9#6#####8#8###8#5###8#8###5#8#5#8#8#8#8#6#6##\n6###9#6#####8#9#558575555#####5#8#5#8#8#8#8#6#6##\n6###9#6#####8#9###8#7###8#####5###5#8#8#8###6#6##\n6#6#9#6#####8#9#9#8#7#9#8#####5##9998989899969699\n6#6#9#6#####8#9#9#8#7#9#8#####5###8#8#8#8###6####\n6#7#9#6#55558595958#7#55855555555555858#####6####\n##7#9#6#####8#9#9#8#7#9#8#####5###8#8#8#####6####\n6#7888888888888888888888666###5#555555855555655##\n6#7###6#####8#9#9#8#7#8#8#####7###8###8#####6####\n6#7#855555558595999979999999997#####5#8#####6####\n6#7#8#6#####8#7#9#8#7#8#######7#####5#8#####6####\n6#7#8#6#####8#78988878888#####7#####5#8#####6#7##\n6#7#8#######8#7#9#8#7#8#######7#####5#8#####6#7##\n6#7#8#####8888789#8#7#87777777777777578777776#7##\n6#7#8#######8#7#9#8#7#8#######7#####5#8#####6#7##\n6979899995558575958575555555555555555555555565755\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>UULLDDDDRRRRRRUULLLL\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Story</h3><p>To solve the shortage of police officers, the Takahashi City Police Department has decided to introduce automated patrols with unmanned patrol cars.\nThe unmanned patrol car is equipped with a high-resolution omnidirectional camera on the roof, which can see the entire road at once in a straight line from the current position. And then, it uses image processing technology to automatically detect suspicious activities.\nIn order to provide a safe and secure life for the citizens, we want to set up a patrol route that allows the patrol car to see every corner of the city at least once.\nAmong such patrol routes, please find as short a one as possible.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a map consisting of <var>N\\times N</var> squares.\nLet <var>(0,0)</var> denote the top-left square, and <var>(i,j)</var> denote the square at the <var>i</var>-th row from the top and <var>j</var>-th column from the left.\nEach square is either an obstacle (<code>#</code>) or a road, and you can move up, down, left, or right on the road squares.\nEach road square contains a number <code>5</code>-<code>9</code>, which represents the amount of time you take to move from an adjacent square to that square.\nWe define that a road square <var>(i',j')</var> is visible from <var>(i,j)</var> if and only if the following conditions are satisfied:</p>\n<ul>\n<li><var>i=i'</var> and for every <var>j''</var> with <var>\\min(j,j')\\leq j''\\leq\\max(j,j')</var>, <var>(i,j'')</var> is a road square, or</li>\n<li><var>j=j'</var> and for every <var>i''</var> with <var>\\min(i,i')\\leq i''\\leq\\max(i,i')</var>, <var>(i'',j)</var> is a road square.</li>\n</ul>\n<p>For example, in the figure below, the gray squares represent obstacles, the white and light yellow squares represent roads, and the road squares that are visible from the green circle are colored light yellow.</p>\n<p><img alt=\"\" src=\"https://img.atcoder.jp/ahc005/1bc7c896310a65486d0ce3aa275f41b7.png\" title=\"Example of visible squares\"></p>\n<p>Your task is to find a route starting from a specified square <var>(si,sj)</var>, moving up, down, left, or right on road squares, and returning to <var>(si,sj)</var>, such that all the road squares become visible at least once.\nThe shorter the route, the higher the score.\nYou can move on the same square multiple times and even make a U-turn.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>Let <var>r</var> be the total number of road squares, <var>v</var> be the number of road squares that become visible at least once, and <var>t</var> be the total travel time of the output route. Then you will obtain the following score.</p>\n<ul>\n<li>If <var>v&lt;r</var>, <var>\\mathrm{round}(10^4\\times \\frac{v}{r})</var>.</li>\n<li>If <var>v=r</var>, <var>\\mathrm{round}(10^4+10^7\\times \\frac{N}{t})</var>.</li>\n</ul>\n<p>If the output is illegal (going out of <var>N\\times N</var> squares, moving on obstacle squares, or not returning to <var>(si,sj)</var>), it will be judged as <code>WA</code>.\nThere are 100 test cases, and the score of a submission is the total score for each test case. If you get a result other than <code>AC</code> for one or more test cases, the score of the submission will be zero. The highest score obtained during the contest time will determine the final ranking, and there will be no system test after the contest. If more than one participant gets the same score, the ranking will be determined by the submission time of the submission that received that score.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>si</var> <var>sj</var>\n<var>c_0</var>\n<var>\\vdots</var>\n<var>c_{N-1}</var>\n</pre>\n\n<ul>\n<li><var>N</var> is an odd integer between <var>49</var> and <var>69</var>, inclusive.</li>\n<li><var>si, sj</var> are integers satisfying <var>0\\leq si\\leq N-1</var> and <var>0\\leq sj\\leq N-1</var>.</li>\n<li>Each <var>c_i</var> is a string of length exactly <var>N</var> consisting of characters <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, <code>9</code>, and <code>#</code>. The <var>j</var>-th character (<var>0\\leq j\\leq N-1</var>) represents the square <var>(i,j)</var> as follows.<ul>\n<li><code>#</code> means that the square contains an obstacle. It is guaranteed that <var>(si, sj)</var> does not contain obstacles.</li>\n<li><code>5</code>-<code>9</code> show that the square is a road, and the number represents the amount of time you take to move from an adjacent square to that square.</li>\n</ul>\n</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <code>U</code>, <code>D</code>, <code>L</code>, and <code>R</code> represent the movement from <var>(i, j)</var> to <var>(i-1,j)</var>, <var>(i+1,j)</var>, <var>(i,j-1)</var>, and <var>(i,j+1)</var>, respectively.\nOutput a string representing the route to Standard Output in one line.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><p>Let <var>\\mathrm{rand}(L,U)</var> be a function that generates a uniformly random integer between <var>L</var> and <var>U</var>, inclusive.\nWe first generate an odd integer <var>N=\\mathrm{rand}(25, 35)\\times 2 - 1</var> which represents the size of the map and a parameter <var>K=\\mathrm{rand}(2 N, 4 N)</var> which represents the number of roads.\nStarting from an initial map where all squares are obstacles, we repeat the following procedure <var>K</var> times.</p>\n<ol>\n<li>Generate an integer <var>d=\\mathrm{rand}(0, 1)</var> representing the direction of the road.</li>\n<li>Generate two integers <var>i=\\mathrm{rand}(0, (N-1)/2)\\times 2</var> and <var>j=\\mathrm{rand}(0, N-1)</var> representing the center of the road.</li>\n<li>Generate an integer <var>h=\\mathrm{rand}(3, 10)</var> representing the length of the road.</li>\n<li>Generate an integer <var>w=\\mathrm{rand}(5, 9)</var> representing the travel time.</li>\n<li>For each <var>k</var> with <var>\\max(j-h,0)\\leq k\\leq \\min(j+h,N-1)</var>, we overwrite square <var>(i,k)</var> when <var>d=0</var> or square <var>(k,i)</var> when <var>d=1</var> with a road square with travel time <var>w</var>.</li>\n</ol>\n<p>After the repetition, we keep only the largest connected component of road squares and replace the rest with obstacles.\nFinally, we select <var>(si,sj)</var> uniformly at random from the road squares.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc005/c746dac8cc11fd18c68063546997666e.zip\">Inputs</a>: A set of 100 inputs (seed 0-99) for local testing, including the sample input (seed 0). These inputs are different from the actual test cases.</li>\n<li><a href=\"https://img.atcoder.jp/ahc005/dc9ed10f037e2dd4b48ca255dbd470d9.html\">Visualizer on the web</a></li>\n<li><a href=\"https://img.atcoder.jp/ahc005/dc9ed10f037e2dd4b48ca255dbd470d9.zip\">Input generator and visualizer</a>: If you want to use more inputs, or if you want to visualize your output locally, you can use this program. You need a compilation environment of <a href=\"https://www.rust-lang.org/ja\">Rust language</a>.</li>\n</ul>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>49 32 20\n597999666666666666#99999999999##5###########6####\n5#7###6#############9#6###9#####5#8#########6####\n5#7###6#6666666666666666669#####88888877777777777\n5#7###6#########9###9#6###9#####5#8###5#####6####\n5#7###6#########9##99969999988888889##5#####6####\n5#7###6#########9###9#6###9#####5#8###5#####6####\n5#7###6#6#######9###55555595555555899999888868888\n5#7###6#6#8#####9###9#6###9#####5#8###5#####6####\n7777777777777777777#9#6###9##8895989995999996####\n5#7###6#6#8#6###9###9#6#####6###5#8###5#####6####\n5#5#6#6#677777778888888888886###6#8##666666666###\n6#5#6#6#6#8#6###6###5#6#####6###6#8###5#5###6####\n6#5999696989699999#777777777777777777777999999999\n6#5#6#6###8#6###6#####6#####6###6#8###5#5###6####\n6#5#6#6###8868888###########676666666666666666666\n6#5#6#6###8#6###6#9#########6###8#8#####5###6####\n6#5#6#6555555555579777777777677787877777577777778\n6#5#6#6###8#6###6#9#####5###6###8#8#####5#####6##\n555555555555555666665677777777768#866666666666666\n7#5#6#9###8#6###6#9#5###5#8#####8#8#######9###9##\n7959699999896###9#9#5###5#8#####88888888889888988\n7#5#6#9#5#8#6###9#9#5###5#8#####8#8#######9###9##\n7#777797578777777797577#5#8#####8#########9###9##\n7###9#9#5#8#####9#9#5###5#8#####8#8#######9###9##\n7###9#5#5#8#####9#9#5###5#8#####8#8#######9###9##\n7###9#5#5#8#####9#9#5#####8#####8#8#####8#9###9##\n7###9999558555555555555555559999899#####8#9###9##\n7###9#5#5#8#######8#5#####8#####8#8#####8#9###9##\n688898685888######8#599999999999895###9#8#8###9##\n6###9#6#5#########8#5#####8#####8#5#8#9#8#8###9##\n67779777777777777788555555555555866686968666666##\n6###9#6#5###8#8###8#5###8#8#####8#5#8#8#8#8###6##\n6666966666698999998959999999##5#8#5#8#8#8#8###6##\n6###9#6#####8#8###8#5###8#8###5#8#5#8#8#8#8#6#6##\n6###9#6#####8#9#558575555#####5#8#5#8#8#8#8#6#6##\n6###9#6#####8#9###8#7###8#####5###5#8#8#8###6#6##\n6#6#9#6#####8#9#9#8#7#9#8#####5##9998989899969699\n6#6#9#6#####8#9#9#8#7#9#8#####5###8#8#8#8###6####\n6#7#9#6#55558595958#7#55855555555555858#####6####\n##7#9#6#####8#9#9#8#7#9#8#####5###8#8#8#####6####\n6#7888888888888888888888666###5#555555855555655##\n6#7###6#####8#9#9#8#7#8#8#####7###8###8#####6####\n6#7#855555558595999979999999997#####5#8#####6####\n6#7#8#6#####8#7#9#8#7#8#######7#####5#8#####6####\n6#7#8#6#####8#78988878888#####7#####5#8#####6#7##\n6#7#8#######8#7#9#8#7#8#######7#####5#8#####6#7##\n6#7#8#####8888789#8#7#87777777777777578777776#7##\n6#7#8#######8#7#9#8#7#8#######7#####5#8#####6#7##\n6979899995558575958575555555555555555555555565755\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>UULLDDDDRRRRRRUULLLL\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ahc005/tasks/ahc005_a"}