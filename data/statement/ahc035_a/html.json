{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>ストーリー</h3><p>AtCoder社は、穀物の品種改良に取り組んでいる。穀物は美味しさ、収穫量、病気への耐性など複数の評価項目を持っており、高橋社長は全ての評価項目に優れた穀物を作り上げたいと考えている。</p>\n<p>グリッド状の畑に穀物の種を植えると、隣り合ったマスに植えられた2つの種同士の各評価項目の値をランダムに受け継いだ新しい種が1年後に収穫できる。種植えと収穫を何度か繰り返して、できるだけ優れた穀物の種を作り上げて欲しい。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N\\times N</var> マスのグリッドで表される畑がある。畑の一番左上のマスの座標を <var>(0,0)</var> とし、そこから下方向に <var>i</var> マス、右方向に <var>j</var> マス移動した先のマスの座標を <var>(i,j)</var> とする。</p>\n<p>穀物の種が <var>2N(N-1)</var> 個与えられる。評価項目が <var>M</var> 個存在し、種 <var>k</var> には各評価項目の良さを表す非負整数ベクトル <var>\\boldsymbol{x_k}=(x_{k,0}, x_{k, 1}, \\cdots, x_{k,M-1})</var> （以下、評価項目ベクトルと呼ぶ）が定められており、種 <var>k</var> の価値 <var>V_k</var> は <var>V_k=\\sum_{l=0}^{M-1}x_{k,l}</var> で表される。</p>\n<p>以下の操作を <var>T</var> 回繰り返すことで、手持ちの種の価値の最大値 <var>\\max (V_0, V_1, \\cdots, V_{2N(N-1)-1})</var> をできるだけ大きくせよ。</p>\n<ul>\n<li>畑の <var>N^2</var> 個のマスに1つずつ種を植える。同じ種を複数のマスに植えることはできず、植えなかった <var>2N(N-1)-N^2</var> 個の種は全て破棄される。その後、上下左右に隣接するマスに植えられた種のペア <var>(k, k')</var> について、新たな評価項目ベクトルを持った新しい種が生成される。この評価項目ベクトルの <var>l</var> 番目の要素の値は、もとの種の <var>x_{k,l}</var> および <var>x_{k',l}</var> から等確率でランダムに選ばれる。これによって生成された <var>2N(N-1)</var> 個の種が新たな手持ちの種となる。</li>\n</ul>\n<details>\n<summary>新しい種の生成の例</summary>\n例として、 <var>M=3</var> のときに種 <var>0</var> をマス <var>(0, 0)</var> に、種 <var>1</var> をマス <var>(0, 1)</var> に植えることを考える。種 <var>0</var> の評価項目ベクトルが <var>\\boldsymbol{x_0}=(1, 2, 3)</var> 、種 <var>1</var> の評価項目ベクトルが <var>\\boldsymbol{x_1}=(4, 5, 6)</var> であったとすると、新しい種の評価項目ベクトルとしてありうるものは以下の <var>8</var> 個である。\n\n<ul>\n<li><var>(1, 2, 3)</var></li>\n<li><var>(1, 2, 6)</var></li>\n<li><var>(1, 5, 3)</var></li>\n<li><var>(1, 5, 6)</var></li>\n<li><var>(4, 2, 3)</var></li>\n<li><var>(4, 2, 6)</var></li>\n<li><var>(4, 5, 3)</var></li>\n<li><var>(4, 5, 6)</var></li>\n</ul>\n\nこれら <var>8</var> 個の評価項目ベクトルから等確率でランダムに <var>1</var> 個が選ばれ、新しい種の評価項目ベクトルとなる。\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p>最初に与えられる <var>2N(N-1)</var> 個の種に対して、評価項目ベクトルの <var>l</var> 番目の要素の最大値を <var>X_l=\\max(x_{0,l}, x_{1, l}, \\cdots, x_{2N(N-1)-1, l})</var> とする。 <var>T</var> 回の操作終了後の手持ちの種の価値 <var>V_i</var> の最大値を <var>W=\\max(V_0, V_1, \\cdots, V_{2N(N-1)-1})</var> としたとき、 <var>\\mathrm{round}(10^6\\times W/\\sum_{l=0}^{M-1}{X_l})</var> 点が得られる。</p>\n<p>テストケースは全部で 300 個あり、各テストケースの得点の合計が提出の得点となる。\n一つ以上のテストケースで不正な出力や制限時間超過をした場合、提出全体の判定が<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span>や<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる。\nコンテスト時間中に得た最高得点で最終順位が決定され、コンテスト終了後のシステムテストは行われない。 同じ得点を複数の参加者が得た場合、提出時刻に関わらず同じ順位となる。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入出力</h3><p><strong>※この問題はインタラクティブ形式である。以下の内容を読み、ジャッジプログラムとのやり取りを行うこと。</strong></p>\n<p>まずはじめに、標準入力からグリッドの大きさ <var>N</var>、評価項目の数 <var>M</var>、操作回数 <var>T</var>、評価項目ベクトル <var>\\boldsymbol{x_k}=(x_{k,0}, x_{k,1}, \\cdots, x_{k,M-1})</var> が以下の形式で与えられる。</p>\n<pre><var>N</var> <var>M</var> <var>T</var>\n<var>x_{0,0}</var> <var>\\cdots</var> <var>x_{0,M-1}</var>\n<var>\\vdots</var>\n<var>x_{2N(N-1)-1,0}</var> <var>\\cdots</var> <var>x_{2N(N-1)-1,M-1}</var>\n</pre>\n<p>ここで、入力は以下の制約を満たす。</p>\n<ul>\n<li><var>N=6</var></li>\n<li><var>M=15</var></li>\n<li><var>T=10</var></li>\n<li><var>0\\le x_{k,l}\\le 100</var></li>\n<li>入力は全て整数</li>\n</ul>\n<p>上記の情報を読み込んだら、以下の処理を <var>T</var> ターン繰り返す。</p>\n<p>各ターンでは、まず各マスにどの種を植えるかについて以下の形式で標準出力へ出力せよ。</p>\n<pre><var>A_{0,0}</var> <var>\\cdots</var> <var>A_{0,N-1}</var>\n<var>\\vdots</var>\n<var>A_{N-1,0}</var> <var>\\cdots</var> <var>A_{N-1,N-1}</var>\n</pre>\n<p>ここで、 <var>A_{i,j}</var> はマス <var>(i,j)</var> に植える種の番号を表し、 <var>0\\le A_{i,j} \\lt 2N(N-1)</var> を満たす整数である必要がある。同一ターン内で同じ <var>A_{i,j}</var> を複数回出力してはならない。</p>\n<p>出力後、新たに生成された <var>2N(N-1)</var> 個の種の評価項目ベクトルが以下の形式で標準入力から与えられる。</p>\n<pre><var>x_{0,0}</var> <var>\\cdots</var> <var>x_{0,M-1}</var>\n<var>\\vdots</var>\n<var>x_{2N(N-1)-1,0}</var> <var>\\cdots</var> <var>x_{2N(N-1)-1,M-1}</var>\n</pre>\n<p>ここで、評価項目ベクトルの各要素は <var>0\\le x_{k,l}\\le 100</var> を満たす整数である。</p>\n<p><strong>出力の後には改行をし、更に標準出力を flush しなければならない。</strong> そうしない場合、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる可能性がある。</p>\n<p>解答プログラムは、<code>#</code> から始まるコメント行を出力に含めても良い。 Web版ビジュアライザを使用すると、コメント行を対応するタイミングで表示出来るため、デバッグや考察等に役立てることが出来る。 ジャッジプログラムはコメント行を全て無視するため、コメント行を出力するプログラムをそのまま提出可能である。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入出力例</h3><p>以下は入力の制約を満たさない説明用の入力である点に注意せよ。</p>\n<table class=\"table table-bordered\">\n<thead>\n<tr>\n<th>ターン</th><th>Output</th><th>Input</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>事前情報</td>\n<td></td>\n<td><pre>3 5 10\n42 45 29 50 53\n19 35 91 0 11\n35 83 30 9 31\n28 18 20 28 88\n0 52 21 66 51\n24 9 35 10 89\n57 27 13 73 24\n22 2 5 78 59\n66 67 27 18 12\n81 38 24 21 32\n89 21 32 16 19\n6 27 9 67 68\n</pre></td>\n</tr>\n<tr>\n<td>0</td>\n<td><pre>5 4 7\n8 9 0\n11 2 6\n</pre></td>\n<td><pre>0 52 21 10 89\n0 52 21 78 59\n66 67 24 18 32\n81 38 24 50 32\n6 27 30 67 31\n57 27 13 73 24\n24 9 27 10 12\n81 52 24 21 51\n42 45 5 50 53\n66 27 27 67 68\n35 83 30 9 31\n42 27 13 73 53\n</pre></td>\n</tr>\n<tr>\n<td>1</td>\n<td><pre>6 8 11\n3 9 1\n7 2 5\n</pre></td>\n<td><pre>42 45 5 10 12\n42 45 13 73 53\n66 38 24 50 32\n66 52 27 67 68\n81 52 24 18 32\n66 67 13 18 32\n81 38 27 10 12\n42 27 5 50 68\n0 52 13 78 53\n81 52 24 50 32\n66 67 27 67 32\n0 52 13 78 59\n</pre></td>\n</tr>\n<tr>\n<td><var>\\vdots</var></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>9</td>\n<td><pre>2 6 10\n8 1 9\n11 4 3\n</pre></td>\n<td><pre>42 27 5 50 68\n42 27 5 50 32\n0 67 27 50 68\n42 27 5 50 68\n42 27 24 50 32\n42 67 5 50 68\n42 67 24 50 68\n42 27 27 50 68\n0 27 5 50 32\n0 67 24 50 68\n42 67 5 50 68\n42 27 5 50 32\n</pre></td>\n</tr>\n</tbody>\n</table>\n\n<p>この例では、 <var>W=V_6=42+67+24+50+68=251</var> 、 <var>\\sum_{l=0}^{M-1}{X_l}=89+83+91+78+89=430</var> であるため、 <var>583721</var> 点が得られる。</p>\n<p><a href=\"https://img.atcoder.jp/ahc035/F5dI2O6U.html?lang=ja&amp;seed=0&amp;output=sample\">例を見る</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>サンプルプログラム(Python)</h3><details>\nPythonでの解答例を示す。このプログラムでは、毎回0番目から35番目までの種を左上から右下に順番に並べて出力している。\n\n<pre class=\"prettyprint linenums\">N, M, T = map(int, input().split())\nSEED_COUNT = 2 * N * (N - 1)\nX = []\n\nfor i in range(SEED_COUNT):\n    X.append(list(map(int, input().split())))\n\nfor t in range(T):\n    A = [[0] * N for i in range(N)]\n\n    for i in range(N):\n        for j in range(N):\n            A[i][j] = i * N + j\n\n    for i in range(N):\n        print(' '.join(map(str, A[i])), flush=True)\n\n    X = []\n\n    for i in range(SEED_COUNT):\n        X.append(list(map(int, input().split())))\n</pre>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>サンプルプログラム(C++)</h3><details>\nC++での解答例を示す。このプログラムでは、毎回0番目から35番目までの種を左上から右下に順番に並べて出力している。\n<pre class=\"prettyprint linenums\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint main() {\n    int N, M, T;\n    cin &gt;&gt; N &gt;&gt; M &gt;&gt; T;\n\n    int seed_count = 2 * N * (N - 1);\n    vector&lt;vector&lt;int&gt;&gt; X(seed_count, vector&lt;int&gt;(M, 0));\n\n    for (int i = 0; i &lt; seed_count; i++) {\n        for (int j = 0; j &lt; M; j++) {\n            cin &gt;&gt; X[i][j];\n        }\n    }\n\n    for (int t = 0; t &lt; T; t++) {\n        vector&lt;vector&lt;int&gt;&gt; A(N, vector&lt;int&gt;(N, 0));\n\n        for (int i = 0; i &lt; N; i++) {\n            for (int j = 0; j &lt; N; j++) {\n                A[i][j] = i * N + j;\n            }\n        }\n\n        for (int i = 0; i &lt; N; i++) {\n            for (int j = 0; j &lt; N; j++) {\n                cout &lt;&lt; A[i][j];\n\n                if (j &lt; N - 1) {\n                    cout &lt;&lt; \" \";\n                } else {\n                    cout &lt;&lt; endl;\n                }\n            }\n        }\n\n        cout.flush();\n\n        for (int i = 0; i &lt; seed_count; i++) {\n            for (int j = 0; j &lt; M; j++) {\n                cin &gt;&gt; X[i][j];\n            }\n        }\n    }\n\n    return 0;\n}\n</pre>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><p><a href=\"https://ja.wikipedia.org/wiki/%E6%AD%A3%E8%A6%8F%E5%88%86%E5%B8%83#%E6%A8%99%E6%BA%96%E6%AD%A3%E8%A6%8F%E5%88%86%E5%B8%83\">標準正規分布</a>から値を生成する関数を <var>\\mathrm{randnormal}()</var> と定義する。</p>\n<p>各 <var>k=0, 1, \\cdots, 2N(N-1)</var> に対して、以下のようにして <var>\\boldsymbol{x_k}=(x_{k,0}, x_{k,1}, \\cdots, x_{k,M-1})</var> を生成する。</p>\n<p><var>M</var> 次元のベクトル <var>(x_{k,0}',\\cdots,x_{k,M-1}')</var> を <var>x_{k,l}'=|\\mathrm{randnormal}()|</var> により生成する。 <var>p_k=\\frac{100}{\\sqrt{\\sum_{l=0}^{M-1}x_{k,l}'^2}}</var> として、 <var>x_{k,l}=\\mathrm{round}(p_kx_{k,l}')</var> とする。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール(入力ジェネレータ・ローカルテスタ・ビジュアライザ)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc035/F5dI2O6U.html?lang=ja\">Web版</a>: ローカル版より高性能でアニメーション表示が可能です。</li>\n<li><a href=\"https://img.atcoder.jp/ahc035/F5dI2O6U.zip\">ローカル版</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。<ul>\n<li><a href=\"https://img.atcoder.jp/ahc035/F5dI2O6U_windows.zip\">Windows用のコンパイル済みバイナリ</a>: Rust言語の環境構築が面倒な方は代わりにこちらをご利用下さい。</li>\n</ul>\n</li>\n</ul>\n<p>コンテスト期間中における、ビジュアライズ結果の共有や解法・考察に関する言及は禁止されています。ご注意下さい。</p>\n<h4>ツールで用いられる入力ファイルの仕様</h4>\n<details>\n\nローカルテスタに与える入力ファイルは以下の形式を用いている。\n\n\n\n<pre><var>N</var> <var>M</var> <var>T</var>\n<var>x_{0,0}</var> <var>\\cdots</var> <var>x_{0,M-1}</var>\n<var>\\vdots</var>\n<var>x_{2N(N-1)-1,0}</var> <var>\\cdots</var> <var>x_{2N(N-1)-1,M-1}</var>\n<var>u_{0,0,0}</var> <var>\\cdots</var> <var>u_{0,0,N-2}</var>\n<var>\\vdots</var>\n<var>u_{0,N-1,0}</var> <var>\\cdots</var> <var>u_{0,N-1,N-2}</var>\n<var>v_{0,0,0}</var> <var>\\cdots</var> <var>v_{0,0,N-1}</var>\n<var>\\vdots</var>\n<var>v_{0,N-2,0}</var> <var>\\cdots</var> <var>v_{0,N-2,N-1}</var>\n<var>\\vdots</var>\n<var>u_{T-1,0,0}</var> <var>\\cdots</var> <var>u_{T-1,0,N-2}</var>\n<var>\\vdots</var>\n<var>u_{T-1,N-1,0}</var> <var>\\cdots</var> <var>u_{T-1,N-1,N-2}</var>\n<var>v_{T-1,0,0}</var> <var>\\cdots</var> <var>v_{T-1,0,N-1}</var>\n<var>\\vdots</var>\n<var>v_{T-1,N-2,0}</var> <var>\\cdots</var> <var>v_{T-1,N-2,N-1}</var>\n</pre>\n\n\nここで、 <var>u_{t,i,j}</var> および <var>v_{t,i,j}</var> は <code>0</code>, <code>1</code> からなる <var>M</var> 文字の文字列であり、それぞれ以下を意味する。\n\n<ul>\n<li><var>u_{t,i,j}</var> の <var>l</var> 文字目が <code>0</code> である場合、 <var>t</var> 回目の操作で <var>(i,j)</var> と <var>(i, j+1)</var> に植えられた種 <var>A_{i,j}</var> および <var>A_{i,j+1}</var> から生成される新しい種の評価項目ベクトルの <var>l</var> 番目の要素は <var>x_{A_{i,j},l}</var> となり、<code>1</code> である場合は <var>x_{A_{i,j+1},l}</var> となる。</li>\n<li><var>v_{t,i,j}</var> の <var>l</var> 文字目が <code>0</code> である場合、 <var>t</var> 回目の操作で <var>(i,j)</var> と <var>(i+1, j)</var> に植えられた種  <var>A_{i,j}</var> および <var>A_{i+1,j}</var> から生成される新しい種の評価項目ベクトルの <var>l</var> 番目の要素は <var>x_{A_{i,j},l}</var> となり、<code>1</code> である場合は <var>x_{A_{i+1,j},l}</var> となる。</li>\n</ul>\n\n</details></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Story</h3><p>AtCoder is working on improving the breeds of grain. The grain has multiple evaluation criteria such as taste, yield, and disease resistance. CEO Takahashi aims to create grain that excels in all evaluation criteria.</p>\n<p>By planting grain seeds in a grid-like field, new seeds can be harvested one year later that randomly inherit the value of each evaluation criterion from two adjacent seeds. By repeating the planting and harvesting process several times, please create the best possible grain seeds.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a field represented by an <var>N \\times N</var> grid.\nLet <var>(0, 0)</var> be the coordinates of the top-left square, and <var>(i, j)</var> be the coordinates of the square located <var>i</var> squares down and <var>j</var> squares to the right from there.</p>\n<p>You are given <var>2N(N-1)</var> grain seeds. \nThere are <var>M</var> evaluation criteria, and each seed <var>k</var> has a non-negative integer vector, called the evaluation vector, <var>\\boldsymbol{x_k}=(x_{k,0}, x_{k,1}, \\cdots, x_{k,M-1})</var>, representing the goodness for each criterion. \nThe value <var>V_k</var> of seed <var>k</var> is defined as <var>V_k=\\sum_{l=0}^{M-1}x_{k,l}</var>.</p>\n<p>Repeat the following operation <var>T</var> times to maximize the maximum value <var>\\max (V_0, V_1, \\cdots, V_{2N(N-1)-1})</var> of the seeds you have.</p>\n<ul>\n<li>Plant one seed in each of the <var>N^2</var> squares of the field. The same seed cannot be planted in multiple squares, and the remaining <var>2N(N-1)-N^2</var> seeds that are not planted will be discarded. Then, for each pair of seeds <var>(k, k')</var> planted in adjacent squares (up, down, left, or right), a new seed with a new evaluation vector will be generated. The value of the <var>l</var>-th element of this new evaluation vector is chosen uniformly at random from the original values <var>x_{k,l}</var> and <var>x_{k',l}</var>. The <var>2N(N-1)</var> seeds generated in this way will become the new set of seeds you have.</li>\n</ul>\n<details>\n<summary>Example of generating new seeds</summary>\nFor example, when <var>M=3</var>, consider planting seed <var>0</var> in square <var>(0, 0)</var> and seed <var>1</var> in square <var>(0, 1)</var>. \nIf the evaluation vector of seed <var>0</var> is <var>\\boldsymbol{x_0}=(1, 2, 3)</var> and the evaluation vector of seed <var>1</var> is <var>\\boldsymbol{x_1}=(4, 5, 6)</var>, the possible evaluation vectors for the new seed are the following <var>8</var> possibilities:\n\n<ul>\n<li><var>(1, 2, 3)</var></li>\n<li><var>(1, 2, 6)</var></li>\n<li><var>(1, 5, 3)</var></li>\n<li><var>(1, 5, 6)</var></li>\n<li><var>(4, 2, 3)</var></li>\n<li><var>(4, 2, 6)</var></li>\n<li><var>(4, 5, 3)</var></li>\n<li><var>(4, 5, 6)</var></li>\n</ul>\n\nOne of these <var>8</var> evaluation vectors is chosen uniformly at random and becomes the evaluation vector for the new seed.\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>For the initially given <var>2N(N-1)</var> seeds, let the maximum value of the <var>l</var>-th element of the evaluation vectors be <var>X_l=\\max(x_{0,l}, x_{1,l}, \\cdots, x_{2N(N-1)-1,l})</var>. \nAfter <var>T</var> operations, let the maximum value of the values of the seeds you have be <var>W=\\max(V_0, V_1, \\cdots, V_{2N(N-1)-1})</var>. \nThen you will obtain a score of <var>\\mathrm{round}(10^6 \\times W / \\sum_{l=0}^{M-1}{X_l})</var>.</p>\n<p>There are 300 test cases, and the score of a submission is the total score for each test case.\nIf your submission produces an illegal output or exceeds the time limit for some test cases, the submission itself will be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Wrong Answer\">WA</span> or <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> , and the score of the submission will be zero.\nThe highest score obtained during the contest will determine the final ranking, and there will be no system test after the contest.\nIf more than one participant gets the same score, they will be ranked in the same place regardless of the submission time.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input and Output</h3><p><strong>Note: This problem is interactive. Read the following explanation, and communicate with the judge program accordingly.</strong></p>\n<p>First, you will be given the grid size <var>N</var>, the number of evaluation criteria <var>M</var>, the number of operations <var>T</var>, and the evaluation vectors <var>\\boldsymbol{x_k}=(x_{k,0}, x_{k,1}, \\cdots, x_{k,M-1})</var> in the following format from Standard Input.</p>\n<pre><var>N</var> <var>M</var> <var>T</var>\n<var>x_{0,0}</var> <var>\\cdots</var> <var>x_{0,M-1}</var>\n<var>\\vdots</var>\n<var>x_{2N(N-1)-1,0}</var> <var>\\cdots</var> <var>x_{2N(N-1)-1,M-1}</var>\n</pre>\n<p>The input satisfies the following constraints:</p>\n<ul>\n<li><var>N=6</var></li>\n<li><var>M=15</var></li>\n<li><var>T=10</var></li>\n<li><var>0 \\le x_{k,l} \\le 100</var></li>\n<li>All inputs are integers</li>\n</ul>\n<p>After reading the above information, repeat the following process for <var>T</var> turns.</p>\n<p>In each turn, first output to Standard Output which seed to plant in each square in the following format.</p>\n<pre><var>A_{0,0}</var> <var>\\cdots</var> <var>A_{0,N-1}</var>\n<var>\\vdots</var>\n<var>A_{N-1,0}</var> <var>\\cdots</var> <var>A_{N-1,N-1}</var>\n</pre>\n<p>Here, <var>A_{i,j}</var> represents the number of the seed to be planted in square <var>(i,j)</var> and must be an integer satisfying <var>0 \\le A_{i,j} &lt; 2N(N-1)</var>. The same <var>A_{i,j}</var> must not be output more than once in the same turn.</p>\n<p>After the output, the evaluation vectors of the newly generated <var>2N(N-1)</var> seeds will be given from Standard Input in the following format.</p>\n<pre><var>x_{0,0}</var> <var>\\cdots</var> <var>x_{0,M-1}</var>\n<var>\\vdots</var>\n<var>x_{2N(N-1)-1,0}</var> <var>\\cdots</var> <var>x_{2N(N-1)-1,M-1}</var>\n</pre>\n<p>Here, each element of the evaluation vectors is an integer satisfying <var>0 \\le x_{k,l} \\le 100</var>.</p>\n<p><strong>Each line of the output should end with a new line, and you have to flush Standard Output.</strong>\nOtherwise, the submission might be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span>.</p>\n<p>Your program may output comment lines starting with <code>#</code>. The web version of the visualizer displays the comment lines with the corresponding timings, which may be useful for debugging and analysis. Since the judge program ignores all comment lines, you can submit a program that outputs comment lines as is.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Example</h3><p>Note that the following is an example input for explanatory purposes and does not meet the input constraints.</p>\n<table class=\"table table-bordered\">\n<thead>\n<tr>\n<th>Turn</th><th>Output</th><th>Input</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Prior information</td>\n<td></td>\n<td><pre>3 5 10\n42 45 29 50 53\n19 35 91 0 11\n35 83 30 9 31\n28 18 20 28 88\n0 52 21 66 51\n24 9 35 10 89\n57 27 13 73 24\n22 2 5 78 59\n66 67 27 18 12\n81 38 24 21 32\n89 21 32 16 19\n6 27 9 67 68\n</pre></td>\n</tr>\n<tr>\n<td>0</td>\n<td><pre>5 4 7\n8 9 0\n11 2 6\n</pre></td>\n<td><pre>0 52 21 10 89\n0 52 21 78 59\n66 67 24 18 32\n81 38 24 50 32\n6 27 30 67 31\n57 27 13 73 24\n24 9 27 10 12\n81 52 24 21 51\n42 45 5 50 53\n66 27 27 67 68\n35 83 30 9 31\n42 27 13 73 53\n</pre></td>\n</tr>\n<tr>\n<td>1</td>\n<td><pre>6 8 11\n3 9 1\n7 2 5\n</pre></td>\n<td><pre>42 45 5 10 12\n42 45 13 73 53\n66 38 24 50 32\n66 52 27 67 68\n81 52 24 18 32\n66 67 13 18 32\n81 38 27 10 12\n42 27 5 50 68\n0 52 13 78 53\n81 52 24 50 32\n66 67 27 67 32\n0 52 13 78 59\n</pre></td>\n</tr>\n<tr>\n<td><var>\\vdots</var></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>9</td>\n<td><pre>2 6 10\n8 1 9\n11 4 3\n</pre></td>\n<td><pre>42 27 5 50 68\n42 27 5 50 32\n0 67 27 50 68\n42 27 5 50 68\n42 27 24 50 32\n42 67 5 50 68\n42 67 24 50 68\n42 27 27 50 68\n0 27 5 50 32\n0 67 24 50 68\n42 67 5 50 68\n42 27 5 50 32\n</pre></td>\n</tr>\n</tbody>\n</table>\n\n<p>In this example, since <var>W=V_6=42+67+24+50+68=251</var> and <var>\\sum_{l=0}^{M-1}{X_l}=89+83+91+78+89=430</var>, you will obtain a score of <var>583721</var>.</p>\n<p><a href=\"https://img.atcoder.jp/ahc035/F5dI2O6U.html?lang=en&amp;seed=0&amp;output=sample\">Show example</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Solution (Python)</h3><details>\nHere is a sample solution in Python. The program outputs the 0th through 35th seeds in order from the top left to the bottom right.\n\n<pre class=\"prettyprint linenums\">N, M, T = map(int, input().split())\nSEED_COUNT = 2 * N * (N - 1)\nX = []\n\nfor i in range(SEED_COUNT):\n    X.append(list(map(int, input().split())))\n\nfor t in range(T):\n    A = [[0] * N for i in range(N)]\n\n    for i in range(N):\n        for j in range(N):\n            A[i][j] = i * N + j\n\n    for i in range(N):\n        print(' '.join(map(str, A[i])), flush=True)\n\n    X = []\n\n    for i in range(SEED_COUNT):\n        X.append(list(map(int, input().split())))\n</pre>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Solution (C++)</h3><details>\nHere is a sample solution in C++. The program outputs the 0th through 35th seeds in order from the top left to the bottom right.\n<pre class=\"prettyprint linenums\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint main() {\n    int N, M, T;\n    cin &gt;&gt; N &gt;&gt; M &gt;&gt; T;\n\n    int seed_count = 2 * N * (N - 1);\n    vector&lt;vector&lt;int&gt;&gt; X(seed_count, vector&lt;int&gt;(M, 0));\n\n    for (int i = 0; i &lt; seed_count; i++) {\n        for (int j = 0; j &lt; M; j++) {\n            cin &gt;&gt; X[i][j];\n        }\n    }\n\n    for (int t = 0; t &lt; T; t++) {\n        vector&lt;vector&lt;int&gt;&gt; A(N, vector&lt;int&gt;(N, 0));\n\n        for (int i = 0; i &lt; N; i++) {\n            for (int j = 0; j &lt; N; j++) {\n                A[i][j] = i * N + j;\n            }\n        }\n\n        for (int i = 0; i &lt; N; i++) {\n            for (int j = 0; j &lt; N; j++) {\n                cout &lt;&lt; A[i][j];\n\n                if (j &lt; N - 1) {\n                    cout &lt;&lt; \" \";\n                } else {\n                    cout &lt;&lt; endl;\n                }\n            }\n        }\n\n        cout.flush();\n\n        for (int i = 0; i &lt; seed_count; i++) {\n            for (int j = 0; j &lt; M; j++) {\n                cin &gt;&gt; X[i][j];\n            }\n        }\n    }\n\n    return 0;\n}\n</pre>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><p>Define a function <var>\\mathrm{randnormal}()</var> to generate values from the <a href=\"https://en.wikipedia.org/wiki/Normal_distribution#Standard_normal_distribution\">standard normal distribution</a>.</p>\n<p>For each <var>k=0, 1, \\cdots, 2N(N-1)</var>, generate <var>\\boldsymbol{x_k}=(x_{k,0}, x_{k,1}, \\cdots, x_{k,M-1})</var> as follows.</p>\n<p>Generate an <var>M</var>-dimensional vector <var>(x_{k,0}',\\cdots,x_{k,M-1}')</var> by <var>x_{k,l}'=|\\mathrm{randnormal}()|</var>. Let <var>p_k=\\frac{100}{\\sqrt{\\sum_{l=0}^{M-1}x_{k,l}'^2}}</var> and define <var>x_{k,l}=\\mathrm{round}(p_k x_{k,l}')</var>.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools (Input generator, local tester and visualizer)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc035/F5dI2O6U.html?lang=en\">Web version</a>: This is more powerful than the local version and can display animations.</li>\n<li><a href=\"https://img.atcoder.jp/ahc035/F5dI2O6U.zip\">Local version</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org\">Rust language</a>.<ul>\n<li><a href=\"https://img.atcoder.jp/ahc035/F5dI2O6U_windows.zip\">Pre-compiled binary for Windows</a>: If you are not familiar with the Rust language environment, please use this instead.</li>\n</ul>\n</li>\n</ul>\n<p>Please be aware that sharing visualization results or discussing solutions/ideas during the contest is prohibited.</p>\n<h4>Specification of input files used by the tools</h4>\n<details>\n\nInput files given to the local tester have the following format.\n\n\n<pre><var>N</var> <var>M</var> <var>T</var>\n<var>x_{0,0}</var> <var>\\cdots</var> <var>x_{0,M-1}</var>\n<var>\\vdots</var>\n<var>x_{2N(N-1)-1,0}</var> <var>\\cdots</var> <var>x_{2N(N-1)-1,M-1}</var>\n<var>u_{0,0,0}</var> <var>\\cdots</var> <var>u_{0,0,N-2}</var>\n<var>\\vdots</var>\n<var>u_{0,N-1,0}</var> <var>\\cdots</var> <var>u_{0,N-1,N-2}</var>\n<var>v_{0,0,0}</var> <var>\\cdots</var> <var>v_{0,0,N-1}</var>\n<var>\\vdots</var>\n<var>v_{0,N-2,0}</var> <var>\\cdots</var> <var>v_{0,N-2,N-1}</var>\n<var>\\vdots</var>\n<var>u_{T-1,0,0}</var> <var>\\cdots</var> <var>u_{T-1,0,N-2}</var>\n<var>\\vdots</var>\n<var>u_{T-1,N-1,0}</var> <var>\\cdots</var> <var>u_{T-1,N-1,N-2}</var>\n<var>v_{T-1,0,0}</var> <var>\\cdots</var> <var>v_{T-1,0,N-1}</var>\n<var>\\vdots</var>\n<var>v_{T-1,N-2,0}</var> <var>\\cdots</var> <var>v_{T-1,N-2,N-1}</var>\n</pre>\n\n\n\nHere, <var>u_{t,i,j}</var> and <var>v_{t,i,j}</var> are <var>M</var>-character strings consisting of <code>0</code> and <code>1</code>, and they mean the following:\n\n<ul>\n<li>If the <var>l</var>-th character of <var>u_{t,i,j}</var> is <code>0</code>, the <var>l</var>-th element of the evaluation vector of the new seed generated from the seeds <var>A_{i,j}</var> and <var>A_{i,j+1}</var> planted in <var>(i,j)</var> and <var>(i, j+1)</var> for the <var>t</var>-th operation will be <var>x_{A_{i,j},l}</var>; if it is <code>1</code>, it will be <var>x_{A_{i,j+1},l}</var>.</li>\n<li>If the <var>l</var>-th character of <var>v_{t,i,j}</var> is <code>0</code>, the <var>l</var>-th element of the evaluation vector of the new seed generated from the seeds <var>A_{i,j}</var> and <var>A_{i+1,j}</var> planted in <var>(i,j)</var> and <var>(i+1, j)</var> for the <var>t</var>-th operation will be <var>x_{A_{i,j},l}</var>; if it is <code>1</code>, it will be <var>x_{A_{i+1,j},l}</var>.</li>\n</ul>\n\n</details></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ahc035/tasks/ahc035_a"}