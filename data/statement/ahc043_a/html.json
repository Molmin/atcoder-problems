{"html":{"ja":"<span class=\"lang-ja\">\n            <div class=\"part\">\n                <section>\n                <h3> ストーリー </h3>\n                <p>Nihonbashi Simulator は架空の国Rの鉄道会社Xを経営するターン制のシミュレーションゲームである。あなたはこのゲームの大ファンであり、高い収益を上げる会社にすることを目標としている。線路と駅を適切に建設することで、R国に住む人の通勤を手助けしつつ、Xを最高の鉄道会社に育て上げよう!</p>\n                <h3>問題文</h3>\n                <p>\n                    R国は <var>N</var> 行 <var>N</var> 列のグリッド状に分けられた区画からなる。上から <var>i</var> 行目 <var>(0 \\le i &lt; N)</var>、左から <var>j</var> 列目 <var>(0 \\le j &lt; N)</var> の区画を <var>(i,j)</var> とする。各区画は更地、線路、駅のいずれかである:\n                    </p><ul>\n                        <li>更地\n                            <ul>\n                                <li>他の区画と接続しない。</li>\n                                <li>コストを払うことで、駅または線路を建設することができる。</li>\n                            </ul>\n                        </li>\n                        <li>線路\n                            <ul>\n                                <li>上下左右の更地でない区画のうち、最大2つの区画と接続する。線路は接続先に応じて6種類あり、以下の図のように番号付けられる。</li>\n                                <li>コストを払うことで、駅に置き換えることができる。</li>\n                            </ul>\n                        </li>\n                        <li>駅\n                        <ul>\n                            <li>上下左右の最大4つの更地でない区画と接続する。</li>\n                        </ul>\n                        </li>\n                    </ul>\n                <p></p>\n                <p>\n                    </p><figure style=\"text-align: center; margin: 2em auto;\">\n                        <svg height=\"150\" id=\"vis\" viewBox=\"-12 -12 429 159\" width=\"500\" style=\"display: block; margin: 0 auto;\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <rect fill=\"white\" height=\"159\" width=\"429\" x=\"-12\" y=\"-12\"></rect>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"0\" x2=\"405\" y1=\"0\" y2=\"0\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"0\" x2=\"405\" y1=\"67.5\" y2=\"67.5\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"67.5\" x2=\"67.5\" y1=\"0\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"0\" x2=\"405\" y1=\"135\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"135\" x2=\"135\" y1=\"0\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"202.5\" x2=\"202.5\" y1=\"0\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"270\" x2=\"270\" y1=\"0\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"337.5\" x2=\"337.5\" y1=\"0\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"405\" x2=\"405\" y1=\"0\" y2=\"135\"></line>\n                            <text font-size=\"50\" text-anchor=\"middle\" x=\"33.75\" y=\"124\">\n                            1\n                            </text>\n                            <text font-size=\"50\" text-anchor=\"middle\" x=\"101.25\" y=\"124\">\n                            2\n                            </text>\n                            <text font-size=\"50\" text-anchor=\"middle\" x=\"168.75\" y=\"124\">\n                            3\n                            </text>\n                            <text font-size=\"50\" text-anchor=\"middle\" x=\"236.25\" y=\"124\">\n                            4\n                            </text>\n                            <text font-size=\"50\" text-anchor=\"middle\" x=\"303.75\" y=\"124\">\n                            5\n                            </text>\n                            <text font-size=\"50\" text-anchor=\"middle\" x=\"371.25\" y=\"124\">\n                            6\n                            </text>\n                            <defs>\n                            <g id=\"rail1\" stroke-width=\"4.5\">\n                                <line x1=\"27\" x2=\"27\" y1=\"0\" y2=\"67.5\"></line>\n                                <line x1=\"40.5\" x2=\"40.5\" y1=\"0\" y2=\"67.5\"></line>\n                                <line x1=\"27\" x2=\"40.5\" y1=\"6.75\" y2=\"6.75\"></line>\n                                <line x1=\"27\" x2=\"40.5\" y1=\"20.25\" y2=\"20.25\"></line>\n                                <line x1=\"27\" x2=\"40.5\" y1=\"33.75\" y2=\"33.75\"></line>\n                                <line x1=\"27\" x2=\"40.5\" y1=\"47.25\" y2=\"47.25\"></line>\n                                <line x1=\"27\" x2=\"40.5\" y1=\"60.75\" y2=\"60.75\"></line>\n                            </g>\n                            <g fill=\"none\" id=\"rail2\" stroke-width=\"4.5\">\n                                <path d=\"M27,0 A27,27 0 0,1 0,27\"></path>\n                                <path d=\"M40.5,0 A40.5,40.5 0 0,1 0,40.5\"></path>\n                                <line x1=\"27\" x2=\"40.5\" y1=\"4.5\" y2=\"6.75\"></line>\n                                <line x1=\"24.75\" x2=\"36\" y1=\"11.25\" y2=\"18\"></line>\n                                <line x1=\"18\" x2=\"29.25\" y1=\"18\" y2=\"29.25\"></line>\n                                <line x1=\"11.25\" x2=\"18\" y1=\"24.75\" y2=\"36\"></line>\n                                <line x1=\"4.5\" x2=\"6.75\" y1=\"27\" y2=\"40.5\"></line>\n                            </g>\n                            </defs>\n                            <use href=\"#rail1\" stroke=\"silver\" transform=\"rotate(90,33.75,33.75)\" x=\"0\" y=\"0\"></use>\n                            <use href=\"#rail1\" stroke=\"silver\" transform=\"rotate(0,0,0)\" x=\"67.5\" y=\"0\"></use>\n                            <use href=\"#rail2\" stroke=\"silver\" transform=\"rotate(270,168.75,33.75)\" x=\"135\" y=\"0\"></use>\n                            <use href=\"#rail2\" stroke=\"silver\" transform=\"rotate(0,236.25,33.75)\" x=\"202.5\" y=\"0\"></use>\n                            <use href=\"#rail2\" stroke=\"silver\" transform=\"rotate(90,303.75,33.75)\" x=\"270\" y=\"0\"></use>\n                            <use href=\"#rail2\" stroke=\"silver\" transform=\"rotate(180,371.25,33.75)\" x=\"337.5\" y=\"0\"></use>\n                        </svg>\n                        <figurecaption>線路の種類</figurecaption>\n                    </figure>\n                <p></p>\n\n                <p>\n                    R国には <var>M</var> 人の人が住んでいる。人 <var>c</var> の家は区画 <var>(i_{c,s}, j_{c,s})</var>、職場は区画 <var>(i_{c,t},  j_{c,t})</var> にあり、この間を通勤している。\n                    </p>\n                    <p>ゲーム開始時、鉄道会社Xは <var>K</var> の資金を持っており、全ての区画は更地である。ここから <var>T</var> ターンの間ゲームを行う。\n                </p>\n\n                <h3>ゲームのすすめ方</h3>\n                    <p>各ターンでは、建設フェーズと集金フェーズがこの順で実行される。</p>\n                <h4>建設フェーズ</h4>\n                    <p>建設フェーズでは、線路の配置・駅の配置・待機のうち1つの行動を行う。ただし、資金が0未満になるような行動はできない。資金が0未満かどうかの判定は集金フェーズの前に行われる。</p>\n                    <ul>\n                        <li>線路の配置: 更地の区画を1つ選び、その区画を6種類の線路のいずれか1つに変更する。資金が100減る。</li>\n                        <li>駅の配置: 更地または線路の区画を1つ選び、その区画を駅に変更する。資金が5000減る。</li>\n                        <li>待機: 区画の状態と資金は変化しない。</li>\n                    </ul>\n                <h4>集金フェーズ</h4>\n                <p>R国に住む人が一斉に通勤を行う。人 <var>c</var> は、以下の条件を満たす区画 <var>(i_p, j_p)</var>, <var>(i_q, j_q)</var> が存在するときのみ、鉄道会社Xの鉄道を利用して料金を払う。\n人 <var>c</var> が鉄道を利用したとき、鉄道会社Xの資金が <var>|i_{c,s} - i_{c,t}| + |j_{c, s} - j _{c, t} |</var> 増える。</p>\n                    <p>\n                        </p><ul>\n                            <li>区画 <var>(i_p, j_p), (i_q, j_q)</var> は駅である。</li>\n                            <li>区画 <var>(i_p, j_p)</var> から、<var>0</var> 個以上の互いに接続された駅の区画または線路の区画を経由して、 <var>(i_q, j_q)</var> に到達できる。</li>\n                            <li> <var>| i_{c,s} - i_p| + | j_{c,s} - j_p| \\leq 2</var> </li>\n                            <li> <var>| i_{c,t} - i_q| + | j_{c,t} - j_q| \\leq 2</var> </li>\n                        </ul>\n                    <p></p>\n                <br>\n                <p><var>T</var> ターン終了時点での資金ができるだけ大きくなるように行動を決めよ。</p>\n            </section>\n        </div>\n        <hr>\n        <div class=\"part\">\n            <section>\n                <h3>得点</h3>\n                <p>\n                    各テストケース毎に、 <var>T</var> ターン終了時点での資金の値を絶対スコアとして\n                    <span id=\"math\">\\( \\text{round}(10^9 \\times \\left(\\frac{自身の絶対スコア}{全参加者中の最大絶対スコア}\\right)) \\)</span>の<font color=\"red\"><strong>相対評価スコア</strong></font>が得られ、その和が提出の得点となる。\n                    ただし、 <var>全参加者中の最大絶対スコア</var> が <var>0</var> のテストケースにおいては、 <span class=\"label label-success\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Accepted\">AC</span> した全参加者の相対評価スコアが <var>10^9</var> となる。\n                </p>\n                <p>\n                    以下に挙げる不正な出力をした場合、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Wrong Answer\">WA</span>と判定される。\n                    </p><ul>\n                        <li>駅または線路の区画への線路の配置</li>\n                        <li>駅の区画への駅の配置</li>\n                        <li>資金が 0 未満になるような配置</li>\n                        <li>線路の種類や区画の指定が不正な配置</li>\n                        <li>出力した行動の数が <var>T</var> 個でない</li>\n                    </ul>\n                <p></p>\n                <p>\n                    最終順位はコンテスト終了後に実施されるより多くの入力に対するシステムテストにおける得点で決定される。暫定テスト、システムテストともに、一部のテストケースで不正な出力や制限時間超過をした場合、そのテストケースの相対評価スコアは0点となり、そのテストケースにおいては「全参加者中の最大絶対スコア」の計算から除外される。システムテストは <font color=\"red\"><strong><span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"コンパイルエラー\">CE</span> 以外の結果を得た一番最後の提出</strong></font>に対してのみ行われるため、最終的に提出する解答を間違えないよう注意せよ。\n                </p>\n                <h4>テストケース数</h4>\n                <ul>\n                    <li>\n                        暫定テスト: 50個\n                    </li>\n                    <li>\n                        システムテスト: 2000個\n                        <ul>\n                            <li>コンテスト終了後に <a href=\"https://img.atcoder.jp/ahc043/seeds.txt\">seeds.txt</a> (sha256=<code>ed5b3f922dc3633bade3f70cc6f1dd1bb3087dba36ce26ce9d4888ce2ec7a247</code>) を公開します。</li>\n                        </ul>\n                    </li>\n                </ul>\n                <h4>相対評価システムについて</h4>\n                <p>\n                    暫定テスト・システムテストともに、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"コンパイルエラー\">CE</span>以外の結果を得た一番最後の提出のみが順位表に反映される。<br>\n                    相対評価スコアの計算に用いられる各テストケース毎の全参加者中の最大絶対スコアの算出についても、順位表に反映されている最終提出のみが用いられる。<br>\n                </p>\n                <p>\n                    順位表に表示されているスコアは相対評価スコアであり、新規提出があるたびに、相対評価スコアが再計算される。一方、提出一覧から確認出来る各提出のスコアは各テストケース毎の絶対スコアをそのまま足し合わせたものであり、相対評価スコアは表示されない。最新以外の提出の、現在の順位表における相対評価スコアを知るためには、再提出が必要である。不正な出力や制限時間超過をした場合、提出一覧から確認出来るスコアは0となるが、順位表には正解したテストケースに対する相対評価スコアの和が表示されている。\n                </p>\n                <h4>実行時間について</h4>\n                <p>\n                    実行時間には多少のブレが生じます。\n                    また、システムテストでは同時に大量の実行を行うため、暫定テストに比べて数%程度実行時間が伸びる現象が確認されています。\n                    そのため、実行時間制限ギリギリの提出がシステムテストで <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"実行時間制限超過\">TLE</span> となる可能性があります。\n                    プログラム内で時間を計測して処理を打ち切るか、実行時間に余裕を持たせるようお願いします。\n                </p>\n            </section>\n        </div>\n    <hr>\n\n    <div class=\"io-style\">\n        <div class=\"part\">\n            <section>\n                <h3>入力</h3>\n                <p>入力は以下の形式で標準入力から与えられる。</p>\n<pre>\\(\nN ~ M ~ K ~ T\\\\\ni_{0, s} ~ j_{0, s} ~ i_{0, t} ~ j_{0, t} \\\\\ni_{1, s} ~ j_{1, s} ~ i_{1, t} ~ j_{1, t} \\\\\n\\vdots \\\\\ni_{M-1, s} ~ j_{M-1, s} ~ i_{M-1, t} ~ j_{M-1, t}\n\\)\n</pre>\n        <ul>\n            <li>1行目には4つの整数 <var>N,M,K,T</var> がスペース区切りで与えられる。\n                <ul>\n                    <li> <var>N</var> は区画の縦・横の数で、 <var>N = 50</var> を満たす。</li>\n                    <li> <var>M</var> はR国の人の数で、 <var>50 \\le M \\le 1600</var> を満たす。</li>\n                    <li> <var>K</var> は鉄道会社Xの初期資金であり、 <var>11000 \\leq K \\leq 20000 </var> を満たす。</li>\n                    <li> <var>T</var> はゲームのターン数であり、 <var>T = 800</var> を満たす。</li>\n                </ul>\n            </li>\n            <li>続く <var>M</var> 行にR国に住む人の通勤に関する情報が与えられる。各行はスペース区切りの4つの整数であり、人 <var>c</var> の家の位置は区画 <var>(i_{c,s}, j_{c,s})</var>、職場の位置は区画 <var>(i_{c, t}, j_{c,t} )</var> である。<var>0 \\leq i_{c, s}, i_{c, t} \\lt  N, 0  \\leq j_{c, s}, j_{c, t} \\lt N, | i_{c,s} - i_{c,t} | + | j_{c,s} - j_{c,t} | \\gt 4 (0 \\leq c \\lt M)</var> を満たす。\n\n            </li>\n        </ul>\n        <h3>出力</h3>\n        <p> <var>T</var> 行出力せよ。<var>t</var> 行目には、<var>t</var> 回目の建設フェーズでの行動を以下のフォーマットで出力せよ。</p>\n            <ul>\n                <li>\n                    線路の配置を行う場合\n                    <br>\n                    区画 <var>(i, j)</var> に種類 <var>p</var> の線路を建設するとき、<var>p, i, j</var> をスペース区切りで出力せよ。\n                    <br>\n                    線路の種類は、問題文中の番号付けに従う。\n                </li>\n                <li>\n                    駅の配置を行う場合\n                    <br>\n                    区画 <var>(i, j)</var> に駅を建設するとき、<var>0, i, j</var> をスペース区切りで出力せよ。\n                    <br>\n                </li>\n                <li>\n                    待機を行う場合\n                    <br>\n                    <code>-1</code> を出力せよ。\n                </li>\n            </ul>\n        <p>\n        <a href=\"https://img.atcoder.jp/ahc043/de43f43a9c.html?lang=ja&amp;output=sample\">例を見る</a>\n        </p>\n            </section>\n        </div>\n    </div>\n    \n    <div class=\"part\">\n        <section>\n            <h3>入力生成方法</h3>\n            <details>\n                <summary>入力生成方法の詳細</summary>\n                    <p>\n                        <var>L</var> 以上 <var>U</var> 以下の整数を一様ランダムに生成する関数を <var>\\mathrm{rand}(L, U)</var> とし、<var>L</var> 以上 <var>U</var> 未満の実数を一様ランダムに生成する関数を <var>\\mathrm{rand\\_double}(L, U)</var> とする。\n                        平均 <var>\\mu</var> 、標準偏差 <var>\\sigma</var> の正規分布からランダムに実数値を生成する関数を <var>\\mathrm{normal}(\\mu,\\sigma)</var> とする。\n                    </p>\n                    <h4><var>M</var> の生成</h4>\n                    <p><var>M = \\mathrm{round}(50 \\times 2 ^{\\mathrm{rand\\_double}(0,5)})</var> で生成する。</p>\n                    <h4>家と職場の座標の生成</h4>\n                    <p>\n                        次のようにして家の座標を生成するための混合ガウス分布を作成する：<br>\n                        クラスタ数 <var>(\\text{num\\_cluster})</var> を <var>\\mathrm{rand}(5,15)</var> で生成する。\n                        各クラスタ <var>i</var> に対して、重み <var>w_i = \\mathrm{rand\\_double}(0, 1)</var> 、 中心座標 <var> (r_i, c_i) =  (\\mathrm{rand\\_double}(0, N-1), \\mathrm{rand\\_double}(0, N-1))</var> 、 標準偏差 <var>\\sigma_i  = \\mathrm{rand\\_double}(2, 15)</var> を生成する。\n                        <br>\n                        職場の座標を生成するための混合ガウス分布も同様にして作成する。\n                    </p>\n                    <p>\n                        以下の処理を <var>M</var> 回繰り返し、<var>M</var> 人の家と職場の座標を生成する。\n                    </p>\n                    <p>\n                        </p><ol>\n                            <li>家の座標を生成するための混合ガウス分布から、重み <var>w_i</var> に比例する確率で、クラスタ <var>i</var> をランダムに選択する。</li>\n                            <li>選択された <var>i</var> に対し、家の座標 <var>r_0 = \\text{round}(\\text{normal}(r_i, \\sigma_i)), c_0 =  \\text{round}(\\text{normal}(c_i, \\sigma_i))</var> を生成する。</li>\n                            <li>生成された座標 <var>(r_0, c_0)</var> が <var>0 \\leq r_0 \\lt N </var> または <var>0 \\leq c_0 \\lt N </var> を満たさない場合は、ステップ1からやり直す。</li>\n                            <li>職場の座標 <var>(r_1, c_1) </var> についても同様に生成する。</li>\n                            <li>家の座標 <var> (r_0, c_0)</var> と職場の座標 <var>(r_1, c_1)</var> のマンハッタン距離が <var>4</var>  以下である場合は、ステップ1からやり直す。</li>\n                        </ol>\n                    <p></p>\n                    <h4><var>K</var> の生成</h4>\n                    <p>\n                        <var>M</var> 人について、家と職場の座標のマンハッタン距離の最小値を <var>d</var> とする。<var>K = \\mathrm{rand}(\\mathrm{max}(10, d) \\times 100, 2 \\times N \\times 100) + 10000</var> で生成する。\n                    </p>\n            </details>\n        </section>\n    </div>\n    <div class=\"part\">\n        <section>\n            <h3>ツール(入力ジェネレータ・ビジュアライザ)</h3>\n            <ul>\n                <li><a href=\"https://img.atcoder.jp/ahc043/de43f43a9c.html\">Web版</a>: ローカル版より高機能でアニメーション表示が可能です。</li>\n                <li><a href=\"https://img.atcoder.jp/ahc043/de43f43a9c.zip\">ローカル版</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。\n                    <ul><li><a href=\"https://img.atcoder.jp/ahc043/de43f43a9c_windows.zip\">Windows用のコンパイル済みバイナリ</a>: Rust言語の環境構築が面倒な方は代わりにこちらをご利用下さい。</li></ul>\n                </li>\n            </ul>\n            <p>\n                <font color=\"red\"><strong>コンテスト期間中に、ビジュアライズ結果の共有や、解法・考察に関する言及は禁止されています。ご注意下さい。</strong></font>\n            </p>\n            <p>\n                解答プログラムは、<code>#</code> から始まるコメント行を出力に含めてもかまいません。\n                Web版ビジュアライザを使用すると、コメント行を対応するタイミングで表示できるため、デバッグや考察等に役立てることができます。\n                ジャッジプログラムはコメント行を全て無視するため、コメント行を出力するプログラムをそのまま提出可能です。\n            </p>\n        </section>\n    </div>\n    <div class=\"part\">\n        <section>\n            <h3>サンプルプログラム</h3>\n            <details>\n                <summary>Pythonによるサンプル実装</summary>\n<pre class=\"prettyprint linenums\">import sys\n\nPos = tuple[int, int]\nEMPTY = -1\nDO_NOTHING = -1\nSTATION = 0\nRAIL_HORIZONTAL = 1\nRAIL_VERTICAL = 2\nRAIL_LEFT_DOWN = 3\nRAIL_LEFT_UP = 4\nRAIL_RIGHT_UP = 5\nRAIL_RIGHT_DOWN = 6\nCOST_STATION = 5000\nCOST_RAIL = 100\n\n\nclass UnionFind:\n    def __init__(self, n: int):\n        self.n = n\n        self.parents = [-1 for _ in range(n * n)]\n\n    def _find_root(self, idx: int) -&gt; int:\n        if self.parents[idx] &lt; 0:\n            return idx\n        self.parents[idx] = self._find_root(self.parents[idx])\n        return self.parents[idx]\n\n    def is_same(self, p: Pos, q: Pos) -&gt; bool:\n        p_idx = p[0] * self.n + p[1]\n        q_idx = q[0] * self.n + q[1]\n        return self._find_root(p_idx) == self._find_root(q_idx)\n\n    def unite(self, p: Pos, q: Pos) -&gt; None:\n        p_idx = p[0] * self.n + p[1]\n        q_idx = q[0] * self.n + q[1]\n        p_root = self._find_root(p_idx)\n        q_root = self._find_root(q_idx)\n        if p_root != q_root:\n            p_size = -self.parents[p_root]\n            q_size = -self.parents[q_root]\n            if p_size &gt; q_size:\n                p_root, q_root = q_root, p_root\n            self.parents[q_root] += self.parents[p_root]\n            self.parents[p_root] = q_root\n\n\ndef distance(a: Pos, b: Pos) -&gt; int:\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n\nclass Action:\n    def __init__(self, type: int, pos: Pos):\n        self.type = type\n        self.pos = pos\n\n    def __str__(self):\n        if self.type == DO_NOTHING:\n            return \"-1\"\n        else:\n            return f\"{self.type} {self.pos[0]} {self.pos[1]}\"\n\n\nclass Result:\n    def __init__(self, actions: list[Action], score: int):\n        self.actions = actions\n        self.score = score\n\n    def __str__(self):\n        return \"\\n\".join(map(str, self.actions))\n\n\nclass Field:\n    def __init__(self, N: int):\n        self.N = N\n        self.rail = [[EMPTY] * N for _ in range(N)]\n        self.uf = UnionFind(N)\n\n    def build(self, type: int, r: int, c: int) -&gt; None:\n        assert self.rail[r][c] != STATION\n        if 1 &lt;= type &lt;= 6:\n            assert self.rail[r][c] == EMPTY\n        self.rail[r][c] = type\n\n        # 隣接する区画と接続\n        # 上\n        if type in (STATION, RAIL_VERTICAL, RAIL_LEFT_UP, RAIL_RIGHT_UP):\n            if r &gt; 0 and self.rail[r - 1][c] in (STATION, RAIL_VERTICAL, RAIL_LEFT_DOWN, RAIL_RIGHT_DOWN):\n                self.uf.unite((r, c), (r - 1, c))\n        # 下\n        if type in (STATION, RAIL_VERTICAL, RAIL_LEFT_DOWN, RAIL_RIGHT_DOWN):\n            if r &lt; self.N - 1 and self.rail[r + 1][c] in (STATION, RAIL_VERTICAL, RAIL_LEFT_UP, RAIL_RIGHT_UP):\n                self.uf.unite((r, c), (r + 1, c))\n        # 左\n        if type in (STATION, RAIL_HORIZONTAL, RAIL_LEFT_DOWN, RAIL_LEFT_UP):\n            if c &gt; 0 and self.rail[r][c - 1] in (STATION, RAIL_HORIZONTAL, RAIL_RIGHT_DOWN, RAIL_RIGHT_UP):\n                self.uf.unite((r, c), (r, c - 1))\n        # 右\n        if type in (STATION, RAIL_HORIZONTAL, RAIL_RIGHT_DOWN, RAIL_RIGHT_UP):\n            if c &lt; self.N - 1 and self.rail[r][c + 1] in (STATION, RAIL_HORIZONTAL, RAIL_LEFT_DOWN, RAIL_LEFT_UP):\n                self.uf.unite((r, c), (r, c + 1))\n\n    def is_connected(self, s: Pos, t: Pos) -&gt; bool:\n        assert distance(s, t) &gt; 4  # 前提条件\n        stations0 = self.collect_stations(s)\n        stations1 = self.collect_stations(t)\n        for station0 in stations0:\n            for station1 in stations1:\n                if self.uf.is_same(station0, station1):\n                    return True\n        return False\n\n    def collect_stations(self, pos: Pos) -&gt; list[Pos]:\n        stations = []\n        for dr in range(-2, 3):\n            for dc in range(-2, 3):\n                if abs(dr) + abs(dc) &gt; 2:\n                    continue\n                r = pos[0] + dr\n                c = pos[1] + dc\n                if 0 &lt;= r &lt; self.N and 0 &lt;= c &lt; self.N and self.rail[r][c] == STATION:\n                    stations.append((r, c))\n        return stations\n\n\nclass Solver:\n    def __init__(self, N: int, M: int, K: int, T: int, home: list[Pos], workplace: list[Pos]):\n        self.N = N\n        self.M = M\n        self.K = K\n        self.T = T\n        self.home = home\n        self.workplace = workplace\n        self.field = Field(N)\n        self.money = K\n        self.actions = []\n\n    def calc_income(self) -&gt; int:\n        income = 0\n        for i in range(self.M):\n            if self.field.is_connected(self.home[i], self.workplace[i]):\n                income += distance(self.home[i], self.workplace[i])\n        return income\n\n    def build_rail(self, type: int, r: int, c: int) -&gt; None:\n        self.field.build(type, r, c)\n        self.money -= COST_RAIL\n        self.actions.append(Action(type, (r, c)))\n\n    def build_station(self, r: int, c: int) -&gt; None:\n        self.field.build(STATION, r, c)\n        self.money -= COST_STATION\n        self.actions.append(Action(STATION, (r, c)))\n\n    def build_nothing(self) -&gt; None:\n        self.actions.append(Action(DO_NOTHING, (0, 0)))\n\n    def solve(self) -&gt; Result:\n        # 接続する人を見つける\n        rail_count = (self.K - COST_STATION * 2) // COST_RAIL\n        person_idx = 0\n        while person_idx &lt; self.M:\n            if distance(self.home[person_idx], self.workplace[person_idx]) - 1 &lt;= rail_count:\n                break\n            person_idx += 1\n        assert person_idx != self.M\n\n        # 駅の配置\n        self.build_station(*self.home[person_idx])\n        self.build_station(*self.workplace[person_idx])\n\n        # 線路を配置して駅を接続する\n        r0, c0 = self.home[person_idx]\n        r1, c1 = self.workplace[person_idx]\n        # r0 -&gt; r1\n        if r0 &lt; r1:\n            for r in range(r0 + 1, r1):\n                self.build_rail(RAIL_VERTICAL, r, c0)\n            if c0 &lt; c1:\n                self.build_rail(RAIL_RIGHT_UP, r1, c0)\n            elif c0 &gt; c1:\n                self.build_rail(RAIL_LEFT_UP, r1, c0)\n        elif r0 &gt; r1:\n            for r in range(r0 - 1, r1, -1):\n                self.build_rail(RAIL_VERTICAL, r, c0)\n            if c0 &lt; c1:\n                self.build_rail(RAIL_RIGHT_DOWN, r1, c0)\n            elif c0 &gt; c1:\n                self.build_rail(RAIL_LEFT_DOWN, r1, c0)\n        # c0 -&gt; c1\n        if c0 &lt; c1:\n            for c in range(c0 + 1, c1):\n                self.build_rail(RAIL_HORIZONTAL, r1, c)\n        elif c0 &gt; c1:\n            for c in range(c0 - 1, c1, -1):\n                self.build_rail(RAIL_HORIZONTAL, r1, c)\n\n        income = self.calc_income()\n        self.money += income\n\n        # あとは待機\n        while len(self.actions) &lt; self.T:\n            self.build_nothing()\n            self.money += income\n\n        return Result(self.actions, self.money)\n\n\ndef main():\n    N, M, K, T = map(int, input().split())\n    home = []\n    workplace = []\n    for _ in range(M):\n        r0, c0, r1, c1 = map(int, input().split())\n        home.append((r0, c0))\n        workplace.append((r1, c1))\n\n    solver = Solver(N, M, K, T, home, workplace)\n    result = solver.solve()\n    print(result)\n    print(f\"score={result.score}\", file=sys.stderr)\n\n\nif __name__ == \"__main__\":\n    main()\n</pre>\n            </details>\n            <p>以下の処理を実装しています。</p>\n            <ol>\n                <li>人 <var>0</var>, 人 <var>1</var>, <var>\\ldots</var> と順に見て、家と職場の位置に駅を配置して駅の間を最短距離で線路で接続することが初期資金で可能であるような最初の人を見つける</li>\n                <li>見つけた人の家と職場の位置に駅を配置し、家から職場までを接続する線路を配置する</li>\n                <li>その後は <var>T</var> ターン目まで待機を行う</li>\n            </ol>\n            <p>資金のシミュレーションを行うコードを含んでいます。参考にしてください。</p>\n        </section>\n    </div>\n    </span>","en":"<span class=\"lang-en\">\n            <div class=\"part\">\n                <section>\n                <h3>Story</h3>\n                <p>Nihonbashi Simulator is a turn-based simulation game where you manage railway company X in the fictional country R. As a big fan of this game, your goal is to make the company highly profitable. By appropriately constructing rails and stations, you will assist the people living in country R in their commuting while developing X into the best railway company!</p>\n                <h3>Problem Statement</h3>\n                <p>\n                    Country R is composed of sections arranged in an <var>N \\times N</var> grid. The section in the <var>i</var>-th row from the top <var>(0 \\le i &lt; N)</var>, and the <var>j</var>-th column from the left <var>(0 \\le j &lt; N)</var> is denoted as <var>(i,j)</var>.\n                    Each section can be either empty, rail, or station:\n                    </p><ul>\n                        <li>Empty\n                            <ul>\n                                <li>Does not connect to other sections.</li>\n                                <li>Can be changed to a station or rail by paying a cost.</li>\n                            </ul>\n                        </li>\n                        <li>Rail\n                            <ul>\n                                <li>Connects to a maximum of two adjacent non-empty sections on the up, down, left, and right. Rails are of six types, numbered as shown in the diagram below, depending on their connections.</li>\n                                <li>Can be changed to a station by paying a cost.</li>\n                            </ul>\n                        </li>\n                        <li>Station\n                        <ul>\n                            <li>Connects to a maximum of four adjacent non-empty sections on the up, down, left, and right.</li>\n                        </ul>\n                        </li>\n                    </ul>\n                <p></p>\n                <p>\n                    </p><figure style=\"text-align: center; margin: 2em auto;\">\n                        <svg height=\"150\" id=\"vis\" viewBox=\"-12 -12 429 159\" width=\"500\" style=\"display: block; margin: 0 auto;\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <rect fill=\"white\" height=\"159\" width=\"429\" x=\"-12\" y=\"-12\"></rect>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"0\" x2=\"405\" y1=\"0\" y2=\"0\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"0\" x2=\"405\" y1=\"67.5\" y2=\"67.5\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"67.5\" x2=\"67.5\" y1=\"0\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"0\" x2=\"405\" y1=\"135\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"135\" x2=\"135\" y1=\"0\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"202.5\" x2=\"202.5\" y1=\"0\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"270\" x2=\"270\" y1=\"0\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"337.5\" x2=\"337.5\" y1=\"0\" y2=\"135\"></line>\n                            <line stroke=\"lightgray\" stroke-width=\"2\" x1=\"405\" x2=\"405\" y1=\"0\" y2=\"135\"></line>\n                            <text font-size=\"50\" text-anchor=\"middle\" x=\"33.75\" y=\"124\">\n                            1\n                            </text>\n                            <text font-size=\"50\" text-anchor=\"middle\" x=\"101.25\" y=\"124\">\n                            2\n                            </text>\n                            <text font-size=\"50\" text-anchor=\"middle\" x=\"168.75\" y=\"124\">\n                            3\n                            </text>\n                            <text font-size=\"50\" text-anchor=\"middle\" x=\"236.25\" y=\"124\">\n                            4\n                            </text>\n                            <text font-size=\"50\" text-anchor=\"middle\" x=\"303.75\" y=\"124\">\n                            5\n                            </text>\n                            <text font-size=\"50\" text-anchor=\"middle\" x=\"371.25\" y=\"124\">\n                            6\n                            </text>\n                            <defs>\n                            <g id=\"rail1\" stroke-width=\"4.5\">\n                                <line x1=\"27\" x2=\"27\" y1=\"0\" y2=\"67.5\"></line>\n                                <line x1=\"40.5\" x2=\"40.5\" y1=\"0\" y2=\"67.5\"></line>\n                                <line x1=\"27\" x2=\"40.5\" y1=\"6.75\" y2=\"6.75\"></line>\n                                <line x1=\"27\" x2=\"40.5\" y1=\"20.25\" y2=\"20.25\"></line>\n                                <line x1=\"27\" x2=\"40.5\" y1=\"33.75\" y2=\"33.75\"></line>\n                                <line x1=\"27\" x2=\"40.5\" y1=\"47.25\" y2=\"47.25\"></line>\n                                <line x1=\"27\" x2=\"40.5\" y1=\"60.75\" y2=\"60.75\"></line>\n                            </g>\n                            <g fill=\"none\" id=\"rail2\" stroke-width=\"4.5\">\n                                <path d=\"M27,0 A27,27 0 0,1 0,27\"></path>\n                                <path d=\"M40.5,0 A40.5,40.5 0 0,1 0,40.5\"></path>\n                                <line x1=\"27\" x2=\"40.5\" y1=\"4.5\" y2=\"6.75\"></line>\n                                <line x1=\"24.75\" x2=\"36\" y1=\"11.25\" y2=\"18\"></line>\n                                <line x1=\"18\" x2=\"29.25\" y1=\"18\" y2=\"29.25\"></line>\n                                <line x1=\"11.25\" x2=\"18\" y1=\"24.75\" y2=\"36\"></line>\n                                <line x1=\"4.5\" x2=\"6.75\" y1=\"27\" y2=\"40.5\"></line>\n                            </g>\n                            </defs>\n                            <use href=\"#rail1\" stroke=\"silver\" transform=\"rotate(90,33.75,33.75)\" x=\"0\" y=\"0\"></use>\n                            <use href=\"#rail1\" stroke=\"silver\" transform=\"rotate(0,0,0)\" x=\"67.5\" y=\"0\"></use>\n                            <use href=\"#rail2\" stroke=\"silver\" transform=\"rotate(270,168.75,33.75)\" x=\"135\" y=\"0\"></use>\n                            <use href=\"#rail2\" stroke=\"silver\" transform=\"rotate(0,236.25,33.75)\" x=\"202.5\" y=\"0\"></use>\n                            <use href=\"#rail2\" stroke=\"silver\" transform=\"rotate(90,303.75,33.75)\" x=\"270\" y=\"0\"></use>\n                            <use href=\"#rail2\" stroke=\"silver\" transform=\"rotate(180,371.25,33.75)\" x=\"337.5\" y=\"0\"></use>\n                        </svg>\n                        <figurecaption>Types of rails</figurecaption>\n                    </figure>\n                <p></p>\n\n                <p>There are <var>M</var> people living in country R. The home of person <var>c</var> is located at section <var>(i_{c,s}, j_{c,s})</var>, and workplace is at section <var>(i_{c,t}, j_{c,t})</var>, between which he/she commutes.\n                </p><p>At the start of the game, railway company X has money of <var>K</var>, and all sections are empty. The game will proceed for <var>T</var> turns.</p>\n\n                <h3>How the game progresses</h3>\n                <p>Each turn consists of a construction phase followed by a collection phase.</p>\n                <h4>Construction phase</h4>\n                <p>During the construction phase, one of the following actions is performed: placing a rail, placing a station, or waiting. Actions that would result in money going below zero are not allowed.\n                The check for whether money is below zero is performed before the collection phase.</p>\n                <ul>\n                    <li>Placing a rail: Select one empty section and change it to one of the six types of rails. Money decreases by 100.</li>\n                    <li>Placing a station: Select one empty or rail section and change it to a station. Money decreases by 5000.</li>\n                    <li>Waiting: The state of the sections and the money do not change.</li>\n                </ul>\n                <h4>Collection phase</h4>\n                <p>The people living in country R commute simultaneously. Person <var>c</var> will use train and pay a fare to railway company X only if there exist sections <var>(i_p, j_p)</var> and <var>(i_q, j_q)</var> that satisfy the following conditions:\n                </p><p>\n                    </p><ul>\n                        <li>Sections <var>(i_p, j_p), (i_q, j_q)</var> are stations.</li>\n                        <li>It is possible to reach section <var>(i_q, j_q)</var> from section <var>(i_p, j_p)</var> via zero or more connected station or rail sections.</li>\n                        <li> <var>| i_{c,s} - i_p| + | j_{c,s} - j_p| \\leq 2</var> </li>\n                        <li> <var>| i_{c,t} - i_q| + | j_{c,t} - j_q| \\leq 2</var> </li>\n                    </ul>\n                <p></p>\n                <p>When person <var>c</var> uses the train, railway company X's money increases by <var>|i_{c,s} - i_{c,t}| + |j_{c,s} - j_{c,t}|</var>.</p>\n                <br>\n                <p>Please determine the actions to maximize the money at the end of turn <var>T</var>.</p>\n                </section>\n            </div>\n            <hr>\n            <div class=\"part\">\n                <section>\n                    <h3>Scoring</h3>\n                    <p>For each test case, the absolute score is obtained as the value of the money at the end of <var>T</var> turns, and we compute the <font color=\"red\"><strong>relative score</strong></font> <var>\\mathrm{round}(10^9\\times \\frac{\\mathrm{YOUR}}{\\mathrm{MAX}})</var>, where YOUR is your absolute score and MAX is the maximum absolute score among all competitors obtained on that test case. The score of the submission is the sum of the relative scores.\n                       In test cases where MAX is <var>0</var>, the relative score for all participants who received <span class=\"label label-success\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Accepted\">AC</span> will be <var>10^9</var>.\n                    </p>\n                    <p>\n                        If the following invalid outputs are produced, it will be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Wrong Answer\">WA</span>。\n                        </p><ul>\n                            <li>Placing a rail into a station or rail section</li>\n                            <li>Placing a station into a station section</li>\n                            <li>An action that results in money being less than 0</li>\n                            <li>Invalid action with incorrect rail types or section position</li>\n                            <li>The number of actions output is not <var>T</var></li>\n                        </ul>\n                    <p></p>\n                    <p>The final ranking will be determined by the system test with more inputs which will be run after the contest is over.\n                    In both the provisional/system test, if your submission produces illegal output or exceeds the time limit for some test cases, only the score for those test cases will be zero, and your submission will be excluded from the MAX calculation for those test cases.</p>\n                    <p>The system test will be performed only for <font color=\"red\"><strong>the last submission which received a result other than <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Compilation Error\">CE</span> </strong></font>.\n                    Be careful not to make a mistake in the final submission.</p>\n                    <h4>Number of test cases</h4>\n                    <ul>\n                        <li>\n                            Provisional test: 50\n                        </li>\n                        <li>\n                            System test: 2000\n                            <ul>\n                                <li>We will publish <a href=\"https://img.atcoder.jp/ahc043/seeds.txt\">seeds.txt</a> (sha256=<code>ed5b3f922dc3633bade3f70cc6f1dd1bb3087dba36ce26ce9d4888ce2ec7a247</code>) after the contest is over.</li>\n                            </ul>\n                        </li>\n                    </ul>\n                    <h4>About Relative Evaluation System</h4>\n                    <p>\n                        In both the provisional/system test, the standings will be calculated using only the last submission which received a result other than <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Compilation Error\">CE</span>.\n                        Only the last submissions are used to calculate the MAX for each test case when calculating the relative scores.\n                    </p>\n                    <p>\n                        The scores shown in the standings are relative, and whenever a new submission arrives, all relative scores are recalculated.\n                        On the other hand, the score for each submission shown on the submissions page is the sum of the absolute score for each test case, and the relative scores are not shown.\n                        In order to know the relative score of submission other than the latest one in the current standings, you need to resubmit it.\n                        If your submission produces illegal output or exceeds the time limit for some test cases, the score shown on the submissions page will be 0, but the standings show the sum of the relative scores for the test cases that were answered correctly.\n                    </p>\n                    <h4>About execution time</h4>\n                    <p>\n                        Execution time may vary slightly from run to run.\n                        In addition, since system tests simultaneously perform a large number of executions, it has been observed that execution time increases by several percent compared to provisional tests.\n                        For these reasons, submissions that are very close to the time limit may result in <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Time Limit Exceeded\">TLE</span> in the system test.\n                        Please measure the execution time in your program to terminate the process, or make sure to have enough time margin for the execution.\n                    </p>\n                </section>\n            </div>\n            <hr>\n\n            <div class=\"io-style\">\n                <div class=\"part\">\n                    <section>\n                        <h3>Input</h3>\n                        <p>Input will be provided from Standard Input in the following format.</p>\n<pre>\\(\nN ~ M ~ K ~ T\\\\\ni_{0, s} ~ j_{0, s} ~ i_{0, t} ~ j_{0, t} \\\\\ni_{1, s} ~ j_{1, s} ~ i_{1, t} ~ j_{1, t} \\\\\n\\vdots \\\\\ni_{M-1, s} ~ j_{M-1, s} ~ i_{M-1, t} ~ j_{M-1, t}\n\\)\n</pre>\n                        <ul>\n                            <li>On the first line, there are four integers <var>N,M,K,T</var> separated by spaces.\n                                <ul>\n                                    <li> <var>N</var> represents the number of rows and columns in country R and satisfies <var>N = 50</var>.</li>\n                                    <li> <var>M</var> represents the number of people in country R and satisfies <var>50 \\le M \\le 1600</var>.</li>\n                                    <li> <var>K</var> represents the initial money of railway company X and satisfies <var>11000 \\leq K \\leq 20000</var>.</li>\n                                    <li> <var>T</var> represents the number of turns in the game and satisfies <var>T = 800</var>.</li>\n                                </ul>\n                            </li>\n                            <li>\n                                The following <var>M</var> lines provide information about the commuting of people living in country R.\n                                Each line contains four space-separated integers, where the home of person <var>c</var> is at section <var>(i_{c,s}, j_{c,s})</var> and the workplace is at section <var>(i_{c, t}, j_{c,t} )</var>.\n                                The following conditions are satisfied: <var>0 \\leq i_{c, s}, i_{c, t} \\lt N, 0 \\leq j_{c, s}, j_{c, t} \\lt N, | i_{c,s} - i_{c,t} | + | j_{c,s} - j_{c,t} | \\gt 4 (0 \\leq c \\lt M)</var>.\n                            </li>\n                        </ul>\n                        <h3>Output</h3>\n                        <p>Output <var>T</var> lines. For the <var>t</var>-th row, output the action taken during the <var>t</var>-th construction phase in the following format:</p>\n                        <ul>\n                            <li>\n                                When placing a rail\n                                <br>\n                                If you are constructing a rail of type <var>p</var> at section <var>(i, j)</var>, output <var>p, i, j</var> separated by spaces.\n                                <br>\n                                The types of rails are numbered according to the diagram provided in the problem statement.\n                            </li>\n                            <li>\n                                When placing a station\n                                <br>\n                                If you are constructing a station at section <var>(i, j)</var>, output <var>0, i, j</var> separated by spaces.\n                            </li>\n                            <li>\n                                When waiting\n                                <br>\n                                Output <code>-1</code>.\n                            </li>\n                        </ul>\n                        <p><a href=\"https://img.atcoder.jp/ahc043/de43f43a9c.html?lang=en&amp;output=sample\">show example</a></p>\n                    </section>\n                </div>\n            </div>\n    \n            <div class=\"part\">\n                <section>\n                    <h3>Input Generation</h3>\n                    <details>\n                        <summary>Details</summary>\n                            <p>\n                                Let <var>\\mathrm{rand}(L, U)</var> be a function that generates a uniform random integer between <var>L</var> and <var>U</var>, inclusive,\n                                and <var>\\mathrm{rand\\_double}(L, U)</var> be a function that generates a uniform random real number greater than or equal to <var>L</var> and less than <var>U</var>, \n                                and <var>\\mathrm{normal}(\\mu,\\sigma)</var> be a function that generates a random real number from a normal distribution with mean <var>\\mu</var> and standard deviation <var>\\sigma</var>.\n                            </p>\n                            <h4>Generation of <var>M</var></h4>\n                            <p><var>M = \\mathrm{round}(50 \\times 2 ^{\\mathrm{rand\\_double}(0,5)})</var></p>\n                            <h4>Generation of the locations of homes and workplaces</h4>\n                            <p>\n                                Create a Gaussian mixture model to generate home locations as follows:<br>\n                                Generate the number of clusters with <var>\\mathrm{rand}(5,15)</var>.\n                                For each cluster <var>i</var>, generate the weight <var>w_i = \\mathrm{rand\\_double}(0, 1)</var>, the center coordinates <var> (r_i, c_i) =  (\\mathrm{rand\\_double}(0, N-1), \\mathrm{rand\\_double}(0, N-1))</var>, and the standard deviation <var>\\sigma_i  = \\mathrm{rand\\_double}(2, 15)</var>.\n                                <br>\n                                Similarly, create a Gaussian mixture model to generate workplace locations.\n                            </p>\n                            <p>\n                                Repeat the following process <var>M</var> times to generate the locations for people's homes and workplaces:\n                            </p>\n                            <p>\n                                </p><ol>\n                                    <li>Randomly select a cluster <var>i</var> from the Gaussian mixture model for generating home locations with a probability proportional to the weight <var>w_i</var>.</li>\n                                    <li>For the selected <var>i</var>, generate the home location as <var>r_0 = \\text{round}(\\text{normal}(r_i, \\sigma_i)), c_0 =  \\text{round}(\\text{normal}(c_i, \\sigma_i))</var>.</li>\n                                    <li>If the generated location <var>(r_0, c_0)</var> do not satisfy <var>0 \\leq r_0 \\lt N </var> or <var>0 \\leq c_0 \\lt N </var>, start over from step 1.</li>\n                                    <li>Similarly, generate the workplace location <var>(r_1, c_1) </var>.</li>\n                                    <li>If the Manhattan distance between the home location <var> (r_0, c_0)</var> and the workplace location <var>(r_1, c_1)</var> is less than or equal to <var>4</var>, start over from step 1.</li>\n                                </ol>\n                            <p></p>\n                            <h4>Generation of <var>K</var></h4>\n                            <p>\n                                For <var>M</var> people, let the minimum Manhattan distance between their home and workplace locations be <var>d</var>.\n                                <var>K</var> is generated as <var>\\mathrm{rand}(\\mathrm{max}(10, d) \\times 100, 2 \\times N \\times 100) + 10000</var>.\n                            </p>\n                    </details>\n                </section>\n            </div>\n            <div class=\"part\">\n                <section>\n                    <h3>Tools (Input generator and visualizer)</h3>\n                    <ul>\n                        <li><a href=\"https://img.atcoder.jp/ahc043/de43f43a9c.html?lang=en\">Web version</a>: This is more powerful than the local version providing animations.</li>\n                        <li><a href=\"https://img.atcoder.jp/ahc043/de43f43a9c.zip\">Local version</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.\n                            <ul><li><a href=\"https://img.atcoder.jp/ahc043/de43f43a9c_windows.zip\">Pre-compiled binary for Windows</a>: If you are not familiar with the Rust language environment, please use this instead.</li></ul>\n                        </li>\n                    </ul>\n                    <p>\n                        <font color=\"red\"><strong>Please be aware that sharing visualization results or discussing solutions/ideas during the contest is prohibited.</strong></font>\n                    </p>\n                    <p>\n                        Your program may output comment lines starting with <code>#</code>.\n                        The web version of the visualizer displays the comment lines with the corresponding output, which may be useful for debugging and analysis.\n                        Since the judge program ignores all comment lines, you can submit a program that outputs comment lines as is.\n                    </p>\n                </section>\n            </div>\n            <div class=\"part\">\n                <section>\n                    <h3>Sample Solution</h3>\n                    <details>\n                        <summary>Sample implementation in Python</summary>\n<pre class=\"prettyprint linenums\">import sys\n\nPos = tuple[int, int]\nEMPTY = -1\nDO_NOTHING = -1\nSTATION = 0\nRAIL_HORIZONTAL = 1\nRAIL_VERTICAL = 2\nRAIL_LEFT_DOWN = 3\nRAIL_LEFT_UP = 4\nRAIL_RIGHT_UP = 5\nRAIL_RIGHT_DOWN = 6\nCOST_STATION = 5000\nCOST_RAIL = 100\n\n\nclass UnionFind:\n    def __init__(self, n: int):\n        self.n = n\n        self.parents = [-1 for _ in range(n * n)]\n\n    def _find_root(self, idx: int) -&gt; int:\n        if self.parents[idx] &lt; 0:\n            return idx\n        self.parents[idx] = self._find_root(self.parents[idx])\n        return self.parents[idx]\n\n    def is_same(self, p: Pos, q: Pos) -&gt; bool:\n        p_idx = p[0] * self.n + p[1]\n        q_idx = q[0] * self.n + q[1]\n        return self._find_root(p_idx) == self._find_root(q_idx)\n\n    def unite(self, p: Pos, q: Pos) -&gt; None:\n        p_idx = p[0] * self.n + p[1]\n        q_idx = q[0] * self.n + q[1]\n        p_root = self._find_root(p_idx)\n        q_root = self._find_root(q_idx)\n        if p_root != q_root:\n            p_size = -self.parents[p_root]\n            q_size = -self.parents[q_root]\n            if p_size &gt; q_size:\n                p_root, q_root = q_root, p_root\n            self.parents[q_root] += self.parents[p_root]\n            self.parents[p_root] = q_root\n\n\ndef distance(a: Pos, b: Pos) -&gt; int:\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n\nclass Action:\n    def __init__(self, type: int, pos: Pos):\n        self.type = type\n        self.pos = pos\n\n    def __str__(self):\n        if self.type == DO_NOTHING:\n            return \"-1\"\n        else:\n            return f\"{self.type} {self.pos[0]} {self.pos[1]}\"\n\n\nclass Result:\n    def __init__(self, actions: list[Action], score: int):\n        self.actions = actions\n        self.score = score\n\n    def __str__(self):\n        return \"\\n\".join(map(str, self.actions))\n\n\nclass Field:\n    def __init__(self, N: int):\n        self.N = N\n        self.rail = [[EMPTY] * N for _ in range(N)]\n        self.uf = UnionFind(N)\n\n    def build(self, type: int, r: int, c: int) -&gt; None:\n        assert self.rail[r][c] != STATION\n        if 1 &lt;= type &lt;= 6:\n            assert self.rail[r][c] == EMPTY\n        self.rail[r][c] = type\n\n        # connect adjacent cells\n        # top\n        if type in (STATION, RAIL_VERTICAL, RAIL_LEFT_UP, RAIL_RIGHT_UP):\n            if r &gt; 0 and self.rail[r - 1][c] in (STATION, RAIL_VERTICAL, RAIL_LEFT_DOWN, RAIL_RIGHT_DOWN):\n                self.uf.unite((r, c), (r - 1, c))\n        # bottom\n        if type in (STATION, RAIL_VERTICAL, RAIL_LEFT_DOWN, RAIL_RIGHT_DOWN):\n            if r &lt; self.N - 1 and self.rail[r + 1][c] in (STATION, RAIL_VERTICAL, RAIL_LEFT_UP, RAIL_RIGHT_UP):\n                self.uf.unite((r, c), (r + 1, c))\n        # left\n        if type in (STATION, RAIL_HORIZONTAL, RAIL_LEFT_DOWN, RAIL_LEFT_UP):\n            if c &gt; 0 and self.rail[r][c - 1] in (STATION, RAIL_HORIZONTAL, RAIL_RIGHT_DOWN, RAIL_RIGHT_UP):\n                self.uf.unite((r, c), (r, c - 1))\n        # right\n        if type in (STATION, RAIL_HORIZONTAL, RAIL_RIGHT_DOWN, RAIL_RIGHT_UP):\n            if c &lt; self.N - 1 and self.rail[r][c + 1] in (STATION, RAIL_HORIZONTAL, RAIL_LEFT_DOWN, RAIL_LEFT_UP):\n                self.uf.unite((r, c), (r, c + 1))\n\n    def is_connected(self, s: Pos, t: Pos) -&gt; bool:\n        assert distance(s, t) &gt; 4  # precondition\n        stations0 = self.collect_stations(s)\n        stations1 = self.collect_stations(t)\n        for station0 in stations0:\n            for station1 in stations1:\n                if self.uf.is_same(station0, station1):\n                    return True\n        return False\n\n    def collect_stations(self, pos: Pos) -&gt; list[Pos]:\n        stations = []\n        for dr in range(-2, 3):\n            for dc in range(-2, 3):\n                if abs(dr) + abs(dc) &gt; 2:\n                    continue\n                r = pos[0] + dr\n                c = pos[1] + dc\n                if 0 &lt;= r &lt; self.N and 0 &lt;= c &lt; self.N and self.rail[r][c] == STATION:\n                    stations.append((r, c))\n        return stations\n\n\nclass Solver:\n    def __init__(self, N: int, M: int, K: int, T: int, home: list[Pos], workplace: list[Pos]):\n        self.N = N\n        self.M = M\n        self.K = K\n        self.T = T\n        self.home = home\n        self.workplace = workplace\n        self.field = Field(N)\n        self.money = K\n        self.actions = []\n\n    def calc_income(self) -&gt; int:\n        income = 0\n        for i in range(self.M):\n            if self.field.is_connected(self.home[i], self.workplace[i]):\n                income += distance(self.home[i], self.workplace[i])\n        return income\n\n    def build_rail(self, type: int, r: int, c: int) -&gt; None:\n        self.field.build(type, r, c)\n        self.money -= COST_RAIL\n        self.actions.append(Action(type, (r, c)))\n\n    def build_station(self, r: int, c: int) -&gt; None:\n        self.field.build(STATION, r, c)\n        self.money -= COST_STATION\n        self.actions.append(Action(STATION, (r, c)))\n\n    def build_nothing(self) -&gt; None:\n        self.actions.append(Action(DO_NOTHING, (0, 0)))\n\n    def solve(self) -&gt; Result:\n        # find a person to connect\n        rail_count = (self.K - COST_STATION * 2) // COST_RAIL\n        person_idx = 0\n        while person_idx &lt; self.M:\n            if distance(self.home[person_idx], self.workplace[person_idx]) - 1 &lt;= rail_count:\n                break\n            person_idx += 1\n        assert person_idx != self.M\n\n        # build stations\n        self.build_station(*self.home[person_idx])\n        self.build_station(*self.workplace[person_idx])\n\n        # connect stations with rails\n        r0, c0 = self.home[person_idx]\n        r1, c1 = self.workplace[person_idx]\n        # r0 -&gt; r1\n        if r0 &lt; r1:\n            for r in range(r0 + 1, r1):\n                self.build_rail(RAIL_VERTICAL, r, c0)\n            if c0 &lt; c1:\n                self.build_rail(RAIL_RIGHT_UP, r1, c0)\n            elif c0 &gt; c1:\n                self.build_rail(RAIL_LEFT_UP, r1, c0)\n        elif r0 &gt; r1:\n            for r in range(r0 - 1, r1, -1):\n                self.build_rail(RAIL_VERTICAL, r, c0)\n            if c0 &lt; c1:\n                self.build_rail(RAIL_RIGHT_DOWN, r1, c0)\n            elif c0 &gt; c1:\n                self.build_rail(RAIL_LEFT_DOWN, r1, c0)\n        # c0 -&gt; c1\n        if c0 &lt; c1:\n            for c in range(c0 + 1, c1):\n                self.build_rail(RAIL_HORIZONTAL, r1, c)\n        elif c0 &gt; c1:\n            for c in range(c0 - 1, c1, -1):\n                self.build_rail(RAIL_HORIZONTAL, r1, c)\n\n        income = self.calc_income()\n        self.money += income\n\n        # do nothing for the rest of the time\n        while len(self.actions) &lt; self.T:\n            self.build_nothing()\n            self.money += income\n\n        return Result(self.actions, self.money)\n\n\ndef main():\n    N, M, K, T = map(int, input().split())\n    home = []\n    workplace = []\n    for _ in range(M):\n        r0, c0, r1, c1 = map(int, input().split())\n        home.append((r0, c0))\n        workplace.append((r1, c1))\n\n    solver = Solver(N, M, K, T, home, workplace)\n    result = solver.solve()\n    print(result)\n    print(f\"score={result.score}\", file=sys.stderr)\n\n\nif __name__ == \"__main__\":\n    main()\n</pre>\n                    </details>\n                    <p>The following processes are implemented:</p>\n                    <ol>\n                        <li>Examine person <var>0</var>, <var>1</var>, <var>\\ldots</var> in order to find the first person for whom it is possible to place stations at their home and workplace locations and connect them with rails at the initial money.</li>\n                        <li>Place stations at the identified person's home and workplace locations, and place rails to connect from home to workplace.</li>\n                        <li>After that, wait until turn <var>T</var>.</li>\n                    </ol>\n                    <p>The code includes a simulation of the changes in money. You may use it as a reference when creating your solution.</p>\n                </section>\n            </div>\n        </span>"},"endpoint":"https://atcoder.jp/contests/ahc043/tasks/ahc043_a"}