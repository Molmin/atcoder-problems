{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>600</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N</var> 頂点 <var>M</var> 辺の単純な無向グラフが与えられます。頂点には <var>1, \\cdots, N</var> の番号がついています。<var>i</var> 番目の辺は頂点 <var>a_i</var>, <var>b_i</var> を繋いでいます。\nまた、正整数列 <var>c_1, c_2, \\cdots, c_N</var> も与えられます。</p>\n<p>このグラフを、次の条件を満たすように有向グラフに変換してください。つまり、各 <var>i</var> について無向辺 <var>(a_i, b_i)</var> を削除し、有向辺 <var>a_i \\to b_i</var>、<var>b_i \\to a_i</var> のどちらか <var>1</var> つを張ってください。</p>\n<ul>\n<li>全ての <var>i = 1, 2, \\cdots, N</var> について、頂点 <var>i</var> から(有向辺を好きな回数使うことで)到達可能な頂点数がちょうど <var>c_i</var> 個。なお、頂点 <var>i</var> 自身も <var>1</var> 個と数える。</li>\n</ul>\n<p>なお、この問題では、<strong>解が存在する</strong>ような入力のみが与えられます。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>0 \\leq M \\leq \\frac{N(N - 1)}{2}</var></li>\n<li><var>1 \\leq a_i, b_i \\leq N</var></li>\n<li>与えられるグラフに自己ループや多重辺は存在しない</li>\n<li><var>1 \\leq c_i \\leq N</var></li>\n<li><strong>必ず題意を満たす解が存在する</strong></li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var> <var>M</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>a_M</var> <var>b_M</var>\n<var>c_1</var> <var>c_2</var> <var>...</var> <var>c_N</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p><var>M</var> 行出力せよ。</p>\n<p><var>i</var> 行目には、<var>i</var> 番目の辺について <var>a_i \\to b_i</var> に辺を張りたい場合 <code>-&gt;</code>、<var>a_i \\gets b_i</var> に辺を張りたい場合 <code>&lt;-</code> を出力せよ。</p>\n<p>解が複数存在する場合、どれを出力しても構わない。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>3 3\n1 2\n2 3\n3 1\n3 3 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>-&gt;\n-&gt;\n-&gt;\n</pre>\n\n<p>長さ <var>3</var> のサイクルでは、どの頂点からも全ての頂点に到達できます。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>3 2\n1 2\n2 3\n1 2 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>&lt;-\n&lt;-\n</pre>\n\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>6 3\n1 2\n4 3\n5 6\n1 2 1 2 2 1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>&lt;-\n-&gt;\n-&gt;\n</pre>\n\n<p>グラフは非連結のこともあります。</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a simple undirected graph with <var>N</var> vertices and <var>M</var> edges. The vertices are numbered <var>1, \\cdots, N</var>, and the <var>i</var>-th edge connects Vertices <var>a_i</var> and <var>b_i</var>.\nAlso given is a sequence of positive integers: <var>c_1, c_2, \\cdots, c_N</var>.</p>\n<p>Convert this graph into a directed graph that satisfies the condition below, that is, for each <var>i</var>, delete the undirected edge <var>(a_i, b_i)</var> and add one of the two direted edges <var>a_i \\to b_i</var> and <var>b_i \\to a_i</var>.</p>\n<ul>\n<li>For every <var>i = 1, 2, \\cdots, N</var>, there are exactly <var>c_i</var> vertices reachable from Vertex <var>i</var> (by traversing some number of directed edges), including Vertex <var>i</var> itself.</li>\n</ul>\n<p>In this problem, it is guaranteed that the given input <strong>always has a solution</strong>.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>0 \\leq M \\leq \\frac{N(N - 1)}{2}</var></li>\n<li><var>1 \\leq a_i, b_i \\leq N</var></li>\n<li>The given graph has no self-loops and no multi-edges.</li>\n<li><var>1 \\leq c_i \\leq N</var></li>\n<li><strong>There always exists a valid solution.</strong></li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>a_M</var> <var>b_M</var>\n<var>c_1</var> <var>c_2</var> <var>...</var> <var>c_N</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>M</var> lines.</p>\n<p>To add the edge <var>a_i \\to b_i</var> for the <var>i</var>-th edge, print <code>-&gt;</code> in the <var>i</var>-th line; to add the edge <var>b_i \\to a_i</var> for the <var>i</var>-th edge, print <code>&lt;-</code>.</p>\n<p>If there are multiple solutions, any of them will be accepted.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n1 2\n2 3\n3 1\n3 3 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>-&gt;\n-&gt;\n-&gt;\n</pre>\n\n<p>In a cycle of length <var>3</var>, you can reach every vertex from any vertex.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n1 2\n2 3\n1 2 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>&lt;-\n&lt;-\n</pre>\n\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 3\n1 2\n4 3\n5 6\n1 2 1 2 2 1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>&lt;-\n-&gt;\n-&gt;\n</pre>\n\n<p>The graph may be disconnected.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/arc111/tasks/arc111_d"}