{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>1800</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>長さ <var>3N</var> の数列 <var>A, B</var> が与えられます。この <var>2</var> つの数列は、共に <var>1, 2, \\dots, N</var> をちょうど <var>3</var> 個ずつ含みます。\n言い換えると、<var>(1, 1, 1, 2, 2, 2, \\dots, N, N, N)</var> の並び替えになっています。</p>\n<p>高橋くんは、数列 <var>A</var> に以下の操作を好きな回数繰り返し行えます。</p>\n<ul>\n<li><var>1, 2, \\dots, N</var> から値を一つ選び、<var>x</var> とする。<var>A</var> は <var>x</var> をちょうど <var>3</var> つ含むが、このうち 中央の要素を削除する。その後、<var>A</var> の先頭か末尾に <var>x</var> を追加する。</li>\n</ul>\n<p><var>A</var> を <var>B</var> に変更できるか判定してください。可能な場合は、変更に必要な最小の操作回数も求めてください。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq N \\leq 33</var></li>\n<li><var>A, B</var> は共に <var>(1, 1, 1, 2, 2, 2, \\dots, N, N, N)</var> の並び替え。</li>\n<li>入力される数は全て整数である。</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><pre><var>N</var>\n<var>A_1</var> <var>A_2</var> ... <var>A_{3N}</var>\n<var>B_1</var> <var>B_2</var> ... <var>B_{3N}</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>変更可能な場合は最小の操作回数、不可能な場合は <var>-1</var> を出力してください。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>3\n2 3 1 1 3 2 2 1 3\n1 2 2 3 1 2 3 1 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>4\n</pre>\n\n<p>例えば以下のように操作するとよいです。</p>\n<ul>\n<li><code>2 3 1 1 3 2 2 1 3</code> (スタート)</li>\n<li><code>2 2 3 1 1 3 2 1 3</code> (<var>x = 2</var> を選び、先頭に追加)</li>\n<li><code>2 2 3 1 3 2 1 3 1</code> (<var>x = 1</var> を選び、末尾に追加)</li>\n<li><code>1 2 2 3 1 3 2 3 1</code> (<var>x = 1</var> を選び、先頭に追加)</li>\n<li><code>1 2 2 3 1 2 3 1 3</code> (<var>x = 3</var> を選び、末尾に追加)</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>3\n1 1 1 2 2 2 3 3 3\n1 1 1 2 2 2 3 3 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>0\n</pre>\n\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>3\n2 3 3 1 1 1 2 2 3\n3 2 2 1 1 1 3 3 2\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>-1\n</pre>\n\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 4</h3><pre>8\n3 6 7 5 4 8 4 1 1 3 8 7 3 8 2 4 7 5 2 2 6 5 6 1\n7 5 8 1 3 6 7 5 4 8 1 3 3 8 2 4 2 6 5 6 1 4 7 2\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 4</h3><pre>7\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>1800</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are integer sequences <var>A</var> and <var>B</var> of length <var>3N</var>. Each of these two sequences contains three copies of each of <var>1, 2, \\dots, N</var>.\nIn other words, <var>A</var> and <var>B</var> are both arrangements of <var>(1, 1, 1, 2, 2, 2, \\dots, N, N, N)</var>.</p>\n<p>Tak can perform the following operation to the sequence <var>A</var> arbitrarily many times:</p>\n<ul>\n<li>Pick a value from <var>1, 2, \\dots, N</var> and call it <var>x</var>. <var>A</var> contains exactly three copies of <var>x</var>. Remove the middle element of these three. After that, append <var>x</var> to the beginning or the end of <var>A</var>.</li>\n</ul>\n<p>Check if he can turn <var>A</var> into <var>B</var>. If he can, print the minimum required number of operations to achieve that.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 33</var></li>\n<li><var>A</var> and <var>B</var> are both arrangements of <var>(1, 1, 1, 2, 2, 2, \\dots, N, N, N)</var>.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> ... <var>A_{3N}</var>\n<var>B_1</var> <var>B_2</var> ... <var>B_{3N}</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Tak can turn <var>A</var> into <var>B</var>, print the minimum required number of operations to achieve that. Otherwise, print <var>-1</var>.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 3 1 1 3 2 2 1 3\n1 2 2 3 1 2 3 1 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n\n<p>For example, Tak can perform operations as follows:</p>\n<ul>\n<li><code>2 3 1 1 3 2 2 1 3</code> (The initial state)</li>\n<li><code>2 2 3 1 1 3 2 1 3</code> (Pick <var>x = 2</var> and append it to the beginning)</li>\n<li><code>2 2 3 1 3 2 1 3 1</code> (Pick <var>x = 1</var> and append it to the end)</li>\n<li><code>1 2 2 3 1 3 2 3 1</code> (Pick <var>x = 1</var> and append it to the beginning)</li>\n<li><code>1 2 2 3 1 2 3 1 3</code> (Pick <var>x = 3</var> and append it to the end)</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 1 1 2 2 2 3 3 3\n1 1 1 2 2 2 3 3 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n2 3 3 1 1 1 2 2 3\n3 2 2 1 1 1 3 3 2\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre>\n\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8\n3 6 7 5 4 8 4 1 1 3 8 7 3 8 2 4 7 5 2 2 6 5 6 1\n7 5 8 1 3 6 7 5 4 8 1 3 3 8 2 4 2 6 5 6 1 4 7 2\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>7\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/acl1/tasks/acl1_f"}