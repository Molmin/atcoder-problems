{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>ストーリー</h3><p>下図のような地図が与えられる。\n赤い丸印に高橋くんの自宅があり、青い丸印にAtCoder社のオフィスがある。\n高橋くんはオフィスへの行き方を、下右下右のような文字列で覚えている。\n高橋くんは忘れっぽいため、覚えている文字列の一部を忘れてしまうことがある。\nたとえば、3文字目を忘れて下右右と移動した場合、オフィスにたどり着くことが出来ずに迷子になってしまう。\nそこで、一部を忘れても高確率でオフィスまでたどり着けるような、頑強な文字列を記憶することにした。\n例えば、下右下右下右という文字列を覚えておけば、どの1文字を忘れたとしても無事オフィスにたどり着くことが出来る。\nオフィスへ到達出来る確率が高く、かつ出来るだけ早くオフィスに到達出来るような文字列を求めてほしい。</p>\n<table>\n<tbody><tr>\n<td>\n<figure style=\"text-align:center\">\n<img src=\"https://img.atcoder.jp/ahc009/f29506fb2_1.svg\">\n<figcaption>下右下右</figcaption>\n</figure>\n</td>\n<td>\n<figure style=\"text-align:center\">\n<img src=\"https://img.atcoder.jp/ahc009/f29506fb2_2.svg\">\n<figcaption>下右<del>下</del>右</figcaption>\n</figure>\n</td>\n<td>\n<figure style=\"text-align:center\">\n<img src=\"https://img.atcoder.jp/ahc009/f29506fb2_3.svg\">\n<figcaption>下右<del>下</del>右下右</figcaption>\n</figure>\n</td>\n</tr>\n</tbody></table>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>20\\times 20</var> マスの地図が与えられる。\n外周は壁に囲まれており、隣接するマスとマスの間にも壁がある場合がある。\n一番左上のマスの座標を <var>(0, 0)</var> とし、そこから下方向に <var>i</var> マス、右方向に <var>j</var> マス進んだ先のマスの座標を <var>(i,j)</var> とする。\nマス <var>(s_i, s_j)</var> に高橋くんの自宅があり、マス <var>(t_i, t_j)</var> に AtCoder社のオフィスがある。\n自宅からオフィスへの通勤経路を、上下左右の移動をそれぞれ <code>U</code>, <code>D</code>, <code>L</code>, <code>R</code> で表した長さ <var>200</var> 以下の文字列として出力せよ。</p>\n<p>出力された文字列の長さを <var>L</var> とする。\n高橋くんは自宅から出発し、<var>t=1,\\cdots,L</var> ターン目には以下のように行動する。</p>\n<ul>\n<li>一定の確率 <var>p</var> で、<var>t</var> 文字目を思い出すことが出来ずにその場にとどまる。</li>\n<li>残りの確率 <var>1-p</var> で、<var>t</var> 文字目の示す方向へ1マス移動する。その方向が壁の場合はその場にとどまる。</li>\n</ul>\n<p>途中でオフィスに到着した場合はその時点で移動を終了する。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p>確率変数 <var>S</var> を、<var>t</var> ターン目の行動後にオフィスに到着した場合は <var>S=401-t</var>、最後までオフィスに到着出来なかった場合は <var>S=0</var> として定義し、期待値 <var>E[S]</var> を計算する。\nこのとき、<var>\\mathrm{round}(250000\\times E[S])</var> の得点が得られる。\n不正な出力(長さが200を超えるか、<code>U</code>, <code>D</code>, <code>L</code>, <code>R</code> 以外の文字を含む)がされた場合は <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span> と判定される。</p>\n<p>テストケースは全部で 100 個あり、各テストケースの得点の合計が提出の得点となる。\n1つ以上のテストケースで <span class=\"label label-success\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"正解\">AC</span> 以外の判定がされた場合、提出の得点は0点となる。\nコンテスト時間中に得た最高得点で最終順位が決定され、コンテスト終了後のシステムテストは行われない。\n同じ得点を複数の参加者が得た場合、その得点を獲得した提出の早い方が上位となる。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>s_i</var> <var>s_j</var> <var>t_i</var> <var>t_j</var> <var>p</var>\n<var>h_{0,0}</var> <var>\\cdots</var> <var>h_{0,18}</var>\n<var>\\vdots</var>\n<var>h_{19,0}</var> <var>\\cdots</var> <var>h_{19,18}</var>\n<var>v_{0,0}</var> <var>\\cdots</var> <var>v_{0,19}</var>\n<var>\\vdots</var>\n<var>v_{18,0}</var> <var>\\cdots</var> <var>v_{18,19}</var>\n</pre>\n\n<p>自宅とオフィスの座標は <var>0\\leq s_i\\leq 4</var>, <var>0\\leq s_j\\leq 4</var>, <var>15\\leq t_i\\leq 19</var>, <var>15\\leq t_j\\leq 19</var> を満たす。\n<var>p</var> は各文字を忘れてしまう確率で <var>0.1</var> 以上 <var>0.5</var> 以下の実数である。\n<var>h_{i,0}</var> <var>\\cdots</var> <var>h_{i,18}</var> は <var>0</var> もしくは <var>1</var> のみからなる <var>19</var> 文字の文字列であり、<var>(i,j)</var> と <var>(i,j+1)</var> のマスの間に壁がある場合は <var>h_{i,j}=1</var>、無い場合は <var>h_{i,j}=0</var> である。\n<var>v_{i,0}</var> <var>\\cdots</var> <var>v_{i,19}</var> は <var>0</var> もしくは <var>1</var> のみからなる <var>20</var> 文字の文字列であり、<var>(i,j)</var> と <var>(i+1,j)</var> のマスの間に壁がある場合は <var>v_{i,j}=1</var>、無い場合は <var>v_{i,j}=0</var> である。\n全てのマスは自宅から到達可能であることが保証されている。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>高橋くんが記憶する文字列を1行に出力せよ。</p>\n<p><a href=\"https://img.atcoder.jp/ahc009/cf3f791aac0f80374c60.html?lang=ja&amp;show=example\">例を見る</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><p></p><details>\n<var>L</var> 以上 <var>U</var> 以下の整数値を一様ランダムに生成する関数を <var>\\mathrm{rand}(L,U)</var> で表す。<p></p>\n<h4><var>(s_i, s_j)</var>, <var>(t_i, t_j)</var>, <var>p</var> の生成</h4>\n<p><var>s_i=\\mathrm{rand}(0, 4)</var>, <var>s_j=\\mathrm{rand}(0, 4)</var>, <var>t_i=\\mathrm{rand}(15, 19)</var>, <var>t_j=\\mathrm{rand}(15, 19)</var>, <var>p=\\mathrm{rand}(10, 50) / 100</var> により生成される。</p>\n<h4><var>h_{i,j}</var>, <var>v_{i,j}</var> の生成</h4>\n<p><var>[k]=\\{0,1,\\cdots,k-1\\}</var> と定義する。\n頂点集合 <var>V=[20]\\times[20]</var>、辺集合 <var>E=\\{\\{(i,j),(i,j+1)\\}\\mid i\\in[20],j\\in[19]\\}\\cup\\{\\{(i,j),(i+1,j)\\}\\mid i\\in[19],j\\in[20]\\}</var> のグリッドグラフ上の2つの全域木 <var>G_r=(V,E_r)</var> <var>(r=1,2)</var> を以下の処理を独立に二回行うことで生成する。</p>\n<ol>\n<li>まず、辺集合<var>E</var>をランダムな順番にシャッフルして <var>e_0,\\cdots,e_{759}</var> とする。</li>\n<li><var>E_r=\\emptyset</var> から開始し、<var>k=0</var> から <var>k=759</var> まで順番に、各 <var>e_k=\\{(i,j),(i',j')\\}</var> に対して、<var>(i,j)</var> と <var>(i',j')</var> が <var>G_r</var> 上で連結でないならば <var>e_k</var> を <var>E_r</var> に加える。</li>\n</ol>\n<p>得られた2つの全域木を用いて、<var>h</var> と <var>v</var> を以下のように設定する。</p>\n<ul>\n<li><var>h_{i,j}=0 \\iff \\{(i,j),(i,j+1)\\}\\in E_1\\cup E_2</var></li>\n<li><var>v_{i,j}=0 \\iff \\{(i,j),(i+1,j)\\}\\in E_1\\cup E_2</var></li>\n</ul>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール(入力ジェネレータ・ビジュアライザ)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc009/cf3f791aac0f80374c60.html\">Web版</a>: ローカル版より高性能でアニメーション表示が可能です。</li>\n<li><a href=\"https://img.atcoder.jp/ahc009/cf3f791aac0f80374c60.zip\">ローカル版</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。<ul>\n<li><a href=\"https://img.atcoder.jp/ahc009/cf3f791aac0f80374c60_windows.zip\">Windows用のコンパイル済みバイナリ</a>: Rust言語の環境構築が面倒な方は代わりにこちらをご利用下さい。</li>\n</ul>\n</li>\n</ul>\n<p><font color=\"red\"><strong>コンテスト終了までビジュアライズ結果の共有は禁止されています。ご注意下さい。</strong></font></p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">1 2 19 16 0.10\n0010000100110011100\n1000001000001000001\n0000000000000000010\n0100000000000110100\n0000000000000000100\n1000101100000101010\n0010001011000110000\n0000001001000000000\n0000000100010001001\n0010010000100000001\n0001000010000100000\n0011010000000001000\n0000000101010100000\n0000001000000100010\n0110100010000000000\n0010011101000101000\n0000100110010000000\n0010000101101000010\n1001000000000000000\n1000110000000000000\n00000001000000000100\n00001000010001000000\n00010001010000010000\n01110010101000010100\n00000000000001100000\n00001000010000000100\n00101000000010110011\n01010100000000000000\n00001101010010010010\n10000000000000010100\n01011010000001100100\n00000000000000010011\n00001100111000110100\n00000010000000000000\n00010000100111000000\n11010000001001010100\n01100010011001011001\n00000101000010101010\n00100000000000000001\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">RDLRLRRDUUDRLURDRRDDLRLRUURUUUUDRDRUUDLRUDLLDDDDURLRUDDLDRDLRLLLLUDRUDRRULRULRDLRLDLLUUULDLUURRLRDRRRRDULDRLRRRRDDDDDRULDDURDDDRDLRRLDLDLDLRLLLUDDRDDDUURUDDLLLUULLLLDLUDRLLDLLULRLDLDDRLDRDLURURULRDDDR\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Story</h3><p>A map like in the figure below is given.\nTakahashi's home is located in the square with the red circle, and AtCoder's office is located in the square with the blue circle.\nHe memorizes his commuting route to the office as a string of characters such as DRDR, which means Down, Right, Down, and Right.\nBecause he is quite forgetful, he sometimes forgets some parts of the string he has memorized.\nFor example, if he forgets the third character, he will move down, right, and right, and will be lost without reaching the office.\nTherefore, he decided to memorize a robust string that would allow him to reach the office with a high probability even if he forgets some parts of the string.\nFor example, if he memorizes a string DRDRDR, he can reach the office even if he forgets any one of the characters.\nYour task is to find a string that will allow Takahashi to reach the office quickly and with a high probability.</p>\n<table>\n<tbody><tr>\n<td>\n<figure style=\"text-align:center\">\n<img src=\"https://img.atcoder.jp/ahc009/f29506fb2_1.svg\">\n<figcaption>DRDR</figcaption>\n</figure>\n</td>\n<td>\n<figure style=\"text-align:center\">\n<img src=\"https://img.atcoder.jp/ahc009/f29506fb2_2.svg\">\n<figcaption>DR<del>D</del>R</figcaption>\n</figure>\n</td>\n<td>\n<figure style=\"text-align:center\">\n<img src=\"https://img.atcoder.jp/ahc009/f29506fb2_3.svg\">\n<figcaption>DR<del>D</del>RDR</figcaption>\n</figure>\n</td>\n</tr>\n</tbody></table>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a map consisting of <var>20\\times 20</var> squares.\nThe outside of the map is surrounded by walls.\nThere may also be walls between adjacent squares.\nLet <var>(0,0)</var> denote the top-left square, and <var>(i,j)</var> denote the square at the <var>i</var>-th row from the top and <var>j</var>-th column from the left.\nTakahashi's home is located at <var>(s_i, s_j)</var> and AtCoder's office is located at <var>(t_i, t_j)</var>.\nBy representing up, down, left, and right movements as <code>U</code>, <code>D</code>, <code>L</code>, and <code>R</code>, respectively, output a commuting route from the home to the office as a string of length less than or equal to <var>200</var>.</p>\n<p>Let <var>L</var> be the length of the output string.\nStarting from the home, Takahashi will do the following action in each <var>t=1,\\cdots,L</var> turn.</p>\n<ul>\n<li>With constant probability <var>p</var>, he cannot recall the <var>t</var>-th character and stays in the current square.</li>\n<li>With the remaining probability <var>1-p</var>, he moves one square in the direction represented by the <var>t</var>-th character. If there is a wall in that direction, he stays in the current square.</li>\n</ul>\n<p>When he gets to the office, he immediately terminate the move.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>Let <var>S</var> be a random variable defined as <var>S=401-t</var> if he gets to the office after <var>t</var> turns of actions and <var>S=0</var> if he fails to get to the office, and compute its expected value, <var>E[S]</var>.\nThen, you will get a score of <var>\\mathrm{round}(250000\\times E[S])</var>.\nIf your output is invalid (the length exceeds 200 or contains characters other than <code>U</code>, <code>D</code>, <code>L</code>, and <code>R</code>), it will be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Wrong Answer\">WA</span>.</p>\n<p>There are 100 test cases, and the score of a submission is the total score for each test case. If you get a result other than <span class=\"label label-success\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Accepted\">AC</span> for one or more test cases, the score of the submission will be zero. The highest score obtained during the contest time will determine the final ranking, and there will be no system test after the contest. If more than one participant gets the same score, the ranking will be determined by the submission time of the submission that received that score.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s_i</var> <var>s_j</var> <var>t_i</var> <var>t_j</var> <var>p</var>\n<var>h_{0,0}</var> <var>\\cdots</var> <var>h_{0,18}</var>\n<var>\\vdots</var>\n<var>h_{19,0}</var> <var>\\cdots</var> <var>h_{19,18}</var>\n<var>v_{0,0}</var> <var>\\cdots</var> <var>v_{0,19}</var>\n<var>\\vdots</var>\n<var>v_{18,0}</var> <var>\\cdots</var> <var>v_{18,19}</var>\n</pre>\n\n<p>The coordinates of the home and the office satisfy <var>0\\leq s_i\\leq 4</var>, <var>0\\leq s_j\\leq 4</var>, <var>15\\leq t_i\\leq 19</var>, and <var>15\\leq t_j\\leq 19</var>.\n<var>p</var> is a real number representing the probability of forgetting each character and satisfies <var>0.1\\leq p\\leq 0.5</var>.\n<var>h_{i,0}</var> <var>\\cdots</var> <var>h_{i,18}</var> is a string of <var>19</var> characters consisting of only <var>0</var> or <var>1</var>.\nIf there is a wall between the squares <var>(i,j)</var> and <var>(i,j+1)</var>, then <var>h_{i,j}=1</var>, otherwise <var>h_{i,j}=0</var>.\n<var>v_{i,0}</var> <var>\\cdots</var> <var>v_{i,19}</var> is a string of <var>20</var> characters consisting of only <var>0</var> or <var>1</var>.\nIf there is a wall between the squares <var>(i,j)</var> and <var>(i+1,j)</var>, then <var>v_{i,j}=1</var>, otherwise <var>v_{i,j}=0</var>.\nIt is guaranteed that all squares are reachable from the home.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Output a string that Takahashi memorizes in one line to Standard Output.</p>\n<p><a href=\"https://img.atcoder.jp/ahc009/cf3f791aac0f80374c60.html?lang=en&amp;show=example\">Show example</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><p></p><details>\nLet <var>\\mathrm{rand}(L,U)</var> be a function that generates a uniform random integer between <var>L</var> and <var>U</var>, inclusive.<p></p>\n<h4>Generation of <var>(s_i, s_j)</var>, <var>(t_i, t_j)</var>, and <var>p</var></h4>\n<p>We generate <var>s_i=\\mathrm{rand}(0, 4)</var>, <var>s_j=\\mathrm{rand}(0, 4)</var>, <var>t_i=\\mathrm{rand}(15, 19)</var>, <var>t_j=\\mathrm{rand}(15, 19)</var>, and <var>p=\\mathrm{rand}(10, 50) / 100</var>.</p>\n<h4>Generation of <var>h_{i,j}</var> and <var>v_{i,j}</var></h4>\n<p>Let <var>[k]=\\{0,1,\\cdots,k-1\\}</var>.\nLet <var>G=(V,E)</var> be a grid graph such that <var>V=[20]\\times[20]</var> and <var>E=\\{\\{(i,j),(i,j+1)\\}\\mid i\\in[20],j\\in[19]\\}\\cup\\{\\{(i,j),(i+1,j)\\}\\mid i\\in[19],j\\in[20]\\}</var>.\nWe generate two spanning trees <var>G_r=(V,E_r)</var> <var>(r=1,2)</var> of <var>G</var> by performing the following process twice independently.</p>\n<ol>\n<li>First, we randomly shuffle the edges <var>E</var> and obtain an ordered edge list <var>e_0,\\cdots,e_{759}</var>.</li>\n<li>Starting from <var>E_r=\\emptyset</var>, for each <var>e_k=\\{(i,j),(i',j')\\}</var> in order from <var>k=0</var> to <var>k=759</var>, we insert <var>e_k</var> into <var>E_r</var> if <var>(i,j)</var> and <var>(i',j')</var> are not connected in <var>G_r</var>.</li>\n</ol>\n<p>Using the obtained two spanning trees, we generate <var>h</var> and <var>v</var> as follows.</p>\n<ul>\n<li><var>h_{i,j}=0 \\iff \\{(i,j),(i,j+1)\\}\\in E_1\\cup E_2</var></li>\n<li><var>v_{i,j}=0 \\iff \\{(i,j),(i+1,j)\\}\\in E_1\\cup E_2</var></li>\n</ul>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools (Input generator and visualizer)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc009/cf3f791aac0f80374c60.html?lang=en\">Web version</a>: This is more powerful than the local version and can display animations.</li>\n<li><a href=\"https://img.atcoder.jp/ahc009/cf3f791aac0f80374c60.zip\">Local version</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.<ul>\n<li><a href=\"https://img.atcoder.jp/ahc009/cf3f791aac0f80374c60_windows.zip\">Pre-compiled binary for Windows</a>: If you are not familiar with the Rust language environment, please use this instead.</li>\n</ul>\n</li>\n</ul>\n<p><font color=\"red\"><strong>Sharing visualization results is not allowed until the end of the contest. </strong></font></p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">1 2 19 16 0.10\n0010000100110011100\n1000001000001000001\n0000000000000000010\n0100000000000110100\n0000000000000000100\n1000101100000101010\n0010001011000110000\n0000001001000000000\n0000000100010001001\n0010010000100000001\n0001000010000100000\n0011010000000001000\n0000000101010100000\n0000001000000100010\n0110100010000000000\n0010011101000101000\n0000100110010000000\n0010000101101000010\n1001000000000000000\n1000110000000000000\n00000001000000000100\n00001000010001000000\n00010001010000010000\n01110010101000010100\n00000000000001100000\n00001000010000000100\n00101000000010110011\n01010100000000000000\n00001101010010010010\n10000000000000010100\n01011010000001100100\n00000000000000010011\n00001100111000110100\n00000010000000000000\n00010000100111000000\n11010000001001010100\n01100010011001011001\n00000101000010101010\n00100000000000000001\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">RDLRLRRDUUDRLURDRRDDLRLRUURUUUUDRDRUUDLRUDLLDDDDURLRUDDLDRDLRLLLLUDRUDRRULRULRDLRLDLLUUULDLUURRLRDRRRRDULDRLRRRRDDDDDRULDDURDDDRDLRRLDLDLDLRLLLUDDRDDDUURUDDLLLUULLLLDLUDRLLDLLULRLDLDDRLDRDLURURULRDDDR\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ahc009/tasks/ahc009_a"}