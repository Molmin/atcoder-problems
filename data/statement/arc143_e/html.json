{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>700</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N</var> 頂点からなる木があります．\n各頂点には <var>1</var> から <var>N</var> までの番号がついており，\n<var>i</var> 番目の辺は頂点 <var>A_i</var> と頂点 <var>B_i</var> を結んでいます．\nまた，各頂点にはリバーシの石が <var>1</var> つずつ置かれています．\n各頂点に置かれている石の状態は文字列 <var>S</var> によって与えられ，\n<var>S</var> の <var>i</var> 番目の文字が <code>B</code> のとき，頂点 <var>i</var> に置かれている石の表は黒色，\n<var>S</var> の <var>i</var> 番目の文字が <code>W</code> のとき，頂点 <var>i</var> に置かれている石の表は白色です．</p>\n<p>以下の操作を <var>N</var> 回行い，すべての頂点から石を取り除くことが可能かどうか判定してください．\nまた可能ならば，列 <var>P_1,P_2,\\ldots,P_N</var> であって，頂点 <var>P_1,P_2,\\ldots,P_N</var> をこの順に選ぶことが可能なもののうち，辞書順で最小のものを求めてください．</p>\n<ul>\n<li>表が白色の石が置かれている頂点を <var>1</var> つ選び，その頂点から石を取り除く．\n  そして，その頂点と隣接する頂点に置かれている石をすべて裏返す．</li>\n</ul>\n<details>\n<summary>リバーシの石について</summary>\nリバーシの石は一方の面が黒色，もう一方の面が白色になっており，裏返すと表の色が入れ替わります．\n</details>\n\n<details> <summary>数列の辞書順とは？</summary> <p> \n相異なる数列 <var>S</var> と数列 <var>T</var> の大小を判定するアルゴリズムを以下に説明します． </p>\n\n<p>以下では <var>S</var> の <var>i</var> 番目の要素を <var>S_i</var> のように表します．また， <var>S</var> が <var>T</var> より辞書順で小さい場合は <var>S \\lt T</var> ，大きい場合は <var>S \\gt T</var> と表します．</p>\n\n<ol> <li> <var>S</var> と <var>T</var> のうち長さが短い方の文字列の長さを <var>L</var> とします．<var>i=1,2,\\dots,L</var> に対して <var>S_i</var> と <var>T_i</var> が一致するか調べます． </li> <li> <var>S_i \\neq T_i</var> である <var>i</var> が存在する場合，そのような <var>i</var> のうち最小のものを <var>j</var> とします．そして，<var>S_j</var> と <var>T_j</var> を比較して， <var>S_j</var> が <var>T_j</var> より（数として）小さい場合は <var>S \\lt T</var> ，大きい場合は <var>S \\gt T</var> と決定して，アルゴリズムを終了します． </li> <li> <var>S_i \\neq T_i</var> である <var>i</var> が存在しない場合， <var>S</var> と <var>T</var> の長さを比較して，<var>S</var> が <var>T</var> より短い場合は <var>S \\lt T</var> ，長い場合は <var>S \\gt T</var> と決定して，アルゴリズムを終了します． </li> </ol>\n\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>1 \\leq A_i, B_i \\leq N</var></li>\n<li>与えられるグラフは木である．</li>\n<li><var>S</var> は <code>B</code> と <code>W</code> の文字からなる長さ <var>N</var> の文字列である．</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる．</p>\n<pre><var>N</var>\n<var>A_1</var> <var>B_1</var>\n<var>\\vdots</var>\n<var>A_{N-1}</var> <var>B_{N-1}</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>目標が達成可能でない場合，<code>-1</code> を出力せよ．可能である場合，以下の形式で答えを出力せよ．</p>\n<pre><var>P_1</var> <var>P_2</var> <var>\\cdots</var> <var>P_N</var>\n</pre>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>4\n1 2\n2 3\n3 4\nWBWW\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>1 2 4 3 \n</pre>\n\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>4\n1 2\n2 3\n3 4\nBBBB\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>-1\n</pre>\n\n<p>この場合，一度も操作を行うことができません．</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a tree with <var>N</var> vertices.\nThe vertices are numbered <var>1</var> to <var>N</var>,\nand the <var>i</var>-th edge connects Vertex <var>A_i</var> and Vertex <var>B_i</var>.\nAdditionally, each vertex has a reversi piece on it.\nThe status of the piece on each vertex is given by a string <var>S</var>:\nif the <var>i</var>-th character of <var>S</var> is <code>B</code>, the piece on Vertex <var>i</var> is placed with the black side up;\nif the <var>i</var>-th character of <var>S</var> is <code>W</code>, the piece on Vertex <var>i</var> is placed with the white side up.</p>\n<p>Determine whether it is possible to perform the operation below <var>N</var> times to remove the pieces from all vertices.\nIf it is possible, find the lexicographically smallest possible sequence <var>P_1, P_2, \\ldots, P_N</var> such that Vertices <var>P_1, P_2, \\ldots, P_N</var> can be chosen in this order during the process.</p>\n<ul>\n<li>Choose a vertex containing a piece with the white side up, and remove the piece from that vertex.\nThen, flip all pieces on the vertices adjacent to that vertex.</li>\n</ul>\n<details>\n<summary>Notes on reversi pieces</summary>\nA reversi piece has a black side and a white side, and flipping it changes which side faces up.\n</details>\n\n<details>\n<summary>What is the lexicographical order on sequences?</summary>\n<p>\nThe following is an algorithm to determine the lexicographical order between different sequences <var>S</var> and <var>T</var>.\n</p>\n\n<p>Below, let <var>S_i</var> denote the <var>i</var>-th element of <var>S</var>. Also, if <var>S</var> is lexicographically smaller than <var>T</var>, we will denote that fact as <var>S \\lt T</var>; if <var>S</var> is lexicographically larger than <var>T</var>, we will denote that fact as <var>S \\gt T</var>.</p>\n\n<ol>\n  <li> Let <var>L</var> be the smaller of the lengths of <var>S</var> and <var>T</var>. For each <var>i=1,2,\\dots,L</var>, we check whether <var>S_i</var> and <var>T_i</var> are the same. </li>\n  <li> If there is an <var>i</var> such that <var>S_i \\neq T_i</var>, let <var>j</var> be the smallest such <var>i</var>. Then, we compare <var>S_j</var> and <var>T_j</var>. If <var>S_j</var> is less than <var>T_j</var> (as a number), we determine that <var>S \\lt T</var> and quit; if <var>S_j</var> is greater than <var>T_j</var>, we determine that <var>S \\gt T</var> and quit.\n  </li>\n  <li> If there is no <var>i</var> such that <var>S_i \\neq T_i</var>, we compare the lengths of <var>S</var> and <var>T</var>. If <var>S</var> is shorter than <var>T</var>, we determine that <var>S \\lt T</var> and quit; if <var>S</var> is longer than <var>T</var>, we determine that <var>S \\gt T</var> and quit. </li>\n</ol>\n\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>1 \\leq A_i, B_i \\leq N</var></li>\n<li>The given graph is a tree.</li>\n<li><var>S</var> is a string of length <var>N</var> consisting of the characters <code>B</code> and <code>W</code>.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>B_1</var>\n<var>\\vdots</var>\n<var>A_{N-1}</var> <var>B_{N-1}</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the objective is unachievable, print <code>-1</code>. If it is achievable, print the answer in the following format:</p>\n<pre><var>P_1</var> <var>P_2</var> <var>\\cdots</var> <var>P_N</var>\n</pre>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1 2\n2 3\n3 4\nWBWW\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 2 4 3 \n</pre>\n\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 2\n2 3\n3 4\nBBBB\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n\n<p>In this case, you cannot perform the operation at all.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/arc143/tasks/arc143_e"}