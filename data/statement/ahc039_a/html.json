{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>ストーリー</h3><p>高橋くんは巻き網漁を行う腕利きの漁師である。\n彼の漁船には最新鋭のソナーが搭載されており、漁場内の魚の位置を正確に把握することが可能である。\nまた、漁船は高速で移動できるため、網を設置している間、魚が動かないものと仮定して作業を進めることができる。</p>\n<p>漁の方法は、漁船を使って網を設置して閉じた多角形を作り、その内部の魚を捕獲するというものである。\nただし、効率よく作業を行うために、網を構成する多角形の各辺は、必ず東西、もしくは南北に平行でなければならない。\nまた、漁船の装備している網の長さには限りがあるため、限られた網の長さで多角形を作らなければならない。</p>\n<p>今回の漁場にはサバとイワシの二種類の魚が生息している。\n資源保護の観点から、現在この漁場でのイワシは禁漁対象であり、網にかかったイワシは全て放流しなければならない。\nこれは手間がかかるため、可能な限りイワシを避けつつ、出来るだけ多くのサバを捕獲してほしい。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>二次元平面上に <var>N</var> 匹のサバと <var>N</var> 匹のイワシがいる。<br>\n以下の条件を満たす多角形を構築し、その内側に含まれるサバの総数から内側に含まれるイワシの総数を引いた値を最大化せよ。<br>\nなお、多角形の辺上に存在する点は全て多角形の内側に含まれるものとみなす。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>条件</h3>\n<ol>\n<li>多角形の頂点数は <var>1000</var> 以下であり、辺の長さの総和は <var>4 \\times 10^5</var> 以下である。  </li>\n<li>各頂点 <var>(x, y)</var> の座標は整数で <var>0 \\leq x, y \\leq 10^5</var> を満たす。  </li>\n<li>各辺は <var>x</var> 軸または <var>y</var> 軸に平行である。  </li>\n<li>多角形は自己交差しない。すなわち、隣接しない2辺は共通点を持たず、隣接する2辺は共有する頂点以外に共有点を持たない。</li>\n</ol>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p>出力した多角形の内側に含まれるサバの総数を <var>a</var>、イワシの総数を <var>b</var> としたとき、<var>\\max(0, a-b+1)</var> の得点が得られる。</p>\n<p>合計で 150 個のテストケースがあり、各テストケースの得点の合計が提出の得点となる。\n一つ以上のテストケースで不正な出力や制限時間超過をした場合、提出全体の判定が<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span>や<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる。\nコンテスト時間中に得た最高得点で最終順位が決定され、コンテスト終了後のシステムテストは行われない。 同じ得点を複数の参加者が得た場合、提出時刻に関わらず同じ順位となる。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var>\n<var>x_0</var> <var>y_0</var>\n<var>\\vdots</var>\n<var>x_{2N-1}</var> <var>y_{2N-1}</var>\n</pre>\n<ul>\n<li>全てのテストケースで、サバとイワシの匹数 <var>N</var> は <var>5000</var> で固定である。</li>\n<li>各 <var>i=0,1,\\cdots,N-1</var> に対し、<var>(x_i,y_i)</var> は <var>i</var> 番目のサバの座標を表す</li>\n<li>各 <var>i=0,1,\\cdots,N-1</var> に対し、<var>(x_{N+i},y_{N+i})</var> は <var>i</var> 番目のイワシの座標を表す。</li>\n<li>各座標 <var>(x_i,y_i)</var> は、<var>0\\leq x_i,y_i\\leq 10^5</var> を満たし、全ての座標は相異なる。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>多角形の頂点数を <var>m</var> (<var>4\\leq m\\leq 1000</var>)とし、<var>i</var> 番目の頂点の座標を <var>(a_i,b_i)</var> としたとき、\n以下の形式で標準出力に出力せよ。</p>\n<pre><var>m</var>\n<var>a_0</var> <var>b_0</var>\n<var>\\vdots</var>\n<var>a_{m-1}</var> <var>b_{m-1}</var>\n</pre>\n<p>出力した頂点は多角形の角となっていなくても良い、すなわち、連続する3頂点 <var>(a_i,b_i), (a_{i+1},b_{i+1}), (a_{i+2},a_{i+2})</var> が一直線上に並んでいても構わない。\nただし、全ての頂点は異なる座標でなければならない。\n頂点は時計回り・反時計回りのどちらで出力しても構わない。</p>\n<p><a href=\"https://img.atcoder.jp/ahc039/KNtTkgAy.html?lang=ja&amp;seed=0&amp;output=sample\">例を見る</a></p>\n<p>解は複数回出力しても良い。\n複数出力された場合、一番最後に出力された解のみが採点に用いられる。\nWeb版のビジュアライザを用いると、複数の解の比較が可能である。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><ul>\n<li><var>\\mathrm{rand}(L,U)</var>: <var>L</var> 以上 <var>U</var> 以下の整数値を一様ランダムに生成する。</li>\n<li><var>\\mathrm{rand\\_double}(L,U)</var>: <var>L</var> 以上 <var>U</var> 以下の実数値を一様ランダムに生成する。</li>\n<li><var>\\mathrm{normal}(\\mu,\\sigma)</var>: 平均 <var>\\mu</var>、標準偏差 <var>\\sigma</var> の正規分布からランダムに実数値を生成する。</li>\n</ul>\n<p>まずはじめに、サバの座標を生成する。\nクラスタ数 <var>n</var> を、<var>n=\\mathrm{rand}(10,25)</var> により生成する。\n各クラスタ <var>i</var> に対し、重み <var>w_i=\\mathrm{rand\\_double}(0,1)</var>、中心 <var>(cx_i,cy_i)=(\\mathrm{rand}(20000,80000),\\mathrm{rand}(20000,80000))</var>、標準偏差 <var>\\sigma_i=\\mathrm{rand}(1000,5000)</var> を生成する。\n以下の処理を <var>N</var> 回繰り返すことで <var>N</var> 匹のサバの座標を生成する。</p>\n<p>重み <var>w_i</var> に比例する確率でクラスタ <var>i</var> をランダムに選択する。\n選択された <var>i</var> に対し、<var>x=\\mathrm{round}(\\mathrm{normal}(cx_i,\\sigma_i))</var>、<var>y=\\mathrm{round}(\\mathrm{normal}(cy_i,\\sigma_i))</var> を生成する。\n生成された座標 <var>(x,y)</var> が <var>0\\leq x,y\\leq 10^5</var> を満たし、かつ、これまで生成されたどの座標とも異なる場合、サバの座標として採用する。\nそうでない場合は <var>(x,y)</var> の生成をやり直す。</p>\n<p>サバの座標の生成が完了したら、同様にしてイワシの座標を生成する。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール(入力ジェネレータ・ビジュアライザ)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc039/KNtTkgAy.html?lang=ja\">Web版</a>: ローカル版より高性能でアニメーション表示が可能です。</li>\n<li><a href=\"https://img.atcoder.jp/ahc039/KNtTkgAy.zip\">ローカル版</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。<ul>\n<li><a href=\"https://img.atcoder.jp/ahc039/KNtTkgAy_windows.zip\">Windows用のコンパイル済みバイナリ</a>: Rust言語の環境構築が面倒な方は代わりにこちらをご利用下さい。</li>\n</ul>\n</li>\n</ul>\n<p>コンテスト期間中に、ビジュアライズ結果の共有や、解法・考察に関する言及は禁止されています。ご注意下さい。</p></section>\n</div>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Story</h3><p>Takahashi is a skilled purse seine fisher.\nHis fishing boat is equipped with state-of-the-art sonar, allowing him to accurately determine the positions of fish within the fishing area.\nAdditionally, the boat is capable of high-speed movement, enabling him to assume that fish remain stationary while he sets up the fishing net.</p>\n<p>The fishing method involves using the boat to deploy nets and form a closed polygon, capturing the fish within the enclosed area.\nTo optimize efficiency, each edge of the polygon formed by the nets must be aligned either parallel to the east-west or north-south direction.\nFurthermore, due to the limited length of the nets equipped on the boat, the polygon must be constructed within these constraints.</p>\n<p>The fishing area contains two types of fish: mackerels and sardines.\nFor resource conservation reasons, sardines are currently prohibited from being caught in this fishing area.\nAny sardines caught in the net must be released back into the sea.\nBecause this process is labor-intensive, Takahashi should focus on maximizing the catch of mackerel while avoiding sardines as much as possible.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> mackerels and <var>N</var> sardines on a two-dimensional plane.\nConstruct a polygon that satisfies the following conditions and maximize the value obtained by subtracting the total number of sardines inside the polygon from the total number of mackerels inside it.\nNote that any points lying on the edges of the polygon are considered to be inside the polygon.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Conditions</h3>\n<ol>\n<li>The number of vertices in the polygon must not exceed <var>1000</var>, and the total length of its edges must not exceed <var>4 \\times 10^5</var>.</li>\n<li>The coordinates of each vertex <var>(x, y)</var> must be integers satisfying <var>0 \\leq x, y \\leq 10^5</var>.</li>\n<li>Each edge of the polygon must be parallel to either the <var>x</var>-axis or the <var>y</var>-axis.</li>\n<li>The polygon must not self-intersect: non-adjacent edges must not share any points, and adjacent edges must only meet at their endpoints.</li>\n</ol>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>Let <var>a</var> be the total number of mackerels inside the polygon and <var>b</var> be the total number of sardines inside the polygon.\nThen, you will obtain the score of <var>\\max(0, a - b + 1)</var>.</p>\n<p>There are <var>150</var> test cases, and the score of a submission is the total score for each test case.\nIf your submission produces an illegal output or exceeds the time limit for some test cases, the submission itself will be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Wrong Answer\">WA</span> or <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> , and the score of the submission will be zero.\nThe highest score obtained during the contest will determine the final ranking, and there will be no system test after the contest.\nIf more than one participant gets the same score, they will be ranked in the same place regardless of the submission time.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_0</var> <var>y_0</var>\n<var>\\vdots</var>\n<var>x_{2N-1}</var> <var>y_{2N-1}</var>\n</pre>\n<ul>\n<li>In all test cases, the number of mackerels and sardines, <var>N</var>, is fixed at <var>5000</var>.</li>\n<li>For each <var>i = 0, 1, \\dots, N-1</var>, <var>(x_i, y_i)</var> represents the coordinates of the <var>i</var>-th mackerel.</li>\n<li>For each <var>i = 0, 1, \\dots, N-1</var>, <var>(x_{N+i}, y_{N+i})</var> represents the coordinates of the <var>i</var>-th sardine.</li>\n<li>Each coordinate <var>(x_i, y_i)</var> satisfies <var>0 \\leq x_i, y_i \\leq 10^5</var>, and all coordinates are distinct.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let the number of vertices in the polygon be <var>m</var> (<var>4 \\leq m \\leq 1000</var>), and let <var>(a_i, b_i)</var> denote the coordinates of the <var>i</var>-th vertex.\nThen, output to Standard Output in the following format:</p>\n<pre><var>m</var>\n<var>a_0</var> <var>b_0</var>\n<var>\\vdots</var>\n<var>a_{m-1}</var> <var>b_{m-1}</var>\n</pre>\n<p>The output vertices do not necessarily need to form the actual corners of the polygon.\nIn other words, three consecutive vertices <var>(a_i, b_i), (a_{i+1}, b_{i+1}), (a_{i+2}, b_{i+2})</var> may lie on a straight line.\nHowever, all vertices must have distinct coordinates.</p>\n<p>The vertices can be output in either clockwise or counterclockwise order.</p>\n<p><a href=\"https://img.atcoder.jp/ahc039/KNtTkgAy.html?lang=en&amp;seed=0&amp;output=sample\">Show example</a></p>\n<p>Your program may output multiple solutions.\nIf multiple solutions are output, only the last one is used for scoring.\nYou can compare multiple solutions using the web version of the visualizer.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><ul>\n<li><var>\\mathrm{rand}(L, U)</var>: Generates a random integer uniformly distributed between <var>L</var> and <var>U</var> (inclusive).</li>\n<li><var>\\mathrm{rand\\_double}(L, U)</var>: Generates a random real number uniformly distributed between <var>L</var> and <var>U</var>.</li>\n<li><var>\\mathrm{normal}(\\mu, \\sigma)</var>: Generates a random real number from a normal distribution with mean <var>\\mu</var> and standard deviation <var>\\sigma</var>.</li>\n</ul>\n<p>First, generate the coordinates of mackerels.\nThe number of clusters <var>n</var> is determined by generating <var>n = \\mathrm{rand}(10, 25)</var>.\nFor each cluster <var>i</var>, generate the following parameters:</p>\n<ul>\n<li>Weight <var>w_i = \\mathrm{rand\\_double}(0, 1)</var></li>\n<li>Center <var>(cx_i, cy_i) = (\\mathrm{rand}(20000, 80000), \\mathrm{rand}(20000, 80000))</var></li>\n<li>Standard deviation <var>\\sigma_i = \\mathrm{rand}(1000, 5000)</var></li>\n</ul>\n<p>Repeat the following process <var>N</var> times to generate the coordinates of <var>N</var> mackerels:</p>\n<ul>\n<li>Randomly select a cluster <var>i</var> with probability proportional to its weight <var>w_i</var>.</li>\n<li>Generate <var>x = \\mathrm{round}(\\mathrm{normal}(cx_i, \\sigma_i))</var> and <var>y = \\mathrm{round}(\\mathrm{normal}(cy_i, \\sigma_i))</var>.</li>\n<li>If the generated coordinates <var>(x, y)</var> satisfy <var>0 \\leq x, y \\leq 10^5</var> and are distinct from all previously generated coordinates, they are accepted as the coordinates of a mackerel. Otherwise, regenerate <var>(x, y)</var>.</li>\n</ul>\n<p>After generating the coordinates of mackerels, generate the coordinates of sardines in the same way.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools (Input generator and visualizer)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc039/KNtTkgAy.html?lang=en\">Web version</a>: This is more powerful than the local version providing animations.</li>\n<li><a href=\"https://img.atcoder.jp/ahc039/KNtTkgAy.zip\">Local version</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.<ul>\n<li><a href=\"https://img.atcoder.jp/ahc039/KNtTkgAy_windows.zip\">Pre-compiled binary for Windows</a>: If you are not familiar with the Rust language environment, please use this instead.</li>\n</ul>\n</li>\n</ul>\n<p>Please be aware that sharing visualization results or discussing solutions/ideas during the contest is prohibited.</p></section>\n</div>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ahc039/tasks/ahc039_a"}