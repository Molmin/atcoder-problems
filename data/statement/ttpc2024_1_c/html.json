{"html":{"en":"<span class=\"lang-en\">\n<p>Score: <var>100</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an undirected graph <var>G</var> with <var>2^N + 1</var> vertices and <var>2^{N+1} - 1</var> edges. The vertices are numbered <var>0, 1, \\dots, 2^N</var>, and the edges are numbered <var>1, 2, \\dots, 2^{N+1}-1</var>.</p>\n<p>Each edge in <var>G</var> belongs to one of <var>N+1</var> types, ranging from type <var>0</var> to type <var>N</var>.<br>\nFor type <var>i</var> <var>(0 \\le i \\le N)</var>, there are exactly <var>2^i</var> edges, which are numbered <var>2^i+0, 2^i+1, \\dots, 2^i+(2^i-1)</var>. The edge numbered <var>2^i + j</var> <var>(0 \\leq j \\leq 2^i - 1)</var> is an undirected edge of length <var>C_{2^i + j}</var> that connects vertex <var>j \\times 2^{N-i}</var> and vertex <var>(j+1) \\times 2^{N-i}</var>.</p>\n<p>For example, when <var>N = 3</var>, <var>G</var> looks like the following graph:</p>\n<p><img src=\"https://img.atcoder.jp/ttpc2024_1/3e862a8815475973ce0762481400dfd3.png\" class=\"img-responsive center-block\" style=\"max-width: 100%\"></p>\n<p>You are given <var>Q</var> queries to process. There are two types of queries:</p>\n<ul>\n<li><code>1 j x</code>: Change the length of edge <var>j</var> to <var>x</var>.</li>\n<li><code>2 s t</code>: Find the shortest path length from vertex <var>s</var> to vertex <var>t</var>.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>1 \\le N \\le 18</var></li>\n<li><var>1 \\le C_j \\le 10^7</var> <var>(1 \\le j \\le 2^{N+1}-1)</var></li>\n<li><var>1 \\le Q \\le 2 \\times 10^5</var></li>\n<li>In the query <code>1 j x</code>, <var>1 \\le j \\le 2^{N+1}-1</var> and <var>1 \\le x \\le 10^7</var>.</li>\n<li>In the query <code>2 s t</code>, <var>0 \\le s &lt; t \\le 2^N</var>.</li>\n<li>There is at least one <code>2 s t</code> query.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><p><var>30</var> points will be awarded for passing the testset satisfying the additional constraint: There is no <code>1 j x</code> query.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given in the following format. Note that vertex numbering starts from <var>0</var>, while edge numbering starts from <var>1</var>.</p>\n<pre><var>N</var>\n<var>C_1</var> <var>C_2</var> <var>\\cdots</var> <var>C_{2^{N+1}-1}</var>\n<var>Q</var>\n<var>\\text{query}_1</var>\n<var>\\text{query}_2</var>\n<var>\\vdots</var>\n<var>\\text{query}_Q</var>\n</pre>\n<p>Here, <var>\\text{query}_i</var> represents the <var>i</var>-th query. Each query is given in one of the following formats:</p>\n<pre>1 <var>j</var> <var>x</var>\n</pre>\n<pre>2 <var>s</var> <var>t</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>m</var> be the number of queries of type <code>2 s t</code>. Output <var>m</var> lines, where the <var>i</var>-th line contains the answer to the <var>i</var>-th <code>2 s t</code> query.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n7 1 14 3 9 4 8 2 6 5 5 13 8 2 3\n10\n2 0 1\n2 0 4\n2 4 6\n2 4 8\n2 3 5\n1 6 30\n2 3 5\n2 4 6\n1 1 10000000\n2 0 8\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n1\n4\n8\n17\n18\n13\n15\n</pre>\n<ul>\n<li>In the 1st query, using edge <var>8</var>, the path <var>0 \\to 1</var> results in a total distance of <var>2</var>.</li>\n<li>In the 2nd query, using edge <var>2</var>, the path <var>0 \\to 4</var> results in a total distance of <var>1</var>.</li>\n<li>In the 3rd query, using edge <var>6</var>, the path <var>4 \\to 6</var> results in a total distance of <var>4</var>.</li>\n<li>In the 4th query, using edges <var>2, 1</var>, the path <var>4 \\to 0 \\to 8</var> results in a total distance of <var>8</var>.</li>\n<li>In the 5th query, using edges <var>11, 6, 13</var>, the path <var>3 \\to 4 \\to 6 \\to 5</var> results in a total distance of <var>17</var>.</li>\n<li>In the 6th query, the length of edge <var>6</var> is updated from <var>4</var> to <var>30</var>.</li>\n<li>In the 7th query, using edges <var>11, 12</var>, the path <var>3 \\to 4 \\to 5</var> results in a total distance of <var>18</var>.</li>\n<li>In the 8th query, using edges <var>2, 1, 15, 14</var>, the path <var>4 \\to 0 \\to 8 \\to 7 \\to 6</var> results in a total distance of <var>13</var>.</li>\n<li>In the 9th query, the length of edge <var>1</var> is updated from <var>7</var> to <var>10000000</var>.</li>\n<li>In the 10th query, using edges <var>2, 3</var>, the path <var>0 \\to 4 \\to 8</var> results in a total distance of <var>15</var>.</li>\n</ul></section>\n</div>\n</span>","ja":"<span class=\"lang-ja\">\n<p>配点 : <var>100</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>2^N + 1</var> 頂点 <var>2^{N+1} - 1</var> 辺の無向グラフ <var>G</var> が与えられます。頂点には <var>0, 1, \\dots, 2^N</var> の番号が、辺には <var>1, 2, \\dots, 2^{N+1}-1</var> の番号が割り振られています。</p>\n<p><var>G</var> の辺にはタイプ <var>0</var> からタイプ <var>N</var> までの <var>N+1</var> 個の種類があります。<br>\nタイプ <var>i</var> <var>(0 \\le i \\le N)</var> の辺は全部で <var>2^i</var> 本あり、番号 <var>2^i+0, 2^i+1, \\dots, 2^i+(2^i-1)</var> が割り当てられています。番号 <var>2^i + j</var> <var>(0 \\le j \\le 2^i-1)</var> の辺は、頂点 <var>j \\times 2^{N-i}</var> と頂点 <var>(j+1) \\times 2^{N-i}</var> を結ぶ長さ <var>C_{2^i + j}</var> の無向辺です。</p>\n<p>例えば <var>N = 3</var> の場合、<var>G</var> は以下のようなグラフになります。</p>\n<p><img src=\"https://img.atcoder.jp/ttpc2024_1/3e862a8815475973ce0762481400dfd3.png\" class=\"img-responsive center-block\" style=\"max-width: 100%\"></p>\n<p><var>Q</var> 個のクエリが与えられるので、順に処理してください。与えられるクエリには以下の <var>2</var> 種類があります。</p>\n<ul>\n<li><code>1 j x</code>: 辺 <var>j</var> の長さを <var>x</var> に変更する。</li>\n<li><code>2 s t</code>: 頂点 <var>s</var> から頂点 <var>t</var> への最短経路の長さを求める。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li>入力はすべて整数</li>\n<li><var>1 \\le N \\le 18</var></li>\n<li><var>1 \\le C_j \\le 10^7</var> <var>(1 \\le j \\le 2^{N+1}-1)</var></li>\n<li><var>1 \\le Q \\le 2 \\times 10^5</var></li>\n<li><code>1 j x</code> のクエリにおいて、<var>1 \\le j \\le 2^{N+1}-1</var> かつ <var>1 \\le x \\le 10^7</var> である</li>\n<li><code>2 s t</code> のクエリにおいて、<var>0 \\le s &lt; t \\le 2^N</var> である</li>\n<li><code>2 s t</code> のクエリが <var>1</var> つ以上存在する</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>部分点</h3><p>以下の制約を満たすデータセットに正解した場合は <var>30</var> 点が与えられる。</p>\n<ul>\n<li><code>1 j x</code> のクエリが存在しない</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で与えられる。頂点番号は <var>0</var> から始まるのに対し、辺番号は <var>1</var> から始まることに注意せよ。</p>\n<pre><var>N</var>\n<var>C_1</var> <var>C_2</var> <var>\\cdots</var> <var>C_{2^{N+1}-1}</var>\n<var>Q</var>\n<var>\\text{query}_1</var>\n<var>\\text{query}_2</var>\n<var>\\vdots</var>\n<var>\\text{query}_Q</var>\n</pre>\n<p>ここで、<var>\\text{query}_i</var> は <var>i</var> 個目のクエリを表す。各クエリは以下のいずれかの形式で与えられる。</p>\n<pre>1 <var>j</var> <var>x</var>\n</pre>\n<pre>2 <var>s</var> <var>t</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p><code>2 s t</code> のクエリの個数を <var>m</var> として、<var>m</var> 行出力せよ。そのうち <var>i</var> 行目には、<var>i</var> 個目の <code>2 s t</code> のクエリの答えを出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>3\n7 1 14 3 9 4 8 2 6 5 5 13 8 2 3\n10\n2 0 1\n2 0 4\n2 4 6\n2 4 8\n2 3 5\n1 6 30\n2 3 5\n2 4 6\n1 1 10000000\n2 0 8\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>2\n1\n4\n8\n17\n18\n13\n15\n</pre>\n<ul>\n<li><var>1</var> 個目のクエリでは、辺 <var>8</var> を用いて <var>0 \\to 1</var> と移動することで最短距離 <var>2</var> を達成できます。</li>\n<li><var>2</var> 個目のクエリでは、辺 <var>2</var> を用いて <var>0 \\to 4</var> と移動することで最短距離 <var>1</var> を達成できます。</li>\n<li><var>3</var> 個目のクエリでは、辺 <var>6</var> を用いて <var>4 \\to 6</var> と移動することで最短距離 <var>4</var> を達成できます。</li>\n<li><var>4</var> 個目のクエリでは、辺 <var>2, 1</var> を用いて <var>4 \\to 0 \\to 8</var> と移動することで最短距離 <var>8</var> を達成できます。</li>\n<li><var>5</var> 個目のクエリでは、辺 <var>11, 6, 13</var> を用いて <var>3 \\to 4 \\to 6 \\to 5</var> と移動することで最短距離 <var>17</var> を達成できます。</li>\n<li><var>6</var> 個目のクエリでは、辺 <var>6</var> の長さを <var>4</var> から <var>30</var> に変更します。</li>\n<li><var>7</var> 個目のクエリでは、辺 <var>11, 12</var> を用いて <var>3 \\to 4 \\to 5</var> と移動することで最短距離 <var>18</var> を達成できます。</li>\n<li><var>8</var> 個目のクエリでは、辺 <var>2, 1, 15, 14</var> を用いて <var>4 \\to 0 \\to 8 \\to 7 \\to 6</var> と移動することで最短距離 <var>13</var> を達成できます。</li>\n<li><var>9</var> 個目のクエリでは、辺 <var>1</var> の長さを <var>7</var> から <var>10000000</var> に変更します。</li>\n<li><var>10</var> 個目のクエリでは、辺 <var>2, 3</var> を用いて <var>0 \\to 4 \\to 8</var> と移動することで最短距離 <var>15</var> を達成できます。</li>\n</ul></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ttpc2024_1/tasks/ttpc2024_1_c"}