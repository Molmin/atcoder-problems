{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>700</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>1, 2, \\cdots, N</var> の番号がついた <var>N</var> 個の町があります。</p>\n<p>現在、<var>2</var> つの相異なる町を双方向に結ぶ道をいくつか作ることが計画されています。現時点では、町を結ぶ道はありません。</p>\n<p>この計画において、各町は他の町を <var>1</var> つ選んで、道を <var>1</var> 本以上使ってその町に移動できるように要請します。</p>\n<p><var>N</var> 個の町の要請は配列 <var>P_1, P_2, \\cdots, P_N</var> で表され、町 <var>i</var> の要請は、<var>P_i = -1</var> のときまだ決定されていないこと、<var>1 \\leq P_i \\leq N</var> であるとき町 <var>P_i</var> を選んだことを表します。</p>\n<p><var>P_i = -1</var> である町の個数を <var>K</var> 個としたとき、全体では <var>(N-1)^K</var> 通りの要請方法が考えられます。それぞれの要請方法について、すべての町の要請を満たすために作る必要がある道の本数の最小値を求め、その総和を <var>10^9+7</var> で割った余りを出力してください。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>2 \\leq N \\leq 5000</var></li>\n<li><var>P_i = -1</var> または <var>1 \\leq P_i \\leq N</var></li>\n<li><var>P_i \\neq i</var></li>\n<li>入力は全て整数である</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var>\n<var>P_1</var> <var>P_2</var> <var>\\cdots</var> <var>P_N</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>それぞれの要請方法について、すべての町の要請を満たすために作る必要がある道の本数の最小値を求め、その総和を <var>10^9+7</var> で割った余りを出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>4\n2 1 -1 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>8\n</pre>\n\n<p>要請方法としては次の <var>3</var> 通りがあります。</p>\n<ul>\n<li><var>P_1 = 2, P_2 = 1, P_3 = 1, P_4 = 3</var> とする。このとき、例えば道 <var>(1,2),(1,3),(3,4)</var> の <var>3</var> つを作ることですべての町の要請を満たすことができ、これが最小です。</li>\n<li><var>P_1 = 2, P_2 = 1, P_3 = 2, P_4 = 3</var> とする。このとき、例えば道 <var>(1,2),(1,3),(3,4)</var> の <var>3</var> つを作ることですべての町の要請を満たすことができ、これが最小です。</li>\n<li><var>P_1 = 2, P_2 = 1, P_3 = 4, P_4 = 3</var> とする。このとき、例えば道 <var>(1,2),(3,4)</var> の <var>2</var> つを作ることですべての町の要請を満たすことができ、これが最小です。</li>\n</ul>\n<p>必ずしも町 <var>i</var> と町 <var>P_i</var> が直接繋がっている必要がないことに注意してください。</p>\n<p>よって、総和は <var>8</var> です。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>2\n2 1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>1\n</pre>\n\n<p>初めから要請が <var>1</var> 通りに決まっている場合もあります。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>10\n2 6 9 -1 6 9 -1 -1 -1 -1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>527841\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> towns numbered <var>1, 2, \\cdots, N</var>.</p>\n<p>Some roads are planned to be built so that each of them connects two distinct towns bidirectionally. Currently, there are no roads connecting towns.</p>\n<p>In the planning of construction, each town chooses one town different from itself and requests the following: roads are built so that the chosen town is reachable from itself using one or more roads.</p>\n<p>These requests from the towns are represented by an array <var>P_1, P_2, \\cdots, P_N</var>. If <var>P_i = -1</var>, it means that Town <var>i</var> has not chosen the request; if <var>1 \\leq P_i \\leq N</var>, it means that Town <var>i</var> has chosen Town <var>P_i</var>.</p>\n<p>Let <var>K</var> be the number of towns <var>i</var> such that <var>P_i = -1</var>. There are <var>(N-1)^K</var> ways in which the towns can make the requests. For each way to make requests, find the minimum number of roads needed to meet all the requests, and print the sum of those <var>(N-1)^K</var> numbers, modulo (<var>10^9+7</var>).</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 5000</var></li>\n<li><var>P_i = -1</var> or <var>1 \\leq P_i \\leq N</var>.</li>\n<li><var>P_i \\neq i</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>P_1</var> <var>P_2</var> <var>\\cdots</var> <var>P_N</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each way to make requests, find the minimum number of roads needed to meet all the requests, and print the sum of those <var>(N-1)^K</var> numbers, modulo (<var>10^9+7</var>).</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n2 1 -1 3\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n\n<p>There are three ways to make requests, as follows:</p>\n<ul>\n<li>Choose <var>P_1 = 2, P_2 = 1, P_3 = 1, P_4 = 3</var>. In this case, at least three roads - for example, <var>(1,2),(1,3),(3,4)</var> - are needed to meet the requests.</li>\n<li>Choose <var>P_1 = 2, P_2 = 1, P_3 = 2, P_4 = 3</var>. In this case, at least three roads - for example, <var>(1,2),(1,3),(3,4)</var> - are needed to meet the requests.</li>\n<li>Choose <var>P_1 = 2, P_2 = 1, P_3 = 4, P_4 = 3</var>. In this case, at least two roads - for example, <var>(1,2),(3,4)</var> - are needed to meet the requests.</li>\n</ul>\n<p>Note that it is not mandatory to connect Town <var>i</var> and Town <var>P_i</var> directly.</p>\n<p>The sum of the above numbers is <var>8</var>.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n2 1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n\n<p>There may be just one fixed way to make requests.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n2 6 9 -1 6 9 -1 -1 -1 -1\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>527841\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/nomura2020/tasks/nomura2020_d"}