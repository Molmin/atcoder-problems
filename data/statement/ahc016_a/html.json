{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>ストーリー</h3><p>天才発明家の高橋くんは、過去へと<a href=\"https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95_(%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0)\">グラフ</a>を送ることの出来るタイムマシン「グラフォリアン:Graphorean」(グラフ:Graph + デロリアン:DeLorean)を発明した。\nこのマシンを使って一攫千金を目論む高橋くんは、カジノのルーレットをプレイし、プレイ前の時刻へと当選番号の情報を送ろうと考えた。\n成功すれば見事番号を的中させた世界線へと移動し、大金持ちになることが出来る。</p>\n<p>ただし、マシンでは直接数値を送ることは出来ないため、当選番号の数値を一度グラフに変換(エンコード)して送信し、送られてきたグラフを数値に戻す(デコード)作業が必要である。\nマシンでグラフを送ると、頂点番号の情報は失われ、更にノイズが入ってしまうため、正しく数値が復元できるように、エンコード・デコードの仕方を工夫しなければならない。\nまた、<var>N</var> 頂点のグラフを受け取るためには、受け取る日時において予めマシンに整数 <var>N</var> を設定しておく必要があるため、送るグラフの頂点数はあらかじめ決めておく必要がある。</p>\n<p>マシンは一度使うと壊れてしまうので、失敗は許されない。\n事前にシミュレーションをすることで成功確率を見積もり、出来るだけ成功確率が高くなるようなエンコード・デコードの方式を準備することにした。\nまた、大きなグラフを送るには膨大なエネルギーが必要となるため、送るグラフのサイズは出来るだけ小さい方が望ましい。\n高橋くんの手伝いをして欲しい。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>整数 <var>M</var> とエラー率 <var>\\epsilon</var> が与えられるので、<var>4\\leq N\\leq 100</var> の整数 <var>N</var> を決めて、頂点数が全て <var>N</var> であるような <var>M</var> 個の無向グラフ <var>G_0,G_1,\\cdots,G_{M-1}</var> を作成し出力せよ。グラフは非連結でも構わない。\nその後、以下のクエリを <var>100</var> 回処理せよ。</p>\n<p><var>k</var> 回目のクエリでは、<var>N</var> 頂点の無向グラフ <var>H_k</var> が与えられる。\n<var>H_k</var> は、ある <var>G_{s_k}</var> から以下のようにして生成されたグラフである。</p>\n<ol>\n<li><var>H_k=G_{s_k}</var> と初期化する。</li>\n<li>各 <var>0\\leq i&lt;j\\leq N-1</var> の組 <var>(i,j)</var> について、確率 <var>\\epsilon</var> で<var>H_k</var> が辺 <var>(i,j)</var> を含むか否かを反転する。</li>\n<li><var>H_k</var> の頂点の順番をランダムに並び替える。</li>\n</ol>\n<p><var>H_k</var> の情報を受け取ったら、どのグラフ <var>G_{s_k}</var> から生成されたかを予測し、<var>s_k</var> の予測値 <var>t_k</var> を出力せよ。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p>予測が外れた回数を <var>E</var> としたとき、以下の点数が得られる。\n\\[\n    \\mathrm{round}\\left(10^9\\times \\frac{0.9^E}{N}\\right)\n\\]</p>\n<h4>テストケース数</h4>\n<ul>\n<li>暫定テスト: 50個</li>\n<li>システムテスト: 2000個、コンテスト終了後に <a href=\"https://img.atcoder.jp/ahc016/seeds.txt\">seeds.txt</a> (sha256=4093b6cb740beea16eb0ecf55120ca6ca6fbef18015ea4a863e64d0bea3de91d) を公開</li>\n<li>システムテストは各 <var>(M,\\epsilon)</var> の組を高々1つ含む</li>\n</ul>\n<p>各テストケース毎に、<var>\\mathrm{round}(10^9\\times \\frac{自身の得点}{全参加者中の最高点})</var> の<font color=\"red\"><strong>相対評価スコア</strong></font>が得られ、その和が提出の得点となる。</p>\n<p>最終順位はコンテスト終了後に実施されるより多くの入力に対するシステムテストにおける得点で決定される。\n暫定テスト、システムテストともに、不正な出力や制限時間超過をした場合、そのテストケースのみ0点となる。\nシステムテストは<font color=\"red\"><strong> <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"コンパイルエラー\">CE</span> 以外の結果を得た一番最後の提出</strong></font>に対してのみ行われるため、最終的に提出する解答を間違えないよう注意せよ。</p>\n<h4>相対評価システムについて</h4>\n<p>暫定テスト、システムテストともに、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"コンパイルエラー\">CE</span> 以外の結果を得た一番最後の提出のみが順位表に反映される。\n相対評価スコアの計算に用いられる各テストケース毎の全参加者中の最高点の算出においても、順位表に反映されている最終提出のみが用いられる。</p>\n<p>順位表に表示されているスコアは相対評価スコアであり、新規提出があるたびに、相対評価スコアが再計算される。\n一方、提出一覧から確認出来る各提出のスコアは各テストケース毎の得点をそのまま足し合わせた絶対評価スコアであり、相対評価スコアは表示されない。\n最新以外の提出の、現在の順位表における相対評価スコアを知るためには、再提出が必要である。\n<strong>(追記)</strong>不正な出力や制限時間超過をした場合、提出一覧から確認出来る絶対スコアは0となっているが、順位表には正解したテストケースに対する相対スコアの和が表示されている。</p>\n<h4>実行時間について</h4>\n<p>実行時間には多少のブレが生じます。\nまた、システムテストでは同時に大量の実行を行うため、暫定テストに比べて数%程度実行時間が伸びる現象が確認されています。\nそのため、実行時間制限ギリギリの提出がシステムテストで<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる可能性があります。\nプログラム内で時間を計測して処理を打ち切るか、実行時間に余裕を持たせるようお願いします。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入出力</h3><p>まずはじめに、標準入力から以下の形式で問題設定に関する情報が与えられる。</p>\n<pre><var>M</var> <var>\\epsilon</var>\n</pre>\n\n<ul>\n<li><var>M</var> は出力グラフ数を表す整数で、<var>10\\leq M\\leq 100</var> を満たす。</li>\n<li><var>\\epsilon</var> はエラー率を表す実数で、<var>0.01</var> の倍数であり、<var>0.00\\leq \\epsilon\\leq 0.4</var> を満たす。</li>\n</ul>\n<p>入力を読み込んだら、<var>M</var> 個のグラフ <var>G_0,G_1,\\cdots,G_{M-1}</var> を以下の形式で標準出力に出力せよ。</p>\n<pre><var>N</var>\n<var>g_0</var>\n<var>\\vdots</var>\n<var>g_{M-1}</var>\n</pre>\n\n<ul>\n<li><var>N</var> は各グラフの頂点数を表す整数で、<var>4\\leq N\\leq 100</var> を満たさなければならない。</li>\n<li>各 <var>g_k</var> は <var>k</var> 番目のグラフ <var>G_k</var> を表す <var>N(N-1)/2</var> 文字の<code>01</code>文字列であり、<var>0\\leq i&lt;j\\leq N-1</var> を満たす各 <var>(i,j)</var> について、<var>G_k</var> が辺 <var>(i,j)</var> を含むならば <code>1</code>、含まないならば <code>0</code> として <var>(i,j)</var> の辞書順に並べたものである。例えば、<var>N=4</var> のとき、文字列 <code>100101</code> は <var>4</var> 点が直線上につながったグラフを表す。</li>\n</ul>\n<p><font color=\"red\"><strong>出力の後には標準出力を flush しなければならない。</strong></font>\nそうしない場合、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる可能性がある。\n<var>M</var> 個のグラフの出力後、以下の処理を <var>100</var> 回繰り返す。</p>\n<p><var>k</var> 回目の処理ではまず、<var>N</var> 頂点のグラフ <var>H_k</var> を先と同じ形式により <var>N(N-1)/2</var> 文字の <code>01</code> 文字列として表したものが一つ、標準入力から一行で与えられる。\n入力を受け取ったら、<var>H_k</var> がどのグラフ <var>G_{s_k}</var> から生成されたものであるかを予測し、<var>s_k</var> の予測値 <var>t_k (0\\leq t_k\\leq M-1)</var> を標準出力に一行で出力せよ。\n出力の後には改行をし、更に標準出力を flush しなければならない。\n<font color=\"red\"><strong><var>k</var> 回目の処理を完了するまで、<var>k+1</var> 回目の処理に対する入力は与えられないので注意せよ。</strong></font></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>サンプルプログラム</h3><p>Pythonでの解答例を示す。\nこのプログラムでは、<var>N=20</var> と設定し、グラフ <var>G_k</var> は <var>k</var> 本の辺を含むようにしている。\n<var>H_k</var> を受け取ったら、辺の数 <var>m</var> を数え、<var>\\min(m, M-1)</var> を出力している。</p>\n<pre class=\"prettyprint linenums\">M, eps = input().split()\nM = int(M)\neps = float(eps)\nprint(20)\nfor k in range(M):\n    print(\"1\" * k + \"0\" * (190 - k))\n\nfor q in range(100):\n    H = input()\n    t = min(H.count('1'), M - 1)\n    print(t)\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><p><var>L</var> 以上 <var>U</var> 以下の整数値を一様ランダムに生成する関数を <var>\\mathrm{rand}(L,U)</var> で表す。\n<var>M</var> は <var>\\mathrm{rand}(10,100)</var> により生成される。\n<var>\\epsilon</var> は <var>0.01\\times \\mathrm{rand}(0,40)</var> により生成される。\n各 <var>s_k</var> は <var>\\mathrm{rand}(0,M-1)</var> により生成される。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール(入力ジェネレータ・ビジュアライザ・ローカルテスタ)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc016/d5f3c281.html?lang=ja\">Web版</a>: ビジュアライズ機能により各入出力グラフの形状を確認出来ます。</li>\n<li><a href=\"https://img.atcoder.jp/ahc016/d5f3c281.zip\">ローカル版</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。<ul>\n<li><a href=\"https://img.atcoder.jp/ahc016/d5f3c281_windows.zip\">Windows用のコンパイル済みバイナリ</a>: Rust言語の環境構築が面倒な方は代わりにこちらをご利用下さい。</li>\n</ul>\n</li>\n</ul>\n<p><font color=\"red\"><strong>コンテスト期間中に、ビジュアライズ結果の共有や、解法・考察に関する言及は禁止されています。ご注意下さい。</strong></font></p>\n<h4>ツールで用いられる入出力ファイルの仕様</h4>\n<p>ローカルテスタに与える入力ファイルは以下の形式を用いている。</p>\n<pre><var>M</var> <var>\\epsilon</var>\n<var>s_0</var>\n<var>\\vdots</var>\n<var>s_{99}</var>\n<var>\\mathrm{seed}</var>\n</pre>\n\n<p>最後の <var>\\mathrm{seed}</var> はノイズ生成に用いられる乱数シード値である。\n各グラフ <var>H_0,\\cdots,H_{99}</var> は出力されたグラフ <var>G_0,\\cdots,G_{M-1}</var> に依存するため、入力ファイルには乱数シード値のみが記載されている。</p>\n<p>ローカルテスタは解答プログラムの出力をそのまま出力ファイルに書き出す。\n解答プログラムは、<code>#</code> から始まるコメント行を出力に含めても良い。\nWeb版ビジュアライザを使用すると、コメント行を対応するクエリと合わせて表示出来るため、デバッグや考察等に役立てることが出来る。\nジャッジプログラムはコメント行を全て無視するため、コメント行を出力するプログラムをそのまま提出可能である。\nコメント行のうち、以下で始まるものはビジュアライザで特別扱いされる。</p>\n<ul>\n<li><code>#v</code>: 以下の形式で出力することで、<var>H_k</var> における頂点 <var>i</var> が <var>G_{t_k}</var> における頂点 <var>p_i</var> に対応すると予測したことをビジュアライザに伝えることが出来る。</li>\n</ul>\n<pre>#v <var>p_0</var> <var>\\cdots</var> <var>p_{N-1}</var>\n</pre>\n\n<ul>\n<li><code>#h</code>: 提供されているローカルテスタを用いない場合に <code>#h 100101 001101</code> のように出力することで、ビジュアライザが表示する <var>H_k</var> を置き換えることが出来る。左側が <var>G_{s_k}</var> にノイズを加えた後で、右側が更に頂点の順番をランダムに並び替えたものである。</li>\n</ul></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Story</h3><p>Takahashi, a genius inventor, invented the time machine called \"Graphorean\" (Graph + DeLorean) that can send a <a href=\"https://en.wikipedia.org/wiki/Graph_(abstract_data_type)\">graph</a> to the past.\nWith this machine, he plans to get rich by playing casino roulette and sending the winning number information to the time before he plays.\nIf he succeeds, he will move to the world line where he has successfully chosen the winning number and become very rich.</p>\n<p>Because the machine cannot send the winning number directly, he needs to first convert the number into a graph (encoding), then send it, and finally convert the graph back into a number (decoding).\nSending a graph by the machine loses the vertex number information and introduces noise, so he must develop encoding/decoding methods so that the number can be correctly restored.\nIn order to receive a graph with <var>N</var> vertices, he must set an integer <var>N</var> to the machine.\nTherefore, the number of vertices of the graph to be sent must be determined in advance.</p>\n<p>The time machine will be broken once he uses it, so failure will not be tolerated.\nTherefore, he decided to estimate the success probability by conducting simulations in advance and preparing an encoding/decoding method with as high a success probability as possible.\nFurthermore, because sending a large graph requires a huge amount of energy, it is desirable that the graph's size be as small as possible.\nPlease help him.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given an integer <var>M</var> and an error rate <var>\\epsilon</var>, determine an integer <var>N</var> satisfying <var>4\\leq N\\leq 100</var> and output <var>N</var>-vertex undirected graphs <var>G_0,G_1,\\cdots,G_{M-1}</var>.\nThe graphs may be disconnected.\nThen process the following query <var>100</var> times.</p>\n<p>In the <var>k</var>-th query, you are given an <var>N</var>-vertex undirected graph <var>H_k</var>.\n<var>H_k</var> is a graph generated from some <var>G_{s_k}</var> as follows.</p>\n<ol>\n<li>Initialize <var>H_k=G_{s_k}</var>.</li>\n<li>For each <var>(i,j)</var> with <var>0\\leq i&lt;j\\leq N-1</var>, flip whether or not <var>H_k</var> contains edge <var>(i,j)</var> with probability <var>\\epsilon</var>.</li>\n<li>Randomly shuffle the order of the vertices in <var>H_k</var>.</li>\n</ol>\n<p>After receiving <var>H_k</var>, predict from which graph <var>G_{s_k}</var> it was generated, and output the predicted value <var>t_k</var> of <var>s_k</var>.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>Let <var>E</var> be the number of failed predictions.\nThen the score for the test case is</p>\n<p>\\[\n    \\mathrm{round}\\left(10^9\\times \\frac{0.9^E}{N}\\right)\n\\]</p>\n<h4>Number of test cases</h4>\n<ul>\n<li>Provisional test: 50</li>\n<li>System test: 2000. We will publish <a href=\"https://img.atcoder.jp/ahc016/seeds.txt\">seeds.txt</a> (sha256=4093b6cb740beea16eb0ecf55120ca6ca6fbef18015ea4a863e64d0bea3de91d) after the contest is over.</li>\n<li>System test contains at most one test case for each pair of <var>(M,\\epsilon)</var>.</li>\n</ul>\n<p>For each test case, we compute the <font color=\"red\"><strong>relative score</strong></font> <var>\\mathrm{round}(10^9\\times \\frac{\\mathrm{YOUR}}{\\mathrm{MAX}})</var>, where YOUR is your score and MAX is the highest score among all competitors obtained on that test case.\nThe score of the submission is the sum of the relative scores.</p>\n<p>The final ranking will be determined by the system test with more inputs which will be run after the contest is over.\nIn both the provisional/system test, if your submission produces illegal output or exceeds the time limit for some test cases, only the score for those test cases will be zero.\nThe system test will be performed only for <font color=\"red\"><strong>the last submission which received a result other than <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Compilation Error\">CE</span> </strong></font>.\nBe careful not to make a mistake in the final submission.</p>\n<h4>About Relative Evaluation System</h4>\n<p>In both the provisional/system test, the standings will be calculated using only the last submission which received a result other than <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Compilation Error\">CE</span>.\nOnly the last submissions are used to calculate the highest score among all competitors for each test case in calculating the relative scores.</p>\n<p>The scores shown in the standings are relative, and whenever a new submission arrives, all relative scores are recalculated.\nOn the other hand, the score for each submission shown on the submissions page is an absolute score obtained by summing up the scores for each test case, and the relative scores are not shown.\nIn order to know the relative score of submission other than the latest one in the current standings, you need to resubmit it.\n<strong>(Update)</strong> If your submission produces illegal output or exceeds the time limit for some test cases, the absolute score shown in the submissions page becomes 0, but the standings show the sum of the relative scores for the test cases that were answered correctly.</p>\n<h4>About execution time</h4>\n<p>Execution time may vary slightly from run to run.\nIn addition, since system tests simultaneously perform a large number of executions, it has been observed that execution time increases by several percent compared to provisional tests.\nFor these reasons, submissions that are very close to the time limit may result in <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> in the system test.\nPlease measure the execution time in your program to terminate the process, or have enough margin in the execution time.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input and Output</h3><p>First, information about the problem setting is given from Standard Input in the following format.</p>\n<pre><var>M</var> <var>\\epsilon</var>\n</pre>\n\n<ul>\n<li><var>M</var> is an integer representing the number of graphs, satisfying <var>10\\leq M\\leq 100</var>.</li>\n<li><var>\\epsilon</var> is a real number representing the error rate, which is a multiple of <var>0.01</var> and satisfies <var>0.00\\leq \\epsilon\\leq 0.4</var>.</li>\n</ul>\n<p>After reading the input, output <var>M</var> graphs <var>G_0,G_1,\\cdots,G_{M-1}</var> to Standard Output in the following format.</p>\n<pre><var>N</var>\n<var>g_0</var>\n<var>\\vdots</var>\n<var>g_{M-1}</var>\n</pre>\n\n<ul>\n<li><var>N</var> is an integer representing the number of vertices in each graph, which must satisfy <var>4\\leq N\\leq 100</var>.</li>\n<li>Each <var>g_k</var> is a string of length <var>N(N-1)/2</var>, which represents the <var>k</var>-th graph <var>G_k</var> as follows. For each <var>(i,j)</var> satisfying <var>0\\leq i&lt;j\\leq N-1</var>, express the existence of edge <var>(i,j)</var> as <code>1</code> if <var>G_k</var> contains edge <var>(i,j)</var> and <code>0</code> if it does not, using one character, and then arrange them in lexicographic order of <var>(i,j)</var>. For example, when <var>N=4</var>, the string <code>100101</code> represents a graph with <var>4</var> vertices connected on a straight line.</li>\n</ul>\n<p><font color=\"red\"><strong>After output, you have to flush Standard Output.</strong></font>\nOtherwise, the submission might be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span>.\nAfter outputting <var>M</var> graphs, repeat the following process <var>100</var> times.</p>\n<p>In the <var>k</var>-th process, you are given an <var>N</var>-vertex graph <var>H_k</var> represented as a string of <var>N(N-1)/2</var> <code>01</code> characters in the same format as above, in a single line from Standard Input.\nAfter receiving <var>H_k</var>, predict from which graph <var>G_{s_k}</var> <var>H_k</var> is generated and output the prediction <var>t_k (0\\leq t_k\\leq M-1)</var> of <var>s_k</var> to Standard Output.\nThe output must be followed by a new line, and you have to flush Standard Output.\n<font color=\"red\"><strong>Note that <var>H_{k+1}</var> will not be given until you output the <var>t_k</var>.</strong></font></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Solution</h3><p>This is a sample solution in Python.\nIn this program, we set <var>N=20</var>, and each graph <var>G_k</var> contains <var>k</var> edges.\nFor each <var>H_k</var>, we count the number of edges <var>m</var> and output <var>\\min(m, M-1)</var>.</p>\n<pre class=\"prettyprint linenums\">M, eps = input().split()\nM = int(M)\neps = float(eps)\nprint(20)\nfor k in range(M):\n    print(\"1\" * k + \"0\" * (190 - k))\n\nfor q in range(100):\n    H = input()\n    t = min(H.count('1'), M - 1)\n    print(t)\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><p>Let <var>\\mathrm{rand}(L,U)</var> be a function that generates a uniform random integer between <var>L</var> and <var>U</var>, inclusive.\n<var>M</var> is generated by <var>\\mathrm{rand}(10,100)</var>.\n<var>\\epsilon</var> is generated by <var>0.01\\times \\mathrm{rand}(0,40)</var>.\nEach <var>s_k</var> is generated by <var>\\mathrm{rand}(0,M-1)</var>.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools (Input generator and visualizer)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc016/d5f3c281.html?lang=en\">Web version</a>: You can see the visualization of each input/output graph.</li>\n<li><a href=\"https://img.atcoder.jp/ahc016/d5f3c281.zip\">Local version</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.<ul>\n<li><a href=\"https://img.atcoder.jp/ahc016/d5f3c281_windows.zip\">Pre-compiled binary for Windows</a>: If you are not familiar with the Rust language environment, please use this instead.</li>\n</ul>\n</li>\n</ul>\n<p><font color=\"red\"><strong>Please be aware that sharing visualization results or discussing solutions/ideas during the contest is prohibited.</strong></font></p>\n<h4>Specification of input/output files used by the tools</h4>\n<p>Input files given to the local tester have the following format.</p>\n<pre><var>M</var> <var>\\epsilon</var>\n<var>s_0</var>\n<var>\\vdots</var>\n<var>s_{99}</var>\n<var>\\mathrm{seed}</var>\n</pre>\n\n<p>The last <var>\\mathrm{seed}</var> is a random seed value used for noise generation.\nSince each graph <var>H_0,\\cdots,H_{99}</var> depends on output graphs <var>G_0,\\cdots,G_{M-1}</var>, the input file contains only the random seed value.</p>\n<p>The local tester writes outputs from your program directly to the output file.\nYour program may output comment lines starting with <code>#</code>.\nThe web version of the visualizer displays the comment lines with the corresponding query, which may be useful for debugging and analysis.\nSince the judge program ignores all comment lines, you can submit a program that outputs comment lines as is.</p>\n<p>Comment lines that begin with the following have special meaning in the visualizer.</p>\n<ul>\n<li><code>#v</code>: You can tell the visualizer that you have predicted that vertex <var>i</var> in <var>H_k</var> corresponds to vertex <var>p_i</var> in <var>G_{t_k}</var> by outputting it in the following format.</li>\n</ul>\n<pre>#v <var>p_0</var> <var>\\cdots</var> <var>p_{N-1}</var>\n</pre>\n\n<ul>\n<li><code>#h</code>: If you do not use the provided local tester, you can replace the <var>H_k</var> displayed by the visualizer by outputting in the form <code>#h 100101 001101</code>. The left is a graph after adding noise to <var>G_{s_k}</var>, and the right is a graph after shuffling the vertex ordering.</li>\n</ul></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ahc016/tasks/ahc016_a"}