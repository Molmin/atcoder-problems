{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>425</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>最初 <var>N</var> 頂点 <var>0</var> 辺の無向グラフがあり、各頂点には <var>1</var> から <var>N</var> まで番号がついています。<br>\n<var>Q</var> 個のクエリが与えられるので、順に処理し、各クエリの後における「他のどの頂点とも辺で結ばれていない頂点」の数を出力してください。</p>\n<p><var>i</var> 個目のクエリは <var>\\mathrm{query}_i</var> であり、各クエリは次の <var>2</var> 種類いずれかです。</p>\n<ul>\n<li>\n<p><code>1 u v</code>: 頂点 <var>u</var> と頂点 <var>v</var> を辺で結ぶ。このクエリが与えられる直前の時点で、頂点 <var>u</var> と頂点 <var>v</var> は辺で結ばれていない事が保証される。</p>\n</li>\n<li>\n<p><code>2 v</code> : 頂点 <var>v</var> と他の頂点を結ぶ辺をすべて削除する。（頂点 <var>v</var> 自体は削除しない。）</p>\n</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>2 \\leq N\\leq 3\\times 10^5</var></li>\n<li><var>1 \\leq Q\\leq 3\\times 10^5</var></li>\n<li><var>1</var> 番目の種類のクエリにおいて、<var>1\\leq u,v\\leq N</var>, <var>u\\neq v</var></li>\n<li><var>2</var> 番目の種類のクエリにおいて、<var>1\\leq v\\leq N</var></li>\n<li><var>1</var> 番目の種類のクエリの直前の時点で、そのクエリの <var>u,v</var> について頂点 <var>u</var> と頂点 <var>v</var> は辺で結ばれていない。</li>\n<li>入力はすべて整数</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var> <var>Q</var>\n<var>\\mathrm{query}_1</var>\n<var>\\mathrm{query}_2</var>\n<var>\\vdots</var>\n<var>\\mathrm{query}_Q</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p><var>Q</var> 行出力せよ。<br>\n<var>i</var> 行目 <var>(1\\leq i\\leq Q)</var> には、<var>i</var> 個目のクエリを処理した後の「他のどの頂点とも辺で結ばれていない頂点」の数を出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>3 7\n1 1 2\n1 1 3\n1 2 3\n2 1\n1 1 2\n2 2\n1 1 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>1\n0\n0\n1\n0\n3\n1\n</pre>\n<p><var>1</var> 個目のクエリの後で、頂点 <var>1</var> と頂点 <var>2</var> は互いに結ばれており、頂点 <var>3</var> のみが他のどの頂点とも辺で結ばれていません。<br>\nよって、<var>1</var> 行目には <var>1</var> を出力します。</p>\n<p>また、<var>3</var> 個目のクエリの後でどの相異なる <var>2</var> 頂点の間も辺で結ばれていますが、<var>4</var> 個目のクエリによって、\n頂点 <var>1</var> と他の頂点を結ぶ辺、すなわち 頂点 <var>1</var> と頂点 <var>2</var> を結ぶ辺および頂点 <var>1</var> と頂点 <var>3</var> を結ぶ辺が削除されます。\nこの結果として、頂点 <var>2</var> と頂点 <var>3</var> は互いに結ばれているが、頂点 <var>1</var> は他のどの頂点とも辺で結ばれていない状態となります。<br>\nよって、<var>3</var> 行目には <var>0</var> を、<var>4</var> 行目には <var>1</var> を出力します。  </p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>2 1\n2 1\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>2\n</pre>\n<p><var>2</var> 番目の種類のクエリを行う直前の時点で、すでにその頂点と他の頂点を結ぶ辺が <var>1</var> 本も存在しないこともあります。</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>425</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an undirected graph with <var>N</var> vertices numbered <var>1</var> through <var>N</var>, and initially with <var>0</var> edges.<br>\nGiven <var>Q</var> queries, process them in order.  After processing each query,\nprint the number of vertices that are not connected to any other vertices by an edge.</p>\n<p>The <var>i</var>-th query, <var>\\mathrm{query}_i</var>, is of one of the following two kinds.</p>\n<ul>\n<li>\n<p><code>1 u v</code>: connect vertex <var>u</var> and vertex <var>v</var> with an edge.  It is guaranteed that, when this query is given, vertex <var>u</var> and vertex <var>v</var> are not connected by an edge.</p>\n</li>\n<li>\n<p><code>2 v</code>: remove all edges that connect vertex <var>v</var> and the other vertices.  (Vertex <var>v</var> itself is not removed.)</p>\n</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N\\leq 3\\times 10^5</var></li>\n<li><var>1 \\leq Q\\leq 3\\times 10^5</var></li>\n<li>For each query of the first kind, <var>1\\leq u,v\\leq N</var> and <var>u\\neq v</var>.</li>\n<li>For each query of the second kind, <var>1\\leq v\\leq N</var>.</li>\n<li>Right before a query of the first kind is given, there is no edge between vertices <var>u</var> and <var>v</var>.</li>\n<li>All values in the input are integers.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>\\mathrm{query}_1</var>\n<var>\\mathrm{query}_2</var>\n<var>\\vdots</var>\n<var>\\mathrm{query}_Q</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines.<br>\nThe <var>i</var>-th line <var>(1\\leq i\\leq Q)</var> should contain the number of vertices that are not connected to any other vertices by an edge.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 7\n1 1 2\n1 1 3\n1 2 3\n2 1\n1 1 2\n2 2\n1 1 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n0\n0\n1\n0\n3\n1\n</pre>\n<p>After the first query, vertex <var>1</var> and vertex <var>2</var> are connected to each other by an edge, but vertex <var>3</var> is not connected to any other vertices.<br>\nThus, <var>1</var> should be printed in the first line.</p>\n<p>After the third query, all pairs of different vertices are connected by an edge.<br>\nHowever, the fourth query asks to remove all edges that connect vertex <var>1</var> and the other vertices, specifically to remove the edge between vertex <var>1</var> and vertex <var>2</var>, and another between vertex <var>1</var> and vertex <var>3</var>.\nAs a result, vertex <var>2</var> and vertex <var>3</var> are connected to each other, while vertex <var>1</var> is not connected to any other vertices by an edge.<br>\nThus, <var>0</var> and <var>1</var> should be printed in the third and fourth lines, respectively.  </p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 1\n2 1\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<p>When the query of the second kind is given, there may be no edge that connects that vertex and the other vertices.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/abc302/tasks/abc302_e"}