{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>ストーリー</h3><p>動物が大好きな高橋社長はAtCoder社のオフィスでペットを何匹も放し飼いにしている。\nAtCoder社の社員たちはペットに邪魔されて仕事に集中できないことに困っており、オフィスに仕切りを設置してペットの入ってこないスペースを確保することにした。\n出来るだけ広いスペースを確保してほしい。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>30 \\times 30</var> マスからなる部屋の中に、<var>N</var> 匹のペットと <var>M</var> 人の人間が居る。\n各マスは初期状態で全て通行可能であり、<var>30 \\times 30</var> マスの外部は全て通行不能である。\n上から <var>x</var> 行目(<var>1\\leq x\\leq 30</var>)、左から <var>y</var> 列目(<var>1\\leq y\\leq 30</var>)のマスの座標を <var>(x, y)</var> とする。\n以下の処理を <var>300</var> ターン繰り返す。</p>\n<p>まず各人の行動をそれぞれ以下の3種類から選択し、同時に動く。</p>\n<ul>\n<li>何もせずにその場にとどまる。</li>\n<li>現在位置に隣接するマスを選んで通行不能にする。このターンの開始時点でペットもしくは人が居るマスを選ぶことは出来ない。<b>隣接するマスにペットが居るマスを選ぶことも出来ない。</b>既に通行不能なマスを選んだ場合は何もしない。</li>\n<li>現在位置に隣接する通行可能マスに移動する。このターンの行動で他の人によって通行不能にされるマスに移動することは出来ない。</li>\n</ul>\n<p>そのターンの人間の行動が完了後、各ペットが独立に移動する。\nペットの移動規則はペットの種類ごとに異なり、1ターンの間に複数マスの移動をする場合もある。\n詳細については後ほど述べる。</p>\n<p>既に人やペットが居るマスも通行可能で、同じマスに何体でも重なることが出来る。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p><var>300</var> ターン終了時点で、各 <var>i=1,\\cdots,M</var> について、人 <var>i</var> の最終位置から通行可能マスのみを通って到達可能なマスの集合を <var>R_i</var>、\n最終位置が <var>R_i</var> に含まれるペットの総数を <var>n_i</var> とする。\nこのとき、人 <var>i</var> は <var>s_i=\\frac{|R_i|}{900}\\times 2^{-n_i}</var> の満足度を得る。\nテストケースに対して得られる得点は <var>\\mathrm{round}\\left(10^8\\times\\frac{1}{M}\\sum_{i=1}^M s_i\\right)</var> である。</p>\n<h4>テストケース数</h4>\n<ul>\n<li>暫定テスト 100個</li>\n<li>システムテスト 2000個、 コンテスト終了後に<a href=\"https://img.atcoder.jp/ahc008/seeds.txt\">seeds.txt</a> (md5=27bf0702bbe0265900374c3b6b9846b4, sha256=33973e4ded08e3a607fc2e841e14751ff110ae10154b286e7fd5f766ff86d706) を公開</li>\n</ul>\n<p>各テストケースの得点の合計が提出の得点となる。\n暫定テストでは、一つ以上のテストケースで不正な出力や制限時間超過をした場合、提出全体の判定が<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span>や<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる。\nシステムテストでは、不正な出力や制限時間超過をした場合、そのテストケースのみ0点となる。\n提出プログラムが異常終了した場合、 <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時エラー\">RE</span> ではなく <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span> と判定される可能性があるので注意せよ。</p>\n<h4>実行時間について</h4>\n<p>実行時間には多少のブレが生じます。\nまた、システムテストでは同時に大量の実行を行うため、暫定テストに比べて数%程度実行時間が伸びる現象が確認されています。\nそのため、実行時間制限ギリギリの提出がシステムテストで<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる可能性があります。\nプログラム内で時間を計測して処理を打ち切るか、実行時間に余裕を持たせるようお願いします。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入出力</h3><p>まずはじめに、各ペットの初期位置と種類、各人間の初期位置が以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var>\n<var>px_1</var> <var>py_1</var> <var>pt_1</var>\n<var>\\vdots</var>\n<var>px_N</var> <var>py_N</var> <var>pt_N</var>\n<var>M</var>\n<var>hx_1</var> <var>hy_1</var>\n<var>\\vdots</var>\n<var>hx_M</var> <var>hy_M</var>\n</pre>\n\n<p><var>N</var> はペットの数を表す <var>10</var> 以上 <var>20</var> 以下の整数値である。\n<var>(px_i,py_i)</var> は <var>i</var> 番目のペットの初期位置の座標を表し、<var>pt_i</var> は <var>i</var> 番目のペットの種類を表す <var>1</var> 以上 <var>5</var> 以下の整数値である。\n<var>M</var> は人間の数を表す <var>5</var> 以上 <var>10</var> 以下の整数値である。\n<var>(hx_i,hy_i)</var> は <var>i</var> 番目の人間の初期位置の座標を表す。\n全てのペット・人間の初期位置は異なることが保証されている。</p>\n<p>上記の情報を読み込んだら、以下の処理を <var>300</var> 回繰り返す。</p>\n<p>まず、各人間の行動を以下のように1文字で表し、<var>M</var> 人の行動を <var>i</var> 文字目が <var>i</var> 番目の人間の行動を表す長さ <var>M</var> の文字列として標準出力に一行で出力せよ。\n<font color=\"red\"><strong>出力のあとは標準出力を flush しなければならない。</strong></font>そうしない場合、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"実行時間制限超過\">TLE</span>となる可能性がある。</p>\n<ul>\n<li><code>.</code>: 何もしない</li>\n<li><code>u</code>, <code>d</code>, <code>l</code>, <code>r</code>: 現在位置を<var>(x,y)</var>としたとき、それぞれ <var>(x-1,y)</var>、<var>(x+1,y)</var>、<var>(x,y-1)</var>、<var>(x,y+1)</var> のマスを通行不能にする。</li>\n<li><code>U</code>, <code>D</code>, <code>L</code>, <code>R</code>: 現在位置を<var>(x,y)</var>としたとき、それぞれ <var>(x-1,y)</var>、<var>(x+1,y)</var>、<var>(x,y-1)</var>、<var>(x,y+1)</var> のマスに移動する。</li>\n</ul>\n<p>出力後、<var>N</var>個の文字列がスペース区切りで標準入力に一行で与えられる。\n<var>i</var> 番目の文字列は <var>i</var> 番目のペットのそのターンの移動を表し、そのターンに移動しない場合は <code>.</code>、移動する場合は上下左右への1マスの移動をそれぞれ <code>U</code>, <code>D</code>, <code>L</code>, <code>R</code> で表して繋げたものである。</p>\n<p><a href=\"https://img.atcoder.jp/ahc008/f828b9475ffb41d54f05619db6ccbd4f.html?lang=ja&amp;show=example\">例を見る</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ペットの移動規則</h3><p>基本行動を次のように定義する。\n隣接する通行可能マスの中から一様ランダムに選んだマスへ移動する。(通行不能に出来るマスの条件から、そのようなマスは常に存在する)</p>\n<p>各ペット <var>i</var> は、種類を表す <var>1</var> 以上 <var>5</var> 以下の整数値 <var>pt_i</var> に応じて、以下のように行動する。</p>\n<ol>\n<li><img src=\"https://img.atcoder.jp/ahc008/cow.png\" width=\"30\" height=\"30\" style=\"background-color:silver;image-rendering:pixelated\"> 牛: 基本行動を1回行う。</li>\n<li><img src=\"https://img.atcoder.jp/ahc008/pig.png\" width=\"30\" height=\"30\" style=\"background-color:silver;image-rendering:pixelated\"> 豚: 基本行動を2回行う。</li>\n<li><img src=\"https://img.atcoder.jp/ahc008/rabbit.png\" width=\"30\" height=\"30\" style=\"background-color:silver;image-rendering:pixelated\"> 兎: 基本行動を3回行う。</li>\n<li><img src=\"https://img.atcoder.jp/ahc008/dog.png\" width=\"30\" height=\"30\" style=\"background-color:silver;image-rendering:pixelated\"> 犬: 以下のようにして目的の人に向かって進む。1ターン目は目的無しの状態から開始。現在の目的が無い、現在位置に目的の人が居る、もしくは目的の人への移動経路が存在しない場合は、現在位置から到達可能な人(現在位置に居る人は除く)の中から一様ランダムに一人選ぶ。そのような人が存在しない場合は目的なしの状態になり、基本行動を1回行う。目的の人が居る場合は、目的の人の現在位置への最短距離が短くなる方向(複数ある場合はその中から一様ランダムに選択)へ1マス移動してから基本行動を1回行う。1回目もしくは2回目の移動後に目的地に到達した場合は目的無しの状態に戻す。</li>\n<li><img src=\"https://img.atcoder.jp/ahc008/cat.png\" width=\"30\" height=\"30\" style=\"background-color:silver;image-rendering:pixelated\"> 猫: 以下のようにして目的地に向かって進む。1ターン目は目的無しの状態から開始。現在の目的が無い、もしくは目的地への移動経路が存在しない場合は、現在位置から到達可能なマス(現在位置を除く)の中から一様ランダムに目的地を一つ選ぶ。目的地への最短距離が短くなる方向(複数ある場合はその中から一様ランダムに選択)へ1マス移動してから基本行動を1回行う。1回目もしくは2回目の移動後に目的地に到達した場合は目的無しの状態に戻す。</li>\n</ol>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><p><var>L</var> 以上 <var>U</var> 以下の整数値を一様ランダムに生成する関数を <var>\\mathrm{rand}(L,U)</var> で表す。</p>\n<p>ペットの数は <var>N=\\mathrm{rand}(10, 20)</var> により生成する。\n各ペットの初期位置は、まだ選ばれていない座標の中から一様ランダムに選択する。\n各ペットの種類は <var>pt_i=\\mathrm{rand}(1, 5)</var> により生成する。</p>\n<p>人間の数は <var>M=\\mathrm{rand}(5, 10)</var> により生成する。\n各人間の初期位置は、まだ選ばれていない座標の中から一様ランダムに選択する。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc008/tools_v3.zip\">ローカルテスタ</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。<ul>\n<li>Rust言語の環境構築が面倒な方向けに、Windows用のコンパイル済みバイナリを用意しました。<a href=\"https://img.atcoder.jp/ahc008/tools_x86_64-pc-windows-gnu_v3.zip\">tools_x86_64-pc-windows-gnu.zip</a></li>\n<li><font color=\"red\">一番最初のものは猫の移動にバグがあったため、コンテスト開始130分時点で修正が入っています。再ダウンロードして下さい。</font></li>\n<li>READMEの実行例を充実させました。使い方が分からない方は参考にして下さい。また、ルールにあるとおり、提供されたツール類の動かし方に関する情報は自由に共有して構いません。</li>\n</ul>\n</li>\n<li><a href=\"https://img.atcoder.jp/ahc008/f828b9475ffb41d54f05619db6ccbd4f.html?lang=ja\">Web版ビジュアライザ</a>: ローカルテスタが生成する出力ファイルの中身をOutput欄に貼り付けることで、実行結果のアニメーション表示が可能です。</li>\n</ul>\n<p><font color=\"red\">コンテスト期間中に、seed=0 に対するビジュアライザの出力画像(pngもしくはgif)のみ twitter で共有が可能です。</font>必ず指定されたハッシュタグを用い、公開アカウントを使用して下さい。(追記)共有出来るのはseed=0に対するビジュアライズ結果と点数のみで、他のシードでの点数や解法や考察に関する言及は禁止です。<a href=\"https://twitter.com/search?q=%23AHC008%20%23visualizer&amp;src=typed_query&amp;f=live\">共有された画像の一覧</a></p>\n<h4>ツールで用いられる入出力ファイルの仕様</h4>\n<p>ローカルテスタに与える入力ファイルとして、事前情報である各ペットの初期位置と種類、各人間の初期位置の末尾に、ペットの移動を生成するための乱数シード値を追記したものを用いている。\nペットの移動は人間の行動に依存するため、入力ファイルには乱数シード値のみが記載され、具体的な移動は含まれない。\nローカルテスタは解答プログラムの出力をそのまま出力ファイルに書き出す。\n解答プログラムは、<code>#</code> から始まるコメント行を出力に含めても良い。\nWeb版ビジュアライザを使用すると、コメント行が出力されたタイミングで表示されるため、デバッグや考察等に役立てることが出来る。\nジャッジプログラムはコメント行を全て無視するため、コメント行を出力するプログラムをそのまま提出可能である。</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Story</h3><p>AtCoder's CEO, Takahashi, loves animals and has a number of pets running free in the AtCoder office.\nAtCoder's employees have trouble with the pets interrupting their work, so they have decided to place partitions in the office to create a space where pets cannot come in.\nPlease create as large a space as possible.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> pets and <var>M</var> people in a room with a floor of <var>30 \\times 30</var> squares.\nAll squares are initially passable, and outside of the <var>30 \\times 30</var> squares are impassable.\nLet <var>(x, y)</var> be the coordinates of the square in row <var>x</var> from the top (<var>1\\leq x\\leq 30</var>) and column <var>y</var> from the left (<var>1\\leq y\\leq 30</var>).\nRepeat the following process for <var>300</var> turns.</p>\n<p>First, you choose each person's action from the following three types, and perform each action simultaneously.</p>\n<ul>\n<li>Do nothing and stay in the current position.</li>\n<li>Choose a square adjacent to the current position and make it impassable. You cannot choose a square that contains pets or humans at the start of this turn. <b>You cannot choose a square whose adjacent square contains a pet, either.</b> If you choose a square that is already impassable, nothing happens.</li>\n<li>Move to an adjacent passable square. It is not possible to move to a square that becomes impassable by another person's action in this turn.</li>\n</ul>\n<p>After all the people have completed their actions for that turn, each pet moves independently.\nRules for pet movement depend on the type of pet, and some pets may move multiple squares in a single turn.\nDetails are described later.</p>\n<p>Squares containing humans or pets are also passable, and each square can contain any number of humans and pets.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>At the end of <var>300</var> turn, for each <var>i=1,\\cdots,M</var>, let <var>R_i</var> be the set of squares reachable from the final position of person <var>i</var> through only passable squares, and <var>n_i</var> be the number of pets whose final position is in <var>R_i</var>.\nThen, person <var>i</var> obtains satisfaction of <var>s_i=\\frac{|R_i|}{900}\\times 2^{-n_i}</var>.\nThe score for the test case is <var>\\mathrm{round}\\left(10^8\\times\\frac{1}{M}\\sum_{i=1}^M s_i\\right)</var>.</p>\n<h4>Number of test cases</h4>\n<ul>\n<li>Provisional test: 100</li>\n<li>System test: 2000. We will publish <a href=\"https://img.atcoder.jp/ahc008/seeds.txt\">seeds.txt</a> (md5=27bf0702bbe0265900374c3b6b9846b4, sha256=33973e4ded08e3a607fc2e841e14751ff110ae10154b286e7fd5f766ff86d706) after the contest is over.</li>\n</ul>\n<p>The score of a submission is the total scores for each test case.\nIn the provisional test, if your submission produces illegal output or exceeds the time limit for some test cases, the submission itself will be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Wrong Answer\">WA</span> or <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> , and the score of the submission will be zero.\nIn the system test, if your submission produces illegal output or exceeds the time limit for some test cases, only the score for those test cases will be zero.\nNote that if your program terminates abnormally, it may be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Wrong Answer\">WA</span> instead of <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Runtime Error\">RE</span>.</p>\n<h4>About execution time</h4>\n<p>Execution time may vary slightly from run to run.\nIn addition, since system tests simultaneously perform a large number of executions, it has been observed that execution time increases by several percent compared to provisional tests.\nFor these reasons, submissions that are very close to the time limit may result in <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Time Limit Exceeded\">TLE</span> in the system test.\nPlease measure the execution time in your program to terminate the process, or have enough margin in the execution time.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input and Output</h3><p>First, the initial position and type of each pet, and the initial position of each person are given from Standard Input in the following format</p>\n<pre><var>N</var>\n<var>px_1</var> <var>py_1</var> <var>pt_1</var>\n<var>\\vdots</var>\n<var>px_N</var> <var>py_N</var> <var>pt_N</var>\n<var>M</var>\n<var>hx_1</var> <var>hy_1</var>\n<var>\\vdots</var>\n<var>hx_M</var> <var>hy_M</var>\n</pre>\n\n<p><var>N</var> is an integer between <var>10</var> and <var>20</var> representing the number of pets.\n<var>(px_i,py_i)</var> represents the coordinates of the initial position of the <var>i</var>-th pet, and <var>pt_i</var> is an integer between <var>1</var> and <var>5</var> representing the type of the <var>i</var>-th pet.\n<var>M</var> is an integer between <var>5</var> and <var>10</var> representing the number of humans.\n<var>(hx_i,hy_i)</var> represents the coordinates of the initial position of the <var>i</var>-th human.\nThe initial positions of all pets and humans are guaranteed to be distinct.</p>\n<p>After reading the above information, repeat the following process <var>300</var> turns.</p>\n<p>First, output a string of length <var>M</var> where the <var>i</var>-th character represents the action of the <var>i</var>th person as follows on a single line to Standard Output.\n<font color=\"red\"><strong>After the output, you have to flush Standard Output.</strong></font> Otherwise, the submission might be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" tit=\"\" le=\"Time Limit Exceeded\">TLE</span> .</p>\n<ul>\n<li><code>.</code>: Do nothing and stay in the current position.</li>\n<li><code>u</code>, <code>d</code>, <code>l</code>, <code>r</code>: Let <var>(x,y)</var> be the current position. Make the square <var>(x-1,y)</var>, <var>(x+1,y)</var>, <var>(x,y-1)</var>, or <var>(x,y+1)</var> impassable, respectively.</li>\n<li><code>U</code>, <code>D</code>, <code>L</code>, <code>R</code>: Let <var>(x,y)</var> be the current position. Move to the the square <var>(x-1,y)</var>, <var>(x+1,y)</var>, <var>(x,y-1)</var>, or <var>(x,y+1)</var>, respectively.</li>\n</ul>\n<p>After the output, <var>N</var> strings are given to Standard Input in a single line, separated by spaces.\nThe <var>i</var>-th string represents movement of the <var>i</var>-th pet in that turn.\nIf the pet does not move, the string is <code>.</code>.\nIf it does move, the string is a sequence of characters <code>U</code>, <code>D</code>, <code>L</code>, and <code>R</code> representing the movement of one square up, down, left, and right, respectively.</p>\n<p><a href=\"https://img.atcoder.jp/ahc008/f828b9475ffb41d54f05619db6ccbd4f.html?lang=en&amp;show=example\">Show example</a></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Pets Movement Rules</h3><p>We define a basic move as follows: move to a square chosen at random among the adjacent passable squares. From the condition of the squares that can be made impassable, such squares always exist.</p>\n<p>Each pet <var>i</var> performs the following moves depending on <var>pt_i</var>, an integer value between <var>1</var> and <var>5</var> representing its type.</p>\n<ol>\n<li><img src=\"https://img.atcoder.jp/ahc008/cow.png\" width=\"30\" height=\"30\" style=\"background-color:silver;image-rendering:pixelated\"> Cow: Perform one basic move.</li>\n<li><img src=\"https://img.atcoder.jp/ahc008/pig.png\" width=\"30\" height=\"30\" style=\"background-color:silver;image-rendering:pixelated\"> Pig: Perform two basic moves.</li>\n<li><img src=\"https://img.atcoder.jp/ahc008/rabbit.png\" width=\"30\" height=\"30\" style=\"background-color:silver;image-rendering:pixelated\"> Rabbit: Perform three basic moves.</li>\n<li><img src=\"https://img.atcoder.jp/ahc008/dog.png\" width=\"30\" height=\"30\" style=\"background-color:silver;image-rendering:pixelated\"> Dog: Move toward a target person as follows. The first turn starts with no target. If it has no target, the target person is in the current position, or there exists no path to the target person, then it selects one person uniformly at random among those reachable from the current position, excluding those in the current position. If there is no such person, reset to no target and perform one basic move. Otherwise, move to an adjacent passable square that shortens the shortest distance to the target person (if there are multiple such squares, choose one of them uniformly at random), and then perform one basic move. If it reaches the destination after the first or the second move, reset to no target.</li>\n<li><img src=\"https://img.atcoder.jp/ahc008/cat.png\" width=\"30\" height=\"30\" style=\"background-color:silver;image-rendering:pixelated\"> Cat: Move toward a target square as follows. The first turn starts with no target. If it has no target or there exists no path to the target square, then it selects one square uniformly at random among those reachable from the current position, excluding the current position. If there exists no such square, do nothing. Otherwise, move to an adjacent passable square that shortens the shortest distance to the target square (if there are multiple such squares, choose one of them uniformly at random), and then perform one basic move. If it reaches the destination after the first or the second move, reset to no target.</li>\n</ol>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><p>Let <var>\\mathrm{rand}(L,U)</var> be a function that generates a uniform random integer between <var>L</var> and <var>U</var>, inclusive.</p>\n<p>We generate the number of pets by <var>N=\\mathrm{rand}(10, 20)</var>.\nThe initial position of each pet is chosen uniformly at random from the coordinates that have not been chosen yet.\nWe generate the type of each pet by <var>pt_i=\\mathrm{rand}(1, 5)</var>.</p>\n<p>We generate the number of humans by <var>M=\\mathrm{rand}(5, 10)</var>.\nThe initial position of each human is chosen uniformly at random from the coordinates that have not been chosen yet.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools</h3><ul>\n<li><a href=\"https://img.atcoder.jp/ahc008/tools_v3.zip\">Local tester</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.<ul>\n<li>For those who are not familiar with the Rust language environment, we have prepared a pre-compiled binary for Windows. <a href=\"https://img.atcoder.jp/ahc008/tools_x86_64-pc-windows-gnu_v3.zip\">tools_x86_64-pc-windows-gnu.zip</a></li>\n<li><font color=\"red\">The first version contained a bug in the cat's movement, which has been fixed at 130 minutes after the contest started. Please re-download it.</font></li>\n<li>We have added more examples in README. If you don't know how to use the tools, please refer to README. Also, as stated in the rules, you are free to share information on how to run the provided tools.</li>\n</ul>\n</li>\n<li><a href=\"https://img.atcoder.jp/ahc008/f828b9475ffb41d54f05619db6ccbd4f.html?lang=en\">Web visualizer</a>: By pasting the output generated by the local tester into the Output field, you can display the animation of the execution result.</li>\n</ul>\n<p><font color=\"red\">You are allowed to share output images (png or gif) of the provided visualizer for seed=0 on twitter during the contest.</font> You have to use the specified hashtag and public account. You can only share visualization results and scores for seed=0. Do not share scores for other seeds or mention solutions or discussions. <a href=\"https://twitter.com/search?q=%23AHC008%20%23visualizer&amp;src=typed_query&amp;f=live\">List of shared images.</a></p>\n<h4>Specification of input/output files used by the tools</h4>\n<p>Input files for the local tester consist of the prior information (the initial position and type of each pet, and the initial position of each person) followed by a random seed value to generate pet movements.\nSince the pet's movement depends on human actions, the input file contains only the random seed value and not specific movements.\nThe local tester writes outputs from your program directly to the output file.\nYour program may output comment lines starting with <code>#</code>.\nThe web version of the visualizer displays the comment lines at the time they are output, which may be useful for debugging and analysis.\nSince the judge program ignores all comment lines, you can submit a program that outputs comment lines as is.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ahc008/tasks/ahc008_a"}