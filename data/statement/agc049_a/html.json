{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>400</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>1</var> から <var>N</var> までの番号のついた <var>N</var> 頂点からなる有向グラフがあります．\nこのグラフの辺は，<var>N</var> 個の長さ <var>N</var> の文字列 <var>S_1,S_2,\\ldots,S_N</var> によって表されます．\n具体的には，頂点 <var>i</var> から頂点 <var>j</var> に向かう辺が存在する場合は <var>S_{i,j}=</var><code>1</code> で，\nそうでない場合は <var>S_{i,j}=</var><code>0</code> です．\nこのグラフに自己ループや多重辺はありません．</p>\n<p>クマの AtCobear くんが，以下の操作をグラフが空になるまで繰り返します．</p>\n<ul>\n<li>(まだ削除されていない) グラフの頂点を一様ランダムに <var>1</var> つ選ぶ（このランダムな選択は，今までの選択とは独立である）．\nそして，その頂点，およびその頂点からいくつかの辺をたどることで到達可能なすべての頂点を，削除する．\n削除された頂点に接続する辺も，すべて削除される．</li>\n</ul>\n<p>操作回数の期待値を求めてください．</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>S_i</var> は <code>0</code>,<code>1</code> からなる長さ <var>N</var> の文字列．</li>\n<li><var>S_{i,i}=</var><code>0</code></li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる．</p>\n<pre><var>N</var>\n<var>S_1</var>\n<var>S_2</var>\n<var>\\vdots</var>\n<var>S_N</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>操作回数の期待値を出力せよ．\n絶対誤差または相対誤差が <var>10^{-9}</var> 以下ならば，正解と判定される．</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>3\n010\n001\n010\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>1.66666666666666666667\n</pre>\n\n<p>以下の <var>3</var> つのシナリオが等確率で起こります．</p>\n<ul>\n<li>\n<p>最初の操作で頂点 <var>1</var> を選び，頂点 <var>1,2,3</var> が削除される．\nグラフが空になったので操作を終了する．</p>\n</li>\n<li>\n<p>最初の操作で頂点 <var>2</var> を選び，頂点 <var>2,3</var> が削除される．\n次の操作で，頂点 <var>1</var> を選び，頂点 <var>1</var> が削除される．\nグラフが空になったので操作を終了する．</p>\n</li>\n<li>\n<p>最初の操作で頂点 <var>3</var> を選び，頂点 <var>2,3</var> が削除される．\n次の操作で，頂点 <var>1</var> を選び，頂点 <var>1</var> が削除される．\nグラフが空になったので操作を終了する．</p>\n</li>\n</ul>\n<p>よって操作回数の期待値は，<var>(1+2+2)/3=5/3</var> になります．</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>3\n000\n000\n000\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>3.00000000000000000000\n</pre>\n\n<p>必ず <var>3</var> 回の操作を行います．</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>3\n011\n101\n110\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>1.00000000000000000000\n</pre>\n\n<p>必ず <var>1</var> 回の操作を行います．</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a directed graph with <var>N</var> vertices numbered <var>1</var> to <var>N</var>.\n<var>N</var> strings of length <var>N</var> each, <var>S_1,S_2,\\ldots,S_N</var>, represent the edges in the graph.\nSpecifically, <var>S_{i,j}</var> is <code>1</code> if there is an edge from Vertex <var>i</var> to Vertex <var>j</var>, and <code>0</code> otherwise.\nThe graph has no self-loops and no multi-edges.</p>\n<p>Until the graph becomes empty, AtCobear will repeat the following operation:</p>\n<ul>\n<li>Choose one (unerased) vertex uniformly at random (independently from the previous choices).\nThen, erase that vertex and all vertices that are reachable from the chosen vertex by traversing some edges.\nErasing a vertex will also erase the edges incident to it.</li>\n</ul>\n<p>Find the expected value of the number of times the operation is done.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>S_i</var> is a string of length <var>N</var> consisting of <code>0</code> and <code>1</code>.</li>\n<li><var>S_{i,i}=</var><code>0</code></li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S_1</var>\n<var>S_2</var>\n<var>\\vdots</var>\n<var>S_N</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the expected value of the number of times the operation is done.\nYour output will be considered correct when its absolute or relative error from our answer is at most <var>10^{-9}</var>.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n010\n001\n010\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1.66666666666666666667\n</pre>\n\n<p>We have the following three scenarios happening with equal probability:</p>\n<ul>\n<li>\n<p>Choose Vertex <var>1</var> in the first operation, erasing Vertex <var>1</var>, <var>2</var>, and <var>3</var>.\nThe graph is now empty, so we are done.</p>\n</li>\n<li>\n<p>Choose Vertex <var>2</var> in the first operation, erasing Vertex <var>2</var> and <var>3</var>.\nThen, choose Vertex <var>1</var> in the second operation, erasing Vertex <var>1</var>.\nThe graph is now empty, so we are done.</p>\n</li>\n<li>\n<p>Choose Vertex <var>3</var> in the first operation, erasing Vertex <var>2</var> and <var>3</var>.\nThen, choose Vertex <var>1</var> in the second operation, erasing Vertex <var>1</var>.\nThe graph is now empty, so we are done.</p>\n</li>\n</ul>\n<p>Thus, the expected value of the number of times the operation is done is <var>(1+2+2)/3=5/3</var>.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n000\n000\n000\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3.00000000000000000000\n</pre>\n\n<p>There will always be three operations.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n011\n101\n110\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1.00000000000000000000\n</pre>\n\n<p>There will always be one operation.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/agc049/tasks/agc049_a"}