{"html":{"en":"<span class=\"lang-en\">\n<p>Score: <var>100</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a graph <var>G</var> consisting of <var>N</var> vertices numbered <var>1, 2, \\ldots, N</var>. Initially, <var>G</var> has no edges.</p>\n<p>You will add <var>M</var> undirected edges to <var>G</var>. The final shape of the graph is predetermined, and the <var>i</var>-th edge to be added <var>(1 ≤ i ≤ M)</var> connects vertices <var>u_i</var> and <var>v_i</var>. We will refer to this as edge <var>i</var>.<br>\nIt is guaranteed that the resulting graph will be simple.</p>\n<p>Determine if there exists a permutation <var>(P_1, P_2, \\ldots, P_M)</var> of <var>(1, 2, \\ldots, M)</var> that satisfies the following conditions, and if such a permutation exists, show an example.</p>\n<blockquote>\n<p><strong>Conditions</strong></p>\n<p>You must be able to add all <var>M</var> edges to <var>G</var> by following this procedure:</p>\n<ul>\n<li>For <var>i = 1, 2, \\dots, M</var>, repeat the following:<ol>\n<li>If there is already a cycle in <var>G</var> containing either vertex <var>u_{P_i}</var> or vertex <var>v_{P_i}</var>, the condition is not satisfied, and the procedure ends.</li>\n<li>Add edge <var>P_i</var> (the undirected edge connecting <var>u_{P_i}</var> and <var>v_{P_i}</var>) to <var>G</var>.</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<p>You are given <var>T</var> test cases; solve each of them.</p>\n<details>\n<summary>What is a cycle?</summary>\n\nA cycle in <var>G</var> is defined as a sequence of vertices <var>(v_0, \\dots, v_{L - 1})</var> and a sequence of edges <var>(e_0, \\dots, e_{L - 1})</var> that satisfy the following conditions:\n\n<p>\n</p><ul>\n<li><var>L \\ge 1</var>\n</li><li><var>i \\neq j \\implies v_i \\neq v_j, e_i \\neq e_j</var>\n</li><li>For <var>0 \\le i \\le L - 2</var>, edge <var>e_i</var> connects vertices <var>v_i</var> and <var>v_{i+1}</var>\n</li><li>Edge <var>e_{L-1}</var> connects vertices <var>v_{L-1}</var> and <var>v_0</var>\n</li></ul>\n<p></p>\n\n</details>\n\n<details>\n<summary>What does it mean for a graph to be simple?</summary>\n\nA graph <var>G</var> is simple if it contains no self-loops or multiple edges.\n\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>1 \\le T \\le 2000</var></li>\n<li>For each test case:<ul>\n<li><var>2 \\le N \\le 4000</var></li>\n<li><var>1 \\le M \\le 4000</var></li>\n<li><var>1 \\le u_i, v_i \\le N\\ (1 ≤ i ≤ M)</var></li>\n<li>The graph formed by adding all given edges is simple.</li>\n</ul>\n</li>\n<li>The sum of <var>N</var> over all test cases is at most <var>4000</var>.</li>\n<li>The sum of <var>M</var> over all test cases is at most <var>4000</var>.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Subtasks</h3><p><var>30</var> points will be awarded for passing the test set satisfying:</p>\n<ul>\n<li><var>T \\le 50</var></li>\n<li>For each test case:<ul>\n<li><var>N \\le 100</var></li>\n<li><var>M \\le 100</var></li>\n</ul>\n</li>\n<li>The sum of <var>N</var> over all test cases is at most <var>100</var>.</li>\n<li>The sum of <var>M</var> over all test cases is at most <var>100</var>.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>T</var>\n<var>\\text{case}_1</var>\n<var>\\text{case}_2</var>\n<var>\\vdots</var>\n<var>\\text{case}_T</var>\n</pre>\n<p>Here, <var>\\text{case}_i\\ (1 ≤ i ≤ T)</var> represents the <var>i</var>-th test case. Each test case is given in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>u_1</var> <var>v_1</var>\n<var>u_2</var> <var>v_2</var> \n<var>\\vdots</var>\n<var>u_M</var> <var>v_M</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each test case, if a permutation <var>(P_1, P_2, \\ldots, P_M)</var> satisfying the conditions exists, output such a <var>P</var> separated by spaces. If no such permutation exists, output <code>-1</code>.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1\n4 4\n1 2\n2 3\n3 4\n4 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 4 1 3\n</pre>\n<p>The given graph has the following shape:</p>\n<p><img src=\"https://img.atcoder.jp/ttpc2024_1/efcd772696bd0c92c27611b554a4d94b.png\" class=\"img-responsive center-block\" style=\"max-width: 100%; max-height: 288px;\"></p>\n<p>If we add the edges in the order <var>P = (1, 2, 3, 4)</var>, the conditions are satisfied as shown below:</p>\n<p><img src=\"https://img.atcoder.jp/ttpc2024_1/f639f61a8c21e023b412bb9d1f8c4cca.png\" class=\"img-responsive center-block\" style=\"max-width: 100%; max-height: 256px;\">\n<img src=\"https://img.atcoder.jp/ttpc2024_1/d6307590977040bdaea3733c0df34398.png\" class=\"img-responsive center-block\" style=\"max-width: 100%; max-height: 256px;\"></p>\n<p>Thus, <code>1 2 3 4</code> is one valid output.</p>\n<p>However, if we add edges in the order <var>P = (2, 3, 4, 1)</var>, a cycle containing vertex <var>2</var> is created before edge <var>1</var> can be added, so the conditions are not satisfied.</p>\n<p><img src=\"https://img.atcoder.jp/ttpc2024_1/d7e2277adb8c0aace5f07f25a6cf2569.png\" class=\"img-responsive center-block\" style=\"max-width: 100%; max-height: 256px;\">\n<img src=\"https://img.atcoder.jp/ttpc2024_1/11d01a954d01e5ea030492db5eefd3f8.png\" class=\"img-responsive center-block\" style=\"max-width: 100%; max-height: 256px;\"></p>\n<p>Other valid outputs include <var>P = (1, 4, 3, 2)</var> or <var>P = (2, 4, 1, 3)</var>.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n4 5\n1 2\n2 3\n3 4\n3 1\n1 4\n5 3\n1 2\n2 3\n3 4\n9 10\n3 5\n1 8\n5 8\n4 9\n6 7\n7 9\n1 2\n1 4\n2 4\n4 6\n8 10\n1 4\n3 8\n2 5\n3 4\n1 5\n5 8\n2 8\n5 7\n4 5\n3 7\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n3 2 1\n4 10 2 8 7 9 6 5 3 1\n-1\n</pre>\n<p>If no valid <var>P</var> exists, output <code>-1</code>. Note that the graph is not necessarily connected.</p></section>\n</div>\n</span>","ja":"<span class=\"lang-ja\">\n<p>配点 : <var>100</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N</var> 頂点からなるグラフ <var>G</var> があり、頂点には <var>1, 2, \\ldots, N</var> の番号がついています。はじめ、<var>G</var> には辺がありません。</p>\n<p>これから、<var>G</var> に <var>M</var> 本の無向辺を追加します。追加後のグラフの形は決まっており、追加する辺のうち <var>i</var> 番目の辺 <var>(1 ≤ i ≤ M)</var> は頂点 <var>u_i</var> と頂点 <var>v_i</var> を結ぶ辺です。これを辺 <var>i</var> と呼ぶことにします。<br>\n追加後のグラフは単純であることが保証されます。</p>\n<p><var>(1, 2, \\ldots, M)</var> の順列 <var>(P_1, P_2, \\ldots, P_M)</var> であって以下の条件を満たすようなものが存在するかどうか判定し、存在する場合はその一例を示してください。</p>\n<blockquote>\n<p><strong>条件</strong></p>\n<p>以下の手順を行って、<var>G</var> に <var>M</var> 本の辺をすべて追加することができる。</p>\n<ul>\n<li><var>i = 1, 2, \\dots, M</var> の順に以下を繰り返す:<ol>\n<li><var>G</var> に頂点 <var>u_{P_i}</var> または頂点 <var>v_{P_i}</var> を含むサイクルが存在するとき、条件は満たされないものとして手順を終了する。</li>\n<li><var>G</var> に辺 <var>P_i</var>（頂点 <var>u_{P_i}</var> と頂点 <var>v_{P_i}</var> を結ぶ無向辺）を追加する。</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<p><var>T</var> 個のテストケースが与えられるので、それぞれについて解いて下さい。</p>\n<details>\n<summary>サイクルとは？</summary>\n\n<var>G</var> におけるサイクルとは、頂点の列 <var>(v_0, \\dots, v_{L - 1})</var> と 辺の列 <var>(e_0, \\dots, e_{L - 1})</var> であって以下の条件を満たすもののことを言います。\n\n<p>\n</p><ul>\n<li><var>L \\ge 1</var>\n</li><li><var>i \\neq j \\implies v_i \\neq v_j, e_i \\neq e_j</var>\n</li><li><var>0 \\le i \\le L - 2</var> に対して、辺 <var>e_i</var> は頂点 <var>v_i</var> と頂点 <var>v_{i+1}</var> を結ぶ\n</li><li>辺 <var>e_{L-1}</var> は頂点 <var>v_{L-1}</var> と頂点 <var>v_0</var> を結ぶ\n</li></ul>\n<p></p>\n\n</details>\n\n<details>\n<summary>グラフが単純とは？</summary>\n\nグラフ <var>G</var> が単純であるとは、<var>G</var> が自己ループ及び多重辺を含まない事を言います。\n\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li>入力はすべて整数</li>\n<li><var>1 \\le T \\le 2000</var></li>\n<li>各テストケースについて:<ul>\n<li><var>2 \\le N \\le 4000</var></li>\n<li><var>1 \\le M \\le 4000</var></li>\n<li><var>1 \\le u_i, v_i \\le N\\ (1 ≤ i ≤ M)</var></li>\n<li>与えられるすべての辺を追加したグラフは単純</li>\n</ul>\n</li>\n<li>各入力ファイルについて、<var>N, M</var> の総和はそれぞれ <var>4000</var> を超えない</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>部分点</h3><p>以下の制約を満たすデータセットに正解した場合は <var>30</var> 点が与えられる。</p>\n<ul>\n<li><var>T \\le 50</var></li>\n<li>各テストケースについて:<ul>\n<li><var>N \\le 100</var></li>\n<li><var>M \\le 100</var></li>\n</ul>\n</li>\n<li>各入力ファイルについて、<var>N</var>, <var>M</var> の総和はそれぞれ <var>100</var> を超えない</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>T</var>\n<var>\\text{case}_1</var>\n<var>\\text{case}_2</var>\n<var>\\vdots</var>\n<var>\\text{case}_T</var>\n</pre>\n<p>ここで、<var>\\text{case}_i\\ (1 ≤ i ≤ T)</var> は <var>i</var> 番目のテストケースを表す。各テストケースは以下の形式で与えられる。</p>\n<pre><var>N</var> <var>M</var>\n<var>u_1</var> <var>v_1</var>\n<var>u_2</var> <var>v_2</var> \n<var>\\vdots</var>\n<var>u_M</var> <var>v_M</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>各テストケースについて、条件を満たす順列 <var>(P_1, P_2, \\ldots, P_M)</var> が存在する場合は、そのような <var>P</var> を空白区切りで出力せよ。存在しない場合は、<code>-1</code> を出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>1\n4 4\n1 2\n2 3\n3 4\n4 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>2 4 1 3\n</pre>\n<p>与えられたグラフは以下の図のような形をしています。  </p>\n<p><img src=\"https://img.atcoder.jp/ttpc2024_1/efcd772696bd0c92c27611b554a4d94b.png\" class=\"img-responsive center-block\" style=\"max-width: 100%; max-height: 288px;\"></p>\n<p>これに対し、<var>P = (1, 2, 3, 4)</var> の順で辺を追加すると、以下の図のように条件を満たします。  </p>\n<p><img src=\"https://img.atcoder.jp/ttpc2024_1/f639f61a8c21e023b412bb9d1f8c4cca.png\" class=\"img-responsive center-block\" style=\"max-width: 100%; max-height: 256px;\">\n<img src=\"https://img.atcoder.jp/ttpc2024_1/d6307590977040bdaea3733c0df34398.png\" class=\"img-responsive center-block\" style=\"max-width: 100%; max-height: 256px;\"></p>\n<p>したがって、<code>1 2 3 4</code> は正しい出力の <var>1</var> つです。</p>\n<p>しかし、<var>P = (2, 3, 4, 1)</var> の順で辺を追加すると、辺 <var>1</var> を追加する際に頂点 <var>2</var> を含むサイクルが存在するため、条件を満たしません。</p>\n<p><img src=\"https://img.atcoder.jp/ttpc2024_1/d7e2277adb8c0aace5f07f25a6cf2569.png\" class=\"img-responsive center-block\" style=\"max-width: 100%; max-height: 256px;\">\n<img src=\"https://img.atcoder.jp/ttpc2024_1/11d01a954d01e5ea030492db5eefd3f8.png\" class=\"img-responsive center-block\" style=\"max-width: 100%; max-height: 256px;\"></p>\n<p>他にも、<var>P = (1, 4, 3, 2)</var> や <var>P = (2, 4, 1, 3)</var> などが条件を満たします。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>4\n4 5\n1 2\n2 3\n3 4\n3 1\n1 4\n5 3\n1 2\n2 3\n3 4\n9 10\n3 5\n1 8\n5 8\n4 9\n6 7\n7 9\n1 2\n1 4\n2 4\n4 6\n8 10\n1 4\n3 8\n2 5\n3 4\n1 5\n5 8\n2 8\n5 7\n4 5\n3 7\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>-1\n3 2 1\n4 10 2 8 7 9 6 5 3 1\n-1\n</pre>\n<p>条件を満たす <var>P</var> が存在しない場合、<code>-1</code> を出力して下さい。また、グラフは連結とは限らないことに注意してください。</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/ttpc2024_1/tasks/ttpc2024_1_a"}