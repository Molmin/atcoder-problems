{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>2000</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N</var> 頂点 <var>M</var> 辺の連結なグラフが与えられます．各頂点には <var>1, 2,...,N</var> と番号がついています． <var>i(1 \\leq i \\leq M)</var> 番目の辺は頂点 <var>A_i</var> と頂点 <var>B_i</var> を繋ぐ長さ <var>C_i</var> の無向辺です．\nまた，奇数 <var>MOD</var> が与えられます．</p>\n<p><var>Q</var> 個のクエリが与えられるので，処理してください．クエリの形式は以下の通りです．</p>\n<ul>\n<li><var>i</var> 番目のクエリでは，<var>S_i,T_i,R_i</var> が与えられる．頂点 <var>S_i</var> から頂点 <var>T_i</var> へ至る経路であって，長さを <var>MOD</var> で割った余りが <var>R_i</var> になるようなものが存在する場合は <code>YES</code> を，存在しない場合は <code>NO</code> を出力する．ただし同じ辺を複数回通っても，来た辺をすぐ戻ってもよい．</li>\n</ul>\n<p>ただし，この問題においての経路の長さは辺の長さの単純な和<font color=\"red\"><strong>ではなく</strong></font>，<var>1</var> 本目に使う辺の長さを <var>1</var> 倍，<var>2</var> 本目に使う辺の長さを <var>2</var> 倍，<var>3</var> 本目に使う辺の長さを <var>4</var> 倍，<var>...</var> したものの和とします．\n(より厳密には，長さ <var>L_1,...,L_k</var> の辺をこの順に使ったとすると，その経路の長さは <var>L_i \\times 2^{i-1}</var> の和です．)</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq N,M,Q \\leq 50000</var></li>\n<li><var>3 \\leq MOD \\leq 10^{6}</var></li>\n<li><var>MOD</var> は奇数</li>\n<li><var>1 \\leq A_i,B_i\\leq N</var></li>\n<li><var>0 \\leq C_i \\leq MOD-1</var></li>\n<li><var>1 \\leq S_i,T_i \\leq N</var></li>\n<li><var>0 \\leq R_i \\leq MOD-1</var></li>\n<li>与えられるグラフは連結 (ただし自己辺や多重辺を含むことがある)</li>\n</ul>\n</section>\n</div>\n\n<hr>\n\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる．</p>\n<pre><var>N</var> <var>M</var> <var>Q</var> <var>MOD</var>\n<var>A_1</var> <var>B_1</var> <var>C_1</var>\n<var>\\vdots</var>\n<var>A_M</var> <var>B_M</var> <var>C_M</var>\n<var>S_1</var> <var>T_1</var> <var>R_1</var>\n<var>\\vdots</var>\n<var>S_Q</var> <var>T_Q</var> <var>R_Q</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p><var>i</var> 行目に，<var>i</var> 番目のクエリに対する答えを出力せよ．</p>\n</section>\n</div>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>3 2 2 2019\n1 2 1\n2 3 2\n1 3 5\n1 3 4\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>YES\nNO\n</pre>\n\n<p>各クエリに対する答えは以下のようになります．</p>\n<ul>\n<li><var>1</var> 番目のクエリ: 頂点 <var>1,2,3</var> の順に進むと経路の長さは <var>1 \\times 2^0 + 2 \\times 2^1 = 5</var> となり，長さを <var>2019</var> で割った余りが <var>5</var> になる経路は存在するので，答えは <code>YES</code> である．</li>\n<li><var>2</var> 番目のクエリ: どのように頂点 <var>1</var> から頂点 <var>3</var> まで進んでも経路の長さを <var>2019</var> で割った余りが <var>4</var> となることはないので，答えは <code>NO</code> である．</li>\n</ul>\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>6 6 3 2019\n1 2 4\n2 3 4\n3 4 4\n4 5 4\n5 6 4\n6 1 4\n2 6 1110\n3 1 1111\n4 5 1112\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>YES\nNO\nNO\n</pre>\n\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>1 2 3 25\n1 1 1\n1 1 2\n1 1 13\n1 1 6\n1 1 14\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>YES\nYES\nYES\n</pre>\n\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 4</h3><pre>10 15 10 15\n1 2 1\n2 3 6\n3 4 6\n2 5 1\n5 6 1\n4 7 6\n1 8 11\n2 9 6\n5 10 11\n9 10 11\n3 6 1\n2 5 1\n2 7 11\n9 10 11\n5 6 11\n1 3 5\n9 8 3\n7 7 7\n7 10 13\n4 1 10\n9 3 12\n10 10 14\n9 2 1\n6 6 5\n8 8 4\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 4</h3><pre>YES\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nYES\nNO\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>2000</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a connected graph with <var>N</var> vertices and <var>M</var> edges. The vertices are numbered <var>1</var> to <var>N</var>. The <var>i</var>-th edge is an undirected edge of length <var>C_i</var> connecting Vertex <var>A_i</var> and Vertex <var>B_i</var>.</p>\n<p>Additionally, an odd number <var>MOD</var> is given.</p>\n<p>You will be given <var>Q</var> queries, which should be processed. The queries take the following form:</p>\n<ul>\n<li>Given in the <var>i</var>-th query are <var>S_i</var>, <var>T_i</var> and <var>R_i</var>. Print <code>YES</code> if there exists a path from Vertex <var>S_i</var> to Vertex <var>T_i</var> whose length is <var>R_i</var> modulo <var>MOD</var>, and print <code>NO</code> otherwise. A path may traverse the same edge multiple times, or go back using the edge it just used.</li>\n</ul>\n<p>Here, in this problem, the length of a path is <font color=\"red\"><strong>NOT</strong></font> the sum of the lengths of its edges themselves, but the length of the first edge used in the path gets multiplied by <var>1</var>, the second edge gets multiplied by <var>2</var>, the third edge gets multiplied by <var>4</var>, and so on. (More formally, let <var>L_1,...,L_k</var> be the lengths of the edges used, in this order. The length of that path is the sum of <var>L_i \\times 2^{i-1}</var>.)</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M,Q \\leq 50000</var></li>\n<li><var>3 \\leq MOD \\leq 10^{6}</var></li>\n<li><var>MOD</var> is odd.</li>\n<li><var>1 \\leq A_i,B_i\\leq N</var></li>\n<li><var>0 \\leq C_i \\leq MOD-1</var></li>\n<li><var>1 \\leq S_i,T_i \\leq N</var></li>\n<li><var>0 \\leq R_i \\leq MOD-1</var></li>\n<li>The given graph is connected. (It may contain self-loops or multiple edges.)</li>\n</ul>\n</section>\n</div>\n\n<hr>\n\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>Q</var> <var>MOD</var>\n<var>A_1</var> <var>B_1</var> <var>C_1</var>\n<var>\\vdots</var>\n<var>A_M</var> <var>B_M</var> <var>C_M</var>\n<var>S_1</var> <var>T_1</var> <var>R_1</var>\n<var>\\vdots</var>\n<var>S_Q</var> <var>T_Q</var> <var>R_Q</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answers to the <var>i</var>-th query in the <var>i</var>-th line.</p>\n</section>\n</div>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2 2 2019\n1 2 1\n2 3 2\n1 3 5\n1 3 4\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\nNO\n</pre>\n\n<p>The answer to each query is as follows:</p>\n<ul>\n<li>The first query: If we take the path <var>1,2,3</var>, its length is <var>1 \\times 2^0 + 2 \\times 2^1 = 5</var>, so there exists a path whose length is <var>5</var> modulo <var>2019</var>. The answer is <code>YES</code>.</li>\n<li>The second query: No matter what path we take from Vertex <var>1</var> to Vertex <var>3</var>, its length will never be <var>4</var> modulo <var>2019</var>. The answer is <code>NO</code>.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 6 3 2019\n1 2 4\n2 3 4\n3 4 4\n4 5 4\n5 6 4\n6 1 4\n2 6 1110\n3 1 1111\n4 5 1112\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>YES\nNO\nNO\n</pre>\n\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 2 3 25\n1 1 1\n1 1 2\n1 1 13\n1 1 6\n1 1 14\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>YES\nYES\nYES\n</pre>\n\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 15 10 15\n1 2 1\n2 3 6\n3 4 6\n2 5 1\n5 6 1\n4 7 6\n1 8 11\n2 9 6\n5 10 11\n9 10 11\n3 6 1\n2 5 1\n2 7 11\n9 10 11\n5 6 11\n1 3 5\n9 8 3\n7 7 7\n7 10 13\n4 1 10\n9 3 12\n10 10 14\n9 2 1\n6 6 5\n8 8 4\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>YES\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nYES\nNO\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/agc031/tasks/agc031_f"}