{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>700</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N</var> 頂点 <var>M</var> 辺の有向グラフ <var>G</var> があります。頂点には <var>1</var> から <var>N</var> の番号が付いており、各辺には <code>(</code> , <code>)</code> のいずれかのラベルが付与されています。<var>i</var> 番目の辺は頂点 <var>u_i</var> から頂点 <var>v_i</var> に向かう辺であり、ラベル <var>c_i</var> が付与されています。このグラフは多重辺、自己ループを持ちません。</p>\n<p>このグラフにおいては任意の <var>2</var> 頂点 <var>s,t</var> に対して、 <var>s</var> から <var>t</var> に向かうパスが存在します。</p>\n<p>グラフ <var>G</var> 上の<b>ウォーク</b>であって、以下の条件をすべて満たすものが存在するか判定してください。</p>\n<ul>\n<li>ウォークの始点と終点は同じ頂点である</li>\n<li><var>i=1,2,\\dots,M</var> に対して、 <var>i</var> 番目の辺はウォークに <var>1</var> 回以上用いられる</li>\n<li>ウォークに用いた辺のラベルを、辺の使用順に並べて得られる文字列は正しい括弧列である</li>\n</ul>\n<details>\n<summary> ウォークとは</summary>\n\nグラフ <var>G</var> 上のウォークとは、 <var>k</var> 個（ <var>k</var> は正整数）の頂点と <var>k-1</var> 個の辺を交互に並べた列 <var>(v_1,e_1,v_2,\\dots,v_{k-1},e_{k-1},v_k)</var> であって、辺 <var>e_i</var> が頂点 <var>v_i</var> から頂点 <var>v_{i+1}</var> へ向かう辺であるようなものを指し、頂点 <var>v_1,v_k</var> をそれぞれウォークの始点、終点とよぶ。\n\n</details>\n\n<details>\n<summary> 正しい括弧列とは </summary><p>\n\n正しい括弧列とは、以下のいずれかの条件を満たす文字列です。\n\n</p><ul>\n\n<li> 空文字列 </li>\n<li> ある正しい括弧列 <var>A</var> が存在して <code>(</code>, <var>A</var>, <code>)</code> をこの順に連結した文字列 </li>\n<li> ある空でない正しい括弧列 <var>A,B</var> が存在して、 <var>A,B</var> をこの順に連結した文字列 </li>\n\n</ul>\n<p></p></details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>2 \\leq N \\leq 4000</var></li>\n<li><var>N \\leq M \\leq 8000</var></li>\n<li><var>1 \\leq u_i,v_i \\leq N</var></li>\n<li><var>c_i</var> は <code>(</code> , <code>)</code> のいずれか</li>\n<li><var>u_i \\neq v_i</var></li>\n<li><var>i \\neq j</var> ならば <var>(u_i,v_i) \\neq (u_j,v_j)</var></li>\n<li>入力される数値はすべて整数</li>\n<li>入力で与えられるグラフにおいて、任意の <var>2</var> 頂点 <var>s,t</var> に対して、 <var>s</var> から <var>t</var> に向かうパスが存在する。</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var> <var>M</var>\n<var>u_1</var> <var>v_1</var> <var>c_1</var>\n<var>u_2</var> <var>v_2</var> <var>c_2</var>\n<var>\\vdots</var>\n<var>u_M</var> <var>v_M</var> <var>c_M</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>条件を満たすウォークが存在する場合は <code>Yes</code> を、存在しない場合は <code>No</code> を出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>5 7\n1 2 (\n2 3 )\n3 4 (\n4 1 )\n2 4 )\n4 5 (\n5 1 )\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>Yes\n</pre>\n<p>辺 <var>1,2,3,4,1,5,6,7</var> をこの順で用いるウォークは、すべての辺を一度以上用いており、辺のラベルを使用順に並べて得られる文字列 <code>()()()()</code> は正しい括弧列であるため、条件を満たします。</p>\n<p>ウォークは同じ辺を <var>2</var> 回以上使用したり、同じ頂点を <var>2</var> 回以上訪れるものであっても構いません。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>2 2\n1 2 )\n2 1 )\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>No\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>10 20\n4 5 (\n5 6 (\n6 7 )\n2 5 )\n5 8 (\n6 3 )\n8 5 )\n1 2 (\n9 10 (\n4 7 (\n3 4 )\n8 9 (\n2 1 )\n1 4 )\n2 3 )\n3 2 (\n7 8 (\n7 4 )\n10 9 )\n9 8 )\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score: <var>700</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a directed graph <var>G</var> with <var>N</var> vertices and <var>M</var> edges. The vertices are numbered from <var>1</var> to <var>N</var>, and each edge is labeled with <code>(</code> or <code>)</code>. The <var>i</var>-th edge is directed from vertex <var>u_i</var> to vertex <var>v_i</var> with a label <var>c_i</var>. The graph does not contain multi-edges or self-loops.</p>\n<p>In this graph, for any two vertices <var>s</var> and <var>t</var>, there is a path from <var>s</var> to <var>t</var>.</p>\n<p>Determine if there is a <b>walk</b> on the graph <var>G</var> that satisfies all of the following conditions:</p>\n<ul>\n<li>The start and end vertices of the walk are the same.</li>\n<li>For <var>i=1,2,\\dots,M</var>, the <var>i</var>-th edge is used at least once in the walk.</li>\n<li>The string obtained by arranging the labels of the edges used in the walk in the order of their usage is a regular bracket sequence.</li>\n</ul>\n<details>\n<summary>What is a walk?</summary>\n\nA walk on a graph <var>G</var> is a sequence <var>(v_1,e_1,v_2,\\dots,v_{k-1},e_{k-1},v_k)</var> of <var>k</var> vertices (<var>k</var> is a positive integer) and <var>k-1</var> edges, where the edge <var>e_i</var> is directed from vertex <var>v_i</var> to vertex <var>v_{i+1}</var>. The vertices <var>v_1</var> and <var>v_k</var> are called the start and end vertices of the walk, respectively.\n\n</details>\n\n<details>\n<summary>What is a regular bracket sequence?</summary><p>\n\nA regular bracket sequence is a string that satisfies one of the following conditions:\n\n</p><ul>\n\n<li>It is an empty string.</li>\n<li>It is a string obtained by concatenating <code>(</code>, a regular bracket sequence <var>A</var>, and <code>)</code> in this order.</li>\n<li>It is a string obtained by concatenating two non-empty regular bracket sequences <var>A</var> and <var>B</var> in this order.</li>\n\n</ul>\n<p></p></details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 4000</var></li>\n<li><var>N \\leq M \\leq 8000</var></li>\n<li><var>1 \\leq u_i,v_i \\leq N</var></li>\n<li><var>c_i</var> is <code>(</code> or <code>)</code>.</li>\n<li><var>u_i \\neq v_i</var></li>\n<li>If <var>i \\neq j</var>, then <var>(u_i,v_i) \\neq (u_j,v_j)</var>.</li>\n<li>All input values are integers.</li>\n<li>In the input graph, for any two vertices <var>s</var> and <var>t</var>, there is a path from <var>s</var> to <var>t</var>.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>u_1</var> <var>v_1</var> <var>c_1</var>\n<var>u_2</var> <var>v_2</var> <var>c_2</var>\n<var>\\vdots</var>\n<var>u_M</var> <var>v_M</var> <var>c_M</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there is a walk satisfying the conditions, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 7\n1 2 (\n2 3 )\n3 4 (\n4 1 )\n2 4 )\n4 5 (\n5 1 )\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>The walk that uses edges <var>1,2,3,4,1,5,6,7</var> in this order uses all the edges at least once, and the string <code>()()()()</code> obtained by arranging the labels of the edges in the order of their usage is a regular bracket sequence, so all conditions are satisfied.</p>\n<p>The walk may use the same edge multiple times or visit the same vertex multiple times.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2\n1 2 )\n2 1 )\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 20\n4 5 (\n5 6 (\n6 7 )\n2 5 )\n5 8 (\n6 3 )\n8 5 )\n1 2 (\n9 10 (\n4 7 (\n3 4 )\n8 9 (\n2 1 )\n1 4 )\n2 3 )\n3 2 (\n7 8 (\n7 4 )\n10 9 )\n9 8 )\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/arc173/tasks/arc173_d"}