{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>500</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><code>d</code> と <code>p</code> からなる長さ <var>L</var> の文字列 <var>T</var> に対して、<var>T</var> を <var>180</var> 度回転した文字列を <var>f(T)</var> と表します。より厳密には、<var>f(T)</var> を次の条件を満たす文字列として定めます。</p>\n<ul>\n<li><var>f(T)</var> は <code>d</code> と <code>p</code> からなる長さ <var>L</var> の文字列である。</li>\n<li><var>1 \\leq i \\leq L</var> であるすべての整数 <var>i</var> について、<var>f(T)</var> の <var>i</var> 文字目は <var>T</var> の <var>L + 1 - i</var> 文字目と異なる。</li>\n</ul>\n<p>例えば <var>T =</var> <code>ddddd</code> のとき <var>f(T) =</var> <code>ppppp</code>, <var>T =</var> <code>dpdppp</code> のとき <var>f(T)=</var> <code>dddpdp</code> です。  </p>\n<p><code>d</code> と <code>p</code> からなる長さ <var>N</var> の文字列 <var>S</var> が与えられます。<br>\nあなたは次の操作を <strong><var>0</var> 回以上 <var>1</var> 回以下</strong>行うことができます。</p>\n<ul>\n<li><var>1 \\leq L \\leq R \\leq N</var> である整数の組 <var>(L, R)</var> を <var>1</var> つ選び、<var>S</var> の <var>L</var> 文字目から <var>R</var> 文字目までからなる部分文字列を <var>T</var> とする。そして、<var>S</var> の <var>L</var> 文字目から <var>R</var> 文字目までを <var>f(T)</var> に置き換える。</li>\n</ul>\n<p>例えば <var>S=</var> <code>dpdpp</code>, <var>(L,R)=(2,4)</var> の場合、<var>T=</var> <code>pdp</code>, <var>f(T)=</var> <code>dpd</code> なので <var>S</var> は <code>ddpdp</code> に変化します。</p>\n<p>最終的な <var>S</var> としてあり得る文字列のうち辞書順最小のものを出力してください。</p>\n<!--<details> <summary>辞書順とは？</summary> <p> 辞書順とは簡単に説明すると「単語が辞書に載っている順番」を意味します。より厳密な説明として、相異なる文字列 <var>S</var> と文字列 <var>T</var> の大小を判定するアルゴリズムを以下に説明します。 </p>\n\n<p>以下では <var>S</var> の <var>i</var> 文字目の文字を <var>S_i</var> のように表します。また、 <var>S</var> が <var>T</var> より辞書順で小さい場合は <var>S \\lt T</var> 、大きい場合は <var>S \\gt T</var> と表します。</p>\n\n<ol> <li> <var>S</var> と <var>T</var> のうち長さが短い方の文字列の長さを <var>L</var> とします。<var>i=1,2,\\dots,L</var> に対して <var>S_i</var> と <var>T_i</var> が一致するか調べます。 </li> <li> <var>S_i \\neq T_i</var> である <var>i</var> が存在する場合、そのような <var>i</var> のうち最小のものを <var>j</var> とします。そして、<var>S_j</var> と <var>T_j</var> を比較して、 <var>S_j</var> がアルファベット順で <var>T_j</var> より小さい場合は <var>S \\lt T</var> 、大きい場合は <var>S \\gt T</var> と決定して、アルゴリズムを終了します。 </li> <li> <var>S_i \\neq T_i</var> である <var>i</var> が存在しない場合、 <var>S</var> と <var>T</var> の長さを比較して、<var>S</var> が <var>T</var> より短い場合は <var>S \\lt T</var> 、長い場合は <var>S \\gt T</var> と決定して、アルゴリズムを終了します。 </li> </ol>\n\n</details>-->\n\n<details> <summary>辞書順とは？</summary>\n\n<p>文字列 <var>S = S_1S_2\\ldots S_{|S|}</var> が文字列 <var>T = T_1T_2\\ldots T_{|T|}</var> より<strong>辞書順で小さい</strong>とは、下記の 1. と 2. のどちらかが成り立つことを言います。\nここで、<var>|S|, |T|</var> はそれぞれ <var>S, T</var> の長さを表します。</p>\n\n<ol>\n<li> <var>|S| \\lt |T|</var> かつ <var>S_1S_2\\ldots S_{|S|} = T_1T_2\\ldots T_{|S|}</var>。 </li>\n<li> ある整数 <var>1 \\leq i \\leq \\min\\lbrace |S|, |T| \\rbrace</var> が存在して、下記の <var>2</var> つがともに成り立つ。\n<ul>\n<li> <var>S_1S_2\\ldots S_{i-1} = T_1T_2\\ldots T_{i-1}</var></li>\n<li> <var>S_i</var> が <var>T_i</var> よりアルファベット順で小さい文字である。</li>\n</ul>\n</li></ol>\n\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq N \\leq 5000</var></li>\n<li><var>S</var> は <code>d</code> と <code>p</code> からなる長さ <var>N</var> の文字列</li>\n<li><var>N</var> は整数</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>答えを出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>6\ndpdppd\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>dddpdd\n</pre>\n<p><var>(L, R) = (2, 5)</var> とします。<var>T =</var> <code>pdpp</code>, <var>f(T) =</var> <code>ddpd</code> なので、操作後の <var>S</var> は <code>dddpdd</code> になります。<br>\n得られる文字列のうち <code>dddpdd</code> が辞書順最小なので、これを出力します。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>3\nddd\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>ddd\n</pre>\n<p>操作を行わないことが最適な場合もあります。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>11\nddpdpdppddp\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>ddddpdpdddp\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For a string <var>T</var> of length <var>L</var> consisting of <code>d</code> and <code>p</code>, let <var>f(T)</var> be <var>T</var> rotated <var>180</var> degrees. More formally, let <var>f(T)</var> be the string that satisfies the following conditions.</p>\n<ul>\n<li><var>f(T)</var> is a string of length <var>L</var> consisting of <code>d</code> and <code>p</code>.</li>\n<li>For every integer <var>i</var> such that <var>1 \\leq i \\leq L</var>, the <var>i</var>-th character of <var>f(T)</var> differs from the <var>(L + 1 - i)</var>-th character of <var>T</var>.</li>\n</ul>\n<p>For instance, if <var>T =</var> <code>ddddd</code>, <var>f(T) =</var> <code>ppppp</code>; if <var>T =</var> <code>dpdppp</code>, <var>f(T)=</var> <code>dddpdp</code>. </p>\n<p>You are given a string <var>S</var> of length <var>N</var> consisting of <code>d</code> and <code>p</code>.<br>\nYou may perform the following operation <strong>zero or one</strong> time.</p>\n<ul>\n<li>Choose a pair of integers <var>(L, R)</var> such that <var>1 \\leq L \\leq R \\leq N</var>, and let <var>T</var> be the substring formed by the <var>L</var>-th through <var>R</var>-th characters of <var>S</var>. Then, replace the <var>L</var>-th through <var>R</var>-th characters of <var>S</var> with <var>f(T)</var>.</li>\n</ul>\n<p>For instance, if <var>S=</var> <code>dpdpp</code> and <var>(L,R)=(2,4)</var>, we have <var>T=</var> <code>pdp</code> and <var>f(T)=</var> <code>dpd</code>, so <var>S</var> becomes <code>ddpdp</code>.</p>\n<p>Print the lexicographically smallest string that <var>S</var> can become.</p>\n<!--<details>\n<summary>What is lexicographical order?</summary>\n<p>\nThe following is an algorithm to determine the lexicographical order between different strings <var>S</var> and <var>T</var>.\n</p>\n\n<p>Below, let <var>S_i</var> denote the <var>i</var>-th element of <var>S</var>. Also, if <var>S</var> is lexicographically smaller than <var>T</var>, we will denote that fact as <var>S \\lt T</var>; if <var>S</var> is lexicographically larger than <var>T</var>, we will denote that fact as <var>S \\gt T</var>.</p>\n\n<ol>\n  <li> Let <var>L</var> be the smaller of the lengths of <var>S</var> and <var>T</var>. For each <var>i=1,2,\\dots,L</var>, we check whether <var>S_i</var> and <var>T_i</var> are the same. </li>\n  <li> If there is an <var>i</var> such that <var>S_i \\neq T_i</var>, let <var>j</var> be the smallest such <var>i</var>. Then, we compare <var>S_j</var> and <var>T_j</var>. If <var>S_j</var> is smaller than <var>T_j</var> in alphabetical order, we determine that <var>S \\lt T</var> and quit; if <var>S_j</var> is larger than <var>T_j</var>, we determine that <var>S \\gt T</var> and quit.\n  </li>\n  <li> If there is no <var>i</var> such that <var>S_i \\neq T_i</var>, we compare the lengths of <var>S</var> and <var>T</var>. If <var>S</var> is shorter than <var>T</var>, we determine that <var>S \\lt T</var> and quit; if <var>S</var> is longer than <var>T</var>, we determine that <var>S \\gt T</var> and quit. </li>\n</ol>\n</details>-->\n\n<details><summary>What is lexicographical order?</summary>\n\n<p>A string <var>S = S_1S_2\\ldots S_{|S|}</var> is said to be <strong>lexicographically smaller</strong> than a string <var>T = T_1T_2\\ldots T_{|T|}</var> if one of the following 1. and 2. holds.\nHere, <var>|S|</var> and <var>|T|</var> denote the lengths of <var>S</var> and <var>T</var>, respectively.</p>\n\n<ol>\n<li><var>|S| \\lt |T|</var> and <var>S_1S_2\\ldots S_{|S|} = T_1T_2\\ldots T_{|S|}</var>.</li>\n<li>There is an integer <var>1 \\leq i \\leq \\min\\lbrace |S|, |T| \\rbrace</var> that satisfies the following two conditions:\n<ul>\n<li> <var>S_1S_2\\ldots S_{i-1} = T_1T_2\\ldots T_{i-1}</var>.</li>\n<li> <var>S_i</var> is smaller than <var>T_i</var> in alphabetical order. </li>\n</ul>\n</li></ol>\n\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 5000</var></li>\n<li><var>S</var> is a string of length <var>N</var> consisting of <code>d</code> and <code>p</code>.</li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\ndpdppd\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>dddpdd\n</pre>\n<p>Let <var>(L, R) = (2, 5)</var>. Then, we have <var>T =</var> <code>pdpp</code> and <var>f(T) =</var> <code>ddpd</code>, so <var>S</var> becomes <code>dddpdd</code>.<br>\nThis is the lexicographically smallest string that can be obtained, so print it.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\nddd\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>ddd\n</pre>\n<p>It may be optimal to skip the operation. </p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>11\nddpdpdppddp\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>ddddpdpdddp\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/arc148/tasks/arc148_b"}