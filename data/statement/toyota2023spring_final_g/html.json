{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>1300</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>プログラミング初心者のすぬけくんが，以下のようなコードを書きました．</p>\n<pre>N = read_integer()\n\nparent = array(N, -1) //長さ N の配列 parent を作り，すべての要素を -1 で初期化\n\nfind(v):\n    if parent[v] == -1:\n        return v\n    else:\n        return find(parent[v])\n\nunion(a,b):\n    parent[find(b)] = find(a)\n\nfor i = 0 to N-2:\n    A_i = read_integer()\n    B_i = read_integer()\n    union(A_i,B_i)\n</pre>\n<p>これは，<var>N</var> 頂点の木の情報を受けとり，Union-Find で辺を結ぶだけのプログラムです．</p>\n<p>プログラミングマスターのりんごさんは，このプログラムの欠陥に気が付きました．\nすなわち，Union-Find に一切の高速化が施されていないのです．</p>\n<p>今，りんごさんは <var>N</var> 頂点からなる木 <var>T</var> を持っています．\n<var>T</var> の頂点には <var>0</var> から <var>N-1</var> までの番号が，辺には <var>0</var> から <var>N-2</var> までの番号がついています．\n辺 <var>i</var> は頂点 <var>A_i</var> と頂点 <var>B_i</var> を結ぶ辺です．</p>\n<p>りんごさんは，すぬけくんのプログラムに <var>T</var> を入力として与えようとしています．\nただしその前に，<var>T</var> の辺の番号と，辺の端点の順番を自由に入れ替えることができます．</p>\n<p>りんごさんは，すぬけくんのプログラムが非効率的であることを示すために，<code>find</code> 関数が呼ばれる回数を最大化したいです．\n<code>find</code> 関数が呼ばれる回数の最大値を求めてください．</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>2 \\leq N \\leq 2000</var></li>\n<li><var>0 \\leq A_i,B_i \\leq N-1</var></li>\n<li><var>A_i \\neq B_i</var></li>\n<li>入力されるグラフは木である</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる．</p>\n<pre><var>N</var>\n<var>A_0</var> <var>B_0</var>\n<var>A_1</var> <var>B_1</var>\n<var>\\vdots</var>\n<var>A_{N-2}</var> <var>B_{N-2}</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>答えを出力せよ．</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>2\n0 1\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>2\n</pre>\n<p><code>find</code> 関数は必ず <var>2</var> 回呼ばれます．</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>3\n0 1\n0 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>5\n</pre>\n<p>辺 <var>0</var> の端点の順番を入れ替え，以下のような入力を作ると，<code>find</code> 関数が <var>5</var> 回呼ばれます．</p>\n<pre>3\n1 0\n0 2\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>5\n0 1\n0 2\n0 3\n3 4\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>13\n</pre>\n<p>辺の順番と辺の端点の順番を適切に入れ替え，以下のような入力を作ると，<code>find</code> 関数が <var>13</var> 回呼ばれます．</p>\n<pre>5\n3 0\n4 3\n1 0\n0 2\n</pre>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 4</h3><pre>20\n6 16\n10 6\n16 8\n1 5\n9 4\n5 3\n13 16\n19 10\n12 2\n14 10\n12 18\n0 2\n15 16\n12 7\n11 14\n1 10\n6 4\n17 8\n12 1\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 4</h3><pre>148\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/toyota2023spring-final/tasks/toyota2023spring_final_g"}