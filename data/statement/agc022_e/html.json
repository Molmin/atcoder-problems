{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>1600</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>タイチは、<code>0</code> と <code>1</code> からなる奇数長 <var>N</var> の文字列 <var>X</var> は次の条件を満たすとき <strong>美しい</strong> と考えています。条件：次の操作を <var>\\frac{N-1}{2}</var> 回行って、最終的な文字列の唯一の文字を <code>1</code> にすることができる。</p>\n<ul>\n<li><var>X</var> の <strong>連続する</strong> <var>3</var> つのビットを選び、それらの中央値でそれらを置き換える。例えば、<code>00110</code> の中央の <var>3</var> ビットに操作を適用すると、この文字列は <code>010</code> となる。</li>\n</ul>\n<p>タイチは <code>0</code>、<code>1</code>、<code>?</code> からなる文字列を持っています。この文字列の <code>?</code> をそれぞれ <code>1</code> か <code>0</code> に置き換える方法であって、美しい文字列が得られるものの個数を <var>10^{9} + 7</var> で割った余りをタイチは知りたいです。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq |S| \\leq 300000</var></li>\n<li><var>|S|</var> は奇数である。</li>\n<li><var>S</var> のすべての文字は <code>0</code>、<code>1</code>、<code>?</code> のいずれかである。</li>\n</ul>\n</section>\n</div>\n\n<hr>\n\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は標準入力から以下の形式で与えられる。</p>\n<pre><var>S</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p><code>?</code> を置き換える方法であって、美しい文字列が得られるものの個数を <var>10^{9} + 7</var> で割った余りを出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>1??00\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>2\n</pre>\n\n<p><code>?</code> を <code>0</code> か <code>1</code> で置き換える方法は以下の <var>4</var> 通りあります。</p>\n<ul>\n<li>\n<p><code>11100</code> : この文字列は美しいです。なぜなら、まず最後の <var>3</var> ビットに操作を適用して <code>110</code> とし、次に文字列全体に操作を適用すると <code>1</code> となるからです。</p>\n</li>\n<li>\n<p><code>11000</code> : この文字列は美しいです。なぜなら、まず最後の <var>3</var> ビットに操作を適用して <code>110</code> とし、次に文字列全体に操作を適用すると <code>1</code> となるからです。</p>\n</li>\n<li>\n<p><code>10100</code> : この文字列は美しくありません。なぜなら、最終的に文字列が <code>1</code> となるような操作手順が存在しないからです。</p>\n</li>\n<li>\n<p><code>10000</code> :  この文字列は美しくありません。なぜなら、最終的に文字列が <code>1</code> となるような操作手順が存在しないからです。</p>\n</li>\n</ul>\n<p>よって、美しい文字列を得る方法は <var>2</var> 通りです。</p>\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>?\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>1\n</pre>\n\n<p>この場合、<code>1</code> が唯一の美しい文字列です。</p>\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>?0101???10???00?1???????????????0????????????1????0\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>402589311\n</pre>\n\n<p>答えを <var>10^{9} + 7</var> で割った余りを出力することを忘れずに。</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Taichi thinks a binary string <var>X</var> of odd length <var>N</var> is <strong>beautiful</strong> if it is possible to apply the following operation <var>\\frac{N-1}{2}</var> times so that the only character of the resulting string is <code>1</code> :</p>\n<ul>\n<li>Choose three <strong>consecutive</strong> bits of <var>X</var> and replace them by their median. For example, we can turn <code>00110</code> into <code>010</code> by applying the operation to the middle three bits.</li>\n</ul>\n<p>Taichi has a string <var>S</var> consisting of characters <code>0</code>, <code>1</code> and <code>?</code>. Taichi wants to know the number of ways to replace the question marks with <code>1</code> or <code>0</code> so that the resulting string is beautiful, modulo <var>10^{9} + 7</var>.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 300000</var></li>\n<li><var>|S|</var> is odd.</li>\n<li>All characters of <var>S</var> are either <code>0</code>, <code>1</code> or <code>?</code>.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to replace the question marks so that the resulting string is beautiful, modulo <var>10^{9} + 7</var>.</p>\n</section>\n</div>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1??00\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n\n<p>There are <var>4</var> ways to replace the question marks with <code>0</code> or <code>1</code> :</p>\n<ul>\n<li>\n<p><code>11100</code> : This string is beautiful because we can first perform the operation on the last <var>3</var> bits to get <code>110</code> and then on the only <var>3</var> bits to get <code>1</code>.</p>\n</li>\n<li>\n<p><code>11000</code> : This string is beautiful because we can first perform the operation on the last <var>3</var> bits to get <code>110</code> and then on the only <var>3</var> bits to get <code>1</code>.</p>\n</li>\n<li>\n<p><code>10100</code> : This string is not beautiful because there is no sequence of operations such that the final string is <code>1</code>.</p>\n</li>\n<li>\n<p><code>10000</code> :  This string is not beautiful because there is no sequence of operations such that the final string is <code>1</code>.</p>\n</li>\n</ul>\n<p>Thus, there are <var>2</var> ways to form a beautiful string.</p>\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>?\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n\n<p>In this case, <code>1</code> is the only beautiful string.</p>\n</section>\n</div>\n\n<hr>\n\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>?0101???10???00?1???????????????0????????????1????0\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>402589311\n</pre>\n\n<p>Remember to output your answer modulo <var>10^{9} + 7</var>.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/agc022/tasks/agc022_e"}