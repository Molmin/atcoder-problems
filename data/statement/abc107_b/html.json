{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>200</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>縦 <var>H</var> 行、横 <var>W</var> 列のマス目があります。\n上から <var>i</var> 行目、左から <var>j</var> 列目のマスを <var>(i, j)</var> と表します。\n各マスは白または黒です。\nマス目の配色は、<var>H</var> 行 <var>W</var> 列の行列 <var>(a_{i, j})</var> によって与えられます。\n<var>a_{i, j}</var> が <code>.</code> ならばマス <var>(i, j)</var> は白であり、<var>a_{i, j}</var> が <code>#</code> ならばマス <var>(i, j)</var> は黒です。</p>\n<p>すぬけ君はこのマス目を圧縮しようとしています。\nそのために、白いマスのみからなる行または列が存在する間、次の操作を繰り返し行います。</p>\n<ul>\n<li>操作: 白いマスのみからなる行または列をひとつ任意に選び、その行または列を取り除いて空白を詰める。</li>\n</ul>\n<p>各操作でどの行または列を選ぶかによらず、最終的なマス目は一意に定まることが示せます。\n最終的なマス目を求めてください。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1 \\leq H, W \\leq 100</var></li>\n<li><var>a_{i, j}</var> は <code>.</code> または <code>#</code> である。</li>\n<li>マス目全体で少なくともひとつは黒いマスが存在する。</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>H</var> <var>W</var>\n<var>a_{1, 1}...a_{1, W}</var>\n<var>:</var>\n<var>a_{H, 1}...a_{H, W}</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>最終的なマス目を、入力と同様のフォーマットで出力せよ。\nただし、行数および列数は省くこと。\n詳しくはサンプルを参照せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>4 4\n##.#\n....\n##.#\n.#.#\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>###\n###\n.##\n</pre>\n\n<p>元のマス目における第 <var>2</var> 行および第 <var>3</var> 列がそれぞれ取り除かれます。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>3 3\n#..\n.#.\n..#\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>#..\n.#.\n..#\n</pre>\n\n<p>白いマスのみからなる行または列が存在しないので、操作は行われません。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>4 5\n.....\n.....\n..#..\n.....\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>#\n</pre>\n\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 4</h3><pre>7 6\n......\n....#.\n.#....\n..#...\n..#...\n......\n.#..#.\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 4</h3><pre>..#\n#..\n.#.\n.#.\n#.#\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a grid of squares with <var>H</var> horizontal rows and <var>W</var> vertical columns.\nThe square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left is represented as <var>(i, j)</var>.\nEach square is black or white.\nThe color of the square is given as an <var>H</var>-by-<var>W</var> matrix <var>(a_{i, j})</var>.\nIf <var>a_{i, j}</var> is <code>.</code>, the square <var>(i, j)</var> is white; if <var>a_{i, j}</var> is <code>#</code>, the square <var>(i, j)</var> is black.</p>\n<p>Snuke is compressing this grid.\nHe will do so by repeatedly performing the following operation while there is a row or column that consists only of white squares:</p>\n<ul>\n<li>Operation: choose any one row or column that consists only of white squares, remove it and delete the space between the rows or columns.</li>\n</ul>\n<p>It can be shown that the final state of the grid is uniquely determined regardless of what row or column is chosen in each operation.\nFind the final state of the grid.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H, W \\leq 100</var></li>\n<li><var>a_{i, j}</var> is <code>.</code> or <code>#</code>.</li>\n<li>There is at least one black square in the whole grid.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>a_{1, 1}...a_{1, W}</var>\n<var>:</var>\n<var>a_{H, 1}...a_{H, W}</var>\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the final state of the grid in the same format as input (without the numbers of rows and columns); see the samples for clarity.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 4\n##.#\n....\n##.#\n.#.#\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>###\n###\n.##\n</pre>\n\n<p>The second row and the third column in the original grid will be removed.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n#..\n.#.\n..#\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>#..\n.#.\n..#\n</pre>\n\n<p>As there is no row or column that consists only of white squares, no operation will be performed.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 5\n.....\n.....\n..#..\n.....\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>#\n</pre>\n\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>7 6\n......\n....#.\n.#....\n..#...\n..#...\n......\n.#..#.\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>..#\n#..\n.#.\n.#.\n#.#\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/abc107/tasks/abc107_b"}