{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>600</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>N</var> 頂点の有向グラフがあります。<var>N</var> 個の頂点はそれぞれ頂点 <var>1</var> 、頂点 <var>2</var> 、<var>\\ldots</var>、頂点 <var>N</var> と呼ばれます。\n時刻 <var>0</var> には、このグラフには辺がありません。</p>\n<p><var>t = 1, 2, \\ldots, T</var> について、時刻 <var>t</var> に頂点 <var>u_t</var> から頂点 <var>v_t</var> への有向辺が追加されます。\n（追加される辺が自己ループである場合、すなわち <var>u_t = v_t</var> の場合もあります。）</p>\n<p>頂点 <var>1</var> から始め「現在いる頂点からちょうど <var>1</var> 本の有向辺をたどって到達できる頂点を <var>1</var> つ選び、選んだ頂点に移動する」ことを<strong>ちょうど</strong> <var>L</var> 回繰り返して到達できる頂点を「良い頂点」と呼びます。</p>\n<p><var>i = 1, 2, \\ldots, N</var> について、頂点 <var>i</var> が良い頂点となる最小の時刻を出力してください。ただし、頂点 <var>i</var> が良い頂点となる時刻が存在しない場合は、代わりに <var>-1</var> を出力してください。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>2 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq T \\leq N^2</var></li>\n<li><var>1 \\leq L \\leq 10^9</var></li>\n<li><var>1 \\leq u_t, v_t \\leq N</var></li>\n<li><var>i \\neq j \\Rightarrow (u_i, v_i) \\neq (u_j, v_j)</var></li>\n<li>入力はすべて整数</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>N</var> <var>T</var> <var>L</var>\n<var>u_1</var> <var>v_1</var>\n<var>u_2</var> <var>v_2</var>\n<var>\\vdots</var>\n<var>u_T</var> <var>v_T</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>下記の形式の通り、<var>i = 1, 2, \\ldots, N</var> について、頂点 <var>i</var> が良い頂点となる最小の時刻 <var>X_i</var> を出力せよ。ただし、頂点 <var>i</var> が良い頂点となる時刻が存在しない場合は、<var>X_i = -1</var> とせよ。</p>\n<pre><var>X_1</var> <var>X_2</var> <var>\\ldots</var> <var>X_N</var>\n</pre>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>4 5 3\n2 3\n3 4\n1 2\n3 2\n2 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>-1 4 5 3\n</pre>\n<p>時刻 <var>0</var> ではグラフは辺を持ちません。その後、以下の通りに辺の追加が行われます。</p>\n<ul>\n<li>時刻 <var>1</var> に、頂点 <var>2</var> から頂点 <var>3</var> への有向辺が追加されます。</li>\n<li>時刻 <var>2</var> に、頂点 <var>3</var> から頂点 <var>4</var> への有向辺が追加されます。</li>\n<li>時刻 <var>3</var> に、頂点 <var>1</var> から頂点 <var>2</var> への有向辺が追加されます。これによって、頂点 <var>1</var> から頂点 <var>4</var> に <var>1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4</var> とちょうど <var>3</var> 回の移動で到達できるようになり、頂点 <var>4</var> は良い頂点に変わります。</li>\n<li>時刻 <var>4</var> に、頂点 <var>3</var> から頂点 <var>2</var> への有向辺が追加されます。これによって、頂点 <var>1</var> から頂点 <var>2</var> に <var>1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 2</var> とちょうど <var>3</var> 回の移動で到達できるようになり、頂点 <var>2</var> は良い頂点に変わります。</li>\n<li>時刻 <var>5</var> に、頂点 <var>2</var> から頂点 <var>2</var> への有向辺（自己ループ）が追加されます。これによって、頂点 <var>1</var> から頂点 <var>3</var> に <var>1 \\rightarrow 2 \\rightarrow 2 \\rightarrow 3</var> とちょうど <var>3</var> 回の移動で到達できるようになり、頂点 <var>3</var> は良い頂点に変わります。</li>\n</ul>\n<p>頂点 <var>1</var> が良い頂点となることはありません。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>2 1 1000000000\n1 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>-1 -1\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a directed graph with <var>N</var> vertices.\nThe <var>N</var> vertices are called Vertex <var>1</var>, Vertex <var>2</var>, <var>\\ldots</var>, Vertex <var>N</var>.\nAt time <var>0</var>, the graph has no edge.</p>\n<p>For each <var>t = 1, 2, \\ldots, T</var>, at time <var>t</var>, a directed edge from Vertex <var>u_t</var> to Vertex <var>v_t</var> will be added.\n(The edge may be a self-loop, that is, <var>u_t = v_t</var> may hold.)</p>\n<p>A vertex is called <em>good</em> when it can be reached by starting at Vertex <var>1</var> and traversing an edge <strong>exactly</strong> <var>L</var> times.</p>\n<p>For each <var>i = 1, 2, \\ldots, N</var>, print the earliest time when Vertex <var>i</var> is good. If there is no time when Vertex <var>i</var> is good, print <var>-1</var> instead.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq T \\leq N^2</var></li>\n<li><var>1 \\leq L \\leq 10^9</var></li>\n<li><var>1 \\leq u_t, v_t \\leq N</var></li>\n<li><var>i \\neq j \\Rightarrow (u_i, v_i) \\neq (u_j, v_j)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>T</var> <var>L</var>\n<var>u_1</var> <var>v_1</var>\n<var>u_2</var> <var>v_2</var>\n<var>\\vdots</var>\n<var>u_T</var> <var>v_T</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>In the following format, for each <var>i = 1, 2, \\ldots, N</var>, print the earliest time <var>X_i</var> when Vertex <var>i</var> is good. If there is no time when Vertex <var>i</var> is good, <var>X_i</var> should be <var>-1</var>.</p>\n<pre><var>X_1</var> <var>X_2</var> <var>\\ldots</var> <var>X_N</var>\n</pre>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 5 3\n2 3\n3 4\n1 2\n3 2\n2 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>-1 4 5 3\n</pre>\n<p>At time <var>0</var>, the graph has no edge. Afterward, edges are added as follows.</p>\n<ul>\n<li>At time <var>1</var>, a directed edge from Vertex <var>2</var> to Vertex <var>3</var> is added.</li>\n<li>At time <var>2</var>, a directed edge from Vertex <var>3</var> to Vertex <var>4</var> is added.</li>\n<li>At time <var>3</var>, a directed edge from Vertex <var>1</var> to Vertex <var>2</var> is added. Now, Vertex <var>4</var> can be reached from Vertex <var>1</var> in exactly three moves: <var>1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4</var>, making Vertex <var>4</var> good.</li>\n<li>At time <var>4</var>, a directed edge from Vertex <var>3</var> to Vertex <var>2</var> is added. Now, Vertex <var>2</var> can be reached from Vertex <var>1</var> in exactly three moves: <var>1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 2</var>, making Vertex <var>2</var> good.</li>\n<li>At time <var>5</var>, a directed edge (self-loop) from Vertex <var>2</var> to Vertex <var>2</var> is added. Now, Vertex <var>3</var> can be reached from Vertex <var>1</var> in exactly three moves: <var>1 \\rightarrow 2 \\rightarrow 2 \\rightarrow 3</var>, making Vertex <var>3</var> good.</li>\n</ul>\n<p>Vertex <var>1</var> will never be good.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 1 1000000000\n1 2\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1 -1\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/abc236/tasks/abc236_g"}