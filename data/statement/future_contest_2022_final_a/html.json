{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p>F社はロボット掃除機「お掃除高橋くん」を開発している。\nこのロボットは基礎命令と繰り返し処理のみからなる以下の形式のプログラムによって動作する。</p>\n<h4>基礎命令</h4>\n<ul>\n<li><code>L</code>: 90度左を向く</li>\n<li><code>R</code>: 90度右を向く</li>\n<li><code>l</code>: 現在向いている方向が壁ならば90度左を向く</li>\n<li><code>r</code>: 現在向いている方向が壁ならば90度右を向く</li>\n<li><code>F</code>: 現在向いている方向が壁でないなら1マス前進する</li>\n</ul>\n<h4>繰り返し処理</h4>\n<p>基礎命令の前に正の整数値を書くと、その整数値の回数だけ基礎命令を繰り返す。\n例えば、<code>RFFFFFFFFFF</code> というプログラムは <code>R10F</code> と短縮して書くことが出来る。\nプログラムは<code>()</code>によりグループ化することが出来る。\nグループの前に正の整数値を書くと、その整数値の回数だけ<code>()</code>内のプログラムを繰り返す。\n例えば、<code>RFRFRFLRFRFRFL</code>というプログラムは <code>2(3(RF)L)</code> と短縮して書くことが出来る。</p>\n<p>掃除したいフロアは <var>N\\times N</var> マスに区切られ、外周は壁に囲まれており、隣接するマスとマスの間にも壁がある場合がある。\n一番左上のマスの座標を <var>(0, 0)</var> とし、そこから下方向に <var>i</var> マス、右方向に <var>j</var> マス進んだ先のマスの座標を <var>(i,j)</var> とする。\nロボットは <var>(s_i,s_j)</var> のマスで上方向を向いた状態から掃除を開始する。\n初期位置を含め、ロボットが一度でも移動したマスは掃除済みとなる。</p>\n<p>全てのマスを掃除できるような短いプログラムを作成してほしい。\n基礎命令を1つ実行するのに1単位時間かかり、<var>5000</var> 単位時間以内で掃除を完了しなければならない。\n出力されたプログラムが <var>5000</var> 単位時間で終了しない場合は <var>5000</var> 個目の基礎命令を実行後に打ち切られて停止する。\n壁を向いて居ない状態で基礎命令 <code>l</code> もしくは <code>r</code> を実行した場合や、壁を向いた状態で基礎命令 <code>F</code> を実行した場合にも1単位時間がかかる。\n<var>5000</var> 個目の基礎命令によって移動した先のマスも掃除済みとなる。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>得点</h3><p>出力されたプログラムの文字数を <var>L</var>、プログラムの実行が終了もしくは <var>5000</var> 単位時間が経過して停止した時点で掃除済みのマスの数を <var>M</var> とする。\n<var>L</var> は文字数であり、基礎命令数ではないことに注意せよ。\n例えば、<code>100(RF)</code> というプログラムは基礎命令を <var>200</var> 回実行するが、文字数は <var>L=7</var> である。</p>\n<ul>\n<li><var>L&gt;10000</var> もしくは出力が正しい形式のプログラムで無い場合、<span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"不正解\">WA</span> と判定される。</li>\n<li><var>M=N^2</var> の場合、<var>N^2 + \\mathrm{round}(10^8/(100+L))</var> の得点が得られる。</li>\n<li><var>M&lt;N^2</var> の場合、<var>M</var> の得点が得られる。</li>\n</ul>\n<p>テストケースは全部で 100 個あり、各テストケースの得点の合計が提出の得点となる。\n1つ以上のテストケースで <span class=\"label label-success\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"正解\">AC</span> 以外の判定がされた場合、提出の得点は0点となる。\nコンテスト時間中に得た最高得点で最終順位が決定され、コンテスト終了後のシステムテストは行われない。\n同じ得点を複数の参加者が得た場合、その得点を獲得した提出の早い方が上位となる。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>s_i</var> <var>s_j</var>\n<var>h_{0,0}</var> <var>\\cdots</var> <var>h_{0,N-2}</var>\n<var>\\vdots</var>\n<var>h_{N-1,0}</var> <var>\\cdots</var> <var>h_{N-1,N-2}</var>\n<var>v_{0,0}</var> <var>\\cdots</var> <var>v_{0,N-1}</var>\n<var>\\vdots</var>\n<var>v_{N-2,0}</var> <var>\\cdots</var> <var>v_{N-2,N-1}</var>\n</pre>\n\n<p>フロアの広さを表す <var>N</var> は、全てのテストケースで <var>N=20</var> で固定である。\n<var>(s_i,s_j)</var> はロボットの初期位置を表し、<var>0\\leq s_i, s_j\\leq N-1</var> を満たす。</p>\n<p><var>h_{i,0}</var> <var>\\cdots</var> <var>h_{i,N-2}</var> は <var>0</var> もしくは <var>1</var> のみからなる <var>N-1</var> 文字の文字列であり、<var>(i,j)</var> と <var>(i,j+1)</var> のマスの間に壁がある場合は <var>h_{i,j}=1</var>、無い場合は <var>h_{i,j}=0</var> である。\n<var>v_{i,0}</var> <var>\\cdots</var> <var>v_{i,N-1}</var> は <var>0</var> もしくは <var>1</var> のみからなる <var>N</var> 文字の文字列であり、<var>(i,j)</var> と <var>(i+1,j)</var> のマスの間に壁がある場合は <var>v_{i,j}=1</var>、無い場合は <var>v_{i,j}=0</var> である。\n全てのマスは初期位置から到達可能であることが保証されている。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>ロボットを動かすプログラムを1行で標準出力に出力せよ。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入力生成方法</h3><h4><var>s_i</var>, <var>s_j</var> の生成</h4>\n<p><var>s_i</var> と <var>s_j</var> は <var>0</var> 以上 <var>N-1</var> 以下の一様ランダムな整数から生成される。</p>\n<h4><var>h_{i,j}</var>, <var>v_{i,j}</var> の生成</h4>\n<p><var>[k]=\\{0,1,\\cdots,k-1\\}</var> と定義する。\n<var>N^2</var> 個の孤立点 <var>V=[N]\\times[N]</var> から開始し、以下の処理を行うことでグラフ <var>G=(V,E)</var> を作成する。</p>\n<ol>\n<li>まず、辺集合 <var>\\{\\{(i,j),(i,j+1)\\}\\mid i\\in[N],j\\in[N-1]\\}\\cup\\{\\{(i,j),(i+1,j)\\}\\mid i\\in[N-1],j\\in[N]\\}</var> をランダムな順番にシャッフルして <var>e_0,\\cdots,e_{2N^2-2N-1}</var> とする。</li>\n<li><var>k=0</var> から <var>k=2N^2-2N-1</var> まで順番に、各 <var>e_k=\\{(i,j),(i',j')\\}</var> に対して、<var>(i,j)</var> と <var>(i',j')</var> が <var>G</var> 上で連結でないならば <var>e_k</var> を <var>E</var> に加える。</li>\n<li>もう一度、<var>k=0</var> から <var>k=2N^2-2N-1</var> まで順番に、各 <var>e_k=\\{(i,j),(i',j')\\}</var> に対して、<var>(i,j)</var> の次数が <var>1</var> もしくは <var>(i',j')</var> の次数が <var>1</var> ならば、辺 <var>e_k</var> を <var>E</var> に加える。</li>\n</ol>\n<p>得られたグラフを用いて、<var>h</var> と <var>v</var> を以下のように設定する。</p>\n<ul>\n<li><var>h_{i,j}=0 \\iff \\{(i,j),(i,j+1)\\}\\in E</var></li>\n<li><var>v_{i,j}=0 \\iff \\{(i+1,j),(i,j)\\}\\in E</var></li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>ツール(入力ジェネレータ・ビジュアライザ)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/future-contest-2022-final/e4ace3a9dfd2d994ac246560e10d2f4e.zip\">ローカル版</a>: 使用するには<a href=\"https://www.rust-lang.org/ja\">Rust言語</a>のコンパイル環境をご用意下さい。</li>\n<li><a href=\"https://img.atcoder.jp/future-contest-2022-final/e4ace3a9dfd2d994ac246560e10d2f4e.html\">Web版</a>: ローカル版より高性能でアニメーション表示が可能です。</li>\n</ul>\n<p><font color=\"red\"><strong>コンテスト終了までビジュアライズ結果の共有は禁止されています。ご注意下さい。</strong></font>\n<!-- <font color=\"red\">コンテスト期間中に、seed=0 に対するビジュアライズ結果をWebビジュアライザの「share on twitter」機能を用いて共有が可能です。</font>\n必ず指定されたハッシュタグを用い、公開アカウントを使用して下さい。\n他のSeedに対するビジュアライズ結果や、どのようにその出力を得たか、解法、ソースコード等の共有はコンテスト終了まで禁止されています。ご注意下さい。\n<a href=\"https://twitter.com/search?q=%23HTTF%20share_visualizer&src=typed_query&f=live\">共有されたビジュアライズ結果の一覧</a> --></p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">14 18\n0000000000000010000\n0001000001000110100\n0010010001010101000\n0011100000110100010\n0011100000001001010\n0001011000001101000\n0010000000010100010\n0011001000000000100\n1101010010010100000\n1001010110000010100\n1001110101010010100\n0000101000101100101\n1010000100101010110\n0000101100100001110\n1001100100000000010\n0011000100010100011\n0010010000011001001\n1101010011001000000\n1011000001001001010\n0001000101000010100\n00101001010100000010\n00100001100111000101\n10000111000000010100\n00000001011000101000\n01000100011100010010\n11011001101100001101\n00101110101010111000\n00000000101000100111\n00101001011101010010\n00000010000110100010\n00110001010000001010\n01100000110000110000\n00011100000011000000\n01010000101101110010\n00100110001011010000\n10000100101000110100\n00100001100100001010\n00000101001101111001\n01000010000010000000\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">10(RlFlF)LFF2(3(RF)L)R10FRFR5FLFFFR4FR3FL3FR2FL2FLFFFLFFFRFFR3FRFRFFRFL2FL2FRFR2FL5FFFFFFFFFFL2FL2FR4FRFFL9FL2FRFRFFL3FL3FLFFFFFLFFL4FLFLFRFLFR2FRFRFL2FL3FLFR2FRFRFR2FLFFLFRFFR3FFFLFFFRFRFRFL2FR2FL3FRFL4FLFFR6FRFRFFFRFL4FFFLFL2FRRFL2FRR4FFRFRFR2FRFR2FLFFFR4FLFRF4FR9FRFFFFFFRFFLFL3FRFFLFL4FLFRFRFLFLFRFRFL2FLFLFLFRFR3FRFLFLLFR2FR3FFFLFFRFLFFL2FRFLFL4FLFLLFRFRFLFRF2FL4FLFRFLFLFRR2FL3FRFFRFRFLFFFRFLFLFRFFLFFLFLFR4FRFFRFRFLFFLL2FR2FFRFFFFRFRFLFR2FRFRFRFL2FFR8FR2FRFFRF2FR3FRFLFR2FRFRFL2F2FFLFLFRF2FRFL5FRFLL4FRFLFFL2FRFRFL2FRFL4FL4FLFRFFLFL2FRR3FFRFFRFRFFR2FLFL2FRFRFRFL2FL7FR2FLFFLLFL3FRFLFLFFFFFL4FLFRFLFLFFR5FL2FLFRFR3FLFL7FL2FLF2FLFL4FLFR2FL3FR2FFRFFRFRFRR3FR2FLFR11FR3FLFRFRFL2FL3FRFL2FLFLFRFL2FRFLLFL3FLFLFRFFL2FLFRFLFRFLFLFRRFRFLFL4FRFLFR2FLFLFRF2FLFRFL4FR2FLFR2FRFLFRFRFL2F\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>F Corporation is developing a robotic vacuum cleaner, Takahashi-kun cleaner.\nThis robot works with a program of the following form, which consists of only basic commands and repetitions.</p>\n<h4>Basic Commands</h4>\n<ul>\n<li><code>L</code>: Turn left by 90 degrees.</li>\n<li><code>R</code>: Turn right by 90 degrees.</li>\n<li><code>l</code>: If the robot is facing a wall, turn left by 90 degrees.</li>\n<li><code>r</code>: If the robot is facing a wall, turn right by 90 degrees</li>\n<li><code>F</code>: If the robot is not facing a wall, move forward one square.</li>\n</ul>\n<h4>Repetitions</h4>\n<p>By writing a positive integer <var>k</var> before a basic command, the basic command will be repeated <var>k</var> times.\nFor example, the program <code>RFFFFFFFFFF</code> can be shortened to <code>R10F</code>.\nPrograms can be grouped by <code>()</code>.\nBy writing a positive integer <var>k</var> before a group, the program in the group will be repeated <var>k</var> times.\nFor example, the program <code>RFRFRFLRFRFRFL</code> can be shortened to <code>2(3(RF)L)</code>.</p>\n<p>The floor to be cleaned is divided into <var>N\\times N</var> squares and is surrounded by walls. There may also be walls between adjacent squares.\nLet <var>(0,0)</var> denote the top-left square, and <var>(i,j)</var> denote the square at the <var>i</var>-th row from the top and <var>j</var>-th column from the left.\nThe robot starts cleaning in the square <var>(s_i,s_j)</var> facing upward.\nThe robot will clean all the visited squares, including the initial position.</p>\n<p>Your task is to output a short program that can clean all the squares.\nThe robot takes one unit of time to execute one basic command, and the cleaning must be completed within <var>5000</var> unit of time.\nIf the output program does not finish in <var>5000</var> unit time, it will be terminated after executing the <var>5000</var>th basic command.\nIt also takes one unit of time to execute the basic command <code>l</code> or <code>r</code> without facing the wall, or to execute the basic command <code>F</code> with facing the wall.\nThe robot will also clean the square that it moves to by the <var>5000</var>th basic command.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3><p>Let <var>L</var> be the number of characters in the output program, and <var>M</var> be the number of squares that has been cleaned when the program execution is completed or terminated after <var>5000</var> unit time.\nNote that <var>L</var> is the number of characters, not the number of basic commands.\nFor example, the program <code>100(RF)</code> executes the basic commands <var>200</var> times, but the number of characters is <var>L=7</var>.</p>\n<ul>\n<li>If <var>L&gt;10000</var> or your output is not a valid program, your submission will be judged as <span class=\"label label-warning\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Wrong Answer\">WA</span></li>\n<li>If <var>M=N^2</var>, you will get a score of <var>N^2 + \\mathrm{round}(10^8/(100+L))</var>.</li>\n<li>If <var>M&lt;N^2</var>, you will get a score of <var>M</var>.</li>\n</ul>\n<p>There are 100 test cases, and the score of a submission is the total score for each test case. If you get a result other than <span class=\"label label-success\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Accepted\">AC</span> for one or more test cases, the score of the submission will be zero. The highest score obtained during the contest time will determine the final ranking, and there will be no system test after the contest. If more than one participant gets the same score, the ranking will be determined by the submission time of the submission that received that score.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s_i</var> <var>s_j</var>\n<var>h_{0,0}</var> <var>\\cdots</var> <var>h_{0,N-2}</var>\n<var>\\vdots</var>\n<var>h_{N-1,0}</var> <var>\\cdots</var> <var>h_{N-1,N-2}</var>\n<var>v_{0,0}</var> <var>\\cdots</var> <var>v_{0,N-1}</var>\n<var>\\vdots</var>\n<var>v_{N-2,0}</var> <var>\\cdots</var> <var>v_{N-2,N-1}</var>\n</pre>\n\n<p>We fix <var>N=20</var> for all test cases.\n<var>(s_i,s_j)</var> represents the initial position of the robot and satisfies <var>0\\leq s_i, s_j\\leq N-1</var>.</p>\n<p><var>h_{i,0}</var> <var>\\cdots</var> <var>h_{i,N-2}</var> is a string of <var>N-1</var> characters consisting of only <var>0</var> or <var>1</var>.\nIf there is a wall between the squares <var>(i,j)</var> and <var>(i,j+1)</var>, then <var>h_{i,j}=1</var>, otherwise <var>h_{i,j}=0</var>.\n<var>v_{i,0}</var> <var>\\cdots</var> <var>v_{i,N-1}</var> is a string of <var>N</var> characters consisting of only <var>0</var> or <var>1</var>.\nIf there is a wall between the squares <var>(i,j)</var> and <var>(i+1,j)</var>, then <var>v_{i,j}=1</var>, otherwise <var>v_{i,j}=0</var>.\nIt is guaranteed that all squares are reachable from the initial position.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Output a program to operate the robot in one line to Standard Output.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Generation</h3><h4>Generation of <var>s_i</var> and <var>s_j</var></h4>\n<p><var>s_i</var> and <var>s_j</var> are generated from uniform random integers between <var>0</var> and <var>N-1</var>, inclusive.</p>\n<h4>Generation of <var>h_{i,j}</var> and <var>v_{i,j}</var></h4>\n<p>Let <var>[k]=\\{0,1,\\cdots,k-1\\}</var>.\nStarting from <var>N^2</var> isolated vertices <var>V=[N]\\times[N]</var>, we generate a graph <var>G=(V,E)</var> by the following process.</p>\n<ol>\n<li>First, we randomly shuffle a set of edges <var>\\{\\{(i,j),(i,j+1)\\}\\mid i\\in[N],j\\in[N-1]\\}\\cup\\{\\{(i,j),(i+1,j)\\}\\mid i\\in[N-1],j\\in[N]\\}</var> and obtain an ordered edge list <var>e_0,\\cdots,e_{2N^2-2N-1}</var>.</li>\n<li>For each <var>e_k=\\{(i,j),(i',j')\\}</var> in order from <var>k=0</var> to <var>k=2N^2-2N-1</var>, we insert <var>e_k</var> into <var>E</var> if <var>(i,j)</var> and <var>(i',j')</var> are not connected in <var>G</var>.</li>\n<li>For each <var>e_k=\\{(i,j),(i',j')\\}</var> again in order from <var>k=0</var> to <var>k=2N^2-2N-1</var>, we insert <var>e_k</var> into <var>E</var> if the degree of <var>(i,j)</var> is <var>1</var> or the degree of <var>(i',j')</var> is <var>1</var>.</li>\n</ol>\n<p>Using the generated graph, we generate <var>h</var> and <var>v</var> as follows.</p>\n<ul>\n<li><var>h_{i,j}=0 \\iff \\{(i,j),(i,j+1)\\}\\in E</var></li>\n<li><var>v_{i,j}=0 \\iff \\{(i+1,j),(i,j)\\}\\in E</var></li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Tools (Input generator and visualizer)</h3><ul>\n<li><a href=\"https://img.atcoder.jp/future-contest-2022-final/e4ace3a9dfd2d994ac246560e10d2f4e.zip\">Local version</a>: You need a compilation environment of <a href=\"https://www.rust-lang.org/\">Rust language</a>.</li>\n<li><a href=\"https://img.atcoder.jp/future-contest-2022-final/e4ace3a9dfd2d994ac246560e10d2f4e_en.html\">Web version</a>: This is more powerful than the local version and can display animations.</li>\n</ul>\n<p><font color=\"red\"><strong>Sharing visualization results is not allowed until the end of the contest.</strong></font>\n<!-- <font color=\"red\">You are allowed to share visualization results for seed=0 using the \"share on twitter\" function of the web visualizer during the contest.</font>\nYou have to use the specified hashtag and public account.\nNote that it is prohibited to share outputs for other seeds, information about how you obtained that output, solutions, discussions, or source code until the end of the contest.\n<a href=\"https://twitter.com/search?q=%23HTTF%20share_visualizer&src=typed_query&f=live\">List of shared visualization results</a> --></p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">14 18\n0000000000000010000\n0001000001000110100\n0010010001010101000\n0011100000110100010\n0011100000001001010\n0001011000001101000\n0010000000010100010\n0011001000000000100\n1101010010010100000\n1001010110000010100\n1001110101010010100\n0000101000101100101\n1010000100101010110\n0000101100100001110\n1001100100000000010\n0011000100010100011\n0010010000011001001\n1101010011001000000\n1011000001001001010\n0001000101000010100\n00101001010100000010\n00100001100111000101\n10000111000000010100\n00000001011000101000\n01000100011100010010\n11011001101100001101\n00101110101010111000\n00000000101000100111\n00101001011101010010\n00000010000110100010\n00110001010000001010\n01100000110000110000\n00011100000011000000\n01010000101101110010\n00100110001011010000\n10000100101000110100\n00100001100100001010\n00000101001101111001\n01000010000010000000\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre style=\"max-height:200px;overflow-y:scroll\">10(RlFln</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/future-contest-2022-final-open/tasks/future_contest_2022_final_a"}