{"html":{"ja":"<span class=\"lang-ja\">\n<p>配点 : <var>400</var> 点</p>\n\n<div class=\"part\">\n<section>\n<h3>問題文</h3><p><var>H</var> 行 <var>W</var> 列のグリッドがあります。\n上から <var>i</var> 行目、左から <var>j</var> 列目のマスを <var>(i,j)</var> と表記します。</p>\n<p>各マスはスタートマス・ゴールマス・空きマス・障害物マスのいずれかであり、その情報は <var>H</var> 個の長さ <var>W</var> の文字列 <var>S_1,S_2,\\dots,S_H</var> によって表されます。\n具体的には、マス <var>(i,j)</var> は <var>S_i</var> の <var>j</var> 文字目が <code>S</code> であるときスタートマス、<code>G</code> であるときゴールマス、<code>.</code> であるとき空きマス、<code>#</code> であるとき障害物マスです。\nここで、スタートマスとゴールマスはちょうど <var>1</var> つずつ存在することが保証されます。</p>\n<p>あなたは今スタートマスにいます。\nあなたの目標は、今いるマスと辺で隣接するマスに移動することを繰り返してゴールマスへ行くことです。\nただし、障害物マスやグリッドの外に移動することはできず、また縦移動と横移動を <var>1</var> 回ずつ交互に行わなければなりません。（最初の移動の向きは任意です。）</p>\n<p>ゴールマスへ行くことが可能であるか判定し、可能ならば移動回数の最小値を求めてください。</p>\n<p>より形式的には、以下の条件をすべて満たすマスの列 <var>(i_1,j_1),(i_2,j_2),\\dots,(i_k,j_k)</var> が存在するか判定し、存在するならば <var>k-1</var> の最小値を求めてください。</p>\n<ul>\n<li>すべての <var>1\\leq l\\leq k</var> について、<var>1\\leq i_l\\leq H</var> かつ <var>1\\leq j_l\\leq W</var> であり、<var>(i_l,j_l)</var> は障害物マスでない</li>\n<li><var>(i_1,j_1)</var> はスタートマス</li>\n<li><var>(i_k,j_k)</var> はゴールマス</li>\n<li>すべての <var>1\\leq l\\leq k-1</var> について、<var>|i_l-i_{l+1}|+|j_l-j_{l+1}|=1</var></li>\n<li>すべての <var>1\\leq l\\leq k-2</var> について、<var>i_l\\neq i_{l+1}</var> ならば <var>i_{l+1}=i_{l+2}</var></li>\n<li>すべての <var>1\\leq l\\leq k-2</var> について、<var>j_l\\neq j_{l+1}</var> ならば <var>j_{l+1}=j_{l+2}</var></li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li><var>1\\leq H,W \\leq 1000</var></li>\n<li><var>H,W</var> は整数</li>\n<li><var>S_i</var> は <code>S</code>, <code>G</code>, <code>.</code>, <code>#</code> からなる長さ <var>W</var> の文字列</li>\n<li>スタートマスとゴールマスはちょうど <var>1</var> つずつ存在する</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で標準入力から与えられる。</p>\n<pre><var>H</var> <var>W</var>\n<var>S_1</var>\n<var>S_2</var>\n<var>\\vdots</var>\n<var>S_H</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>ゴールマスへ行くことが可能ならば移動回数の最小値を、不可能ならば <code>-1</code> を出力せよ。</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 1</h3><pre>3 5\n.S#.G\n.....\n.#...\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 1</h3><pre>7\n</pre>\n<p><img src=\"https://img.atcoder.jp/abc387/6ef2f123adae6bc6bb157af8f30afe89.png\" width=\"700\"></p>\n<p>左図のように <var>(1,2)\\rightarrow(2,2)\\rightarrow(2,3)\\rightarrow(3,3)\\rightarrow(3,4)\\rightarrow(2,4)\\rightarrow(2,5)\\rightarrow(1,5)</var> と移動することで、<var>7</var> 回の移動でゴールマスへ行くことができます。\n<var>6</var> 回以下の移動でゴールマスへ行くことはできないので、答えは <var>7</var> です。</p>\n<p>右図のように横移動を連続で行う経路（あるいは縦移動を連続で行う経路）はとれないことに注意してください。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 2</h3><pre>3 5\n..#.G\n.....\nS#...\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 2</h3><pre>-1\n</pre>\n<p>ゴールマスへ行くことはできません。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例 3</h3><pre>8 63\n...............................................................\n..S...#............................#####..#####..#####..####G..\n..#...#................................#..#...#......#..#......\n..#####..####...####..####..#..#...#####..#...#..#####..#####..\n..#...#..#..#...#..#..#..#..#..#...#......#...#..#..........#..\n..#...#..#####..####..####..####...#####..#####..#####..#####..\n................#.....#........#...............................\n................#.....#........#...............................\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例 3</h3><pre>148\n</pre></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a grid with <var>H</var> rows and <var>W</var> columns.\nLet <var>(i,j)</var> denote the cell at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left.</p>\n<p>Each cell is one of the following: a start cell, a goal cell, an empty cell, or an obstacle cell. This information is described by <var>H</var> strings <var>S_1,S_2,\\dots,S_H</var>, each of length <var>W</var>. Specifically, the cell <var>(i,j)</var> is a start cell if the <var>j</var>-th character of <var>S_i</var> is <code>S</code>, a goal cell if it is <code>G</code>, an empty cell if it is <code>.</code>, and an obstacle cell if it is <code>#</code>. It is guaranteed that there is exactly one start cell and exactly one goal cell.</p>\n<p>You are currently on the start cell.\nYour objective is to reach the goal cell by repeatedly moving to a cell adjacent by an edge to the one you are in.\nHowever, you cannot move onto an obstacle cell or move outside the grid, and you must alternate between moving vertically and moving horizontally each time. (The direction of the first move can be chosen arbitrarily.)</p>\n<p>Determine if it is possible to reach the goal cell. If it is, find the minimum number of moves required.</p>\n<p>More formally, check if there exists a sequence of cells <var>(i_1,j_1),(i_2,j_2),\\dots,(i_k,j_k)</var> satisfying all of the following conditions. If such a sequence exists, find the minimum value of <var>k-1</var>.</p>\n<ul>\n<li>For every <var>1 \\leq l \\leq k</var>, it holds that <var>1 \\leq i_l \\leq H</var> and <var>1 \\leq j_l \\leq W</var>, and <var>(i_l,j_l)</var> is not an obstacle cell.</li>\n<li><var>(i_1,j_1)</var> is the start cell.</li>\n<li><var>(i_k,j_k)</var> is the goal cell.</li>\n<li>For every <var>1 \\leq l \\leq k-1</var>, <var>|i_l - i_{l+1}| + |j_l - j_{l+1}| = 1</var>.</li>\n<li>For every <var>1 \\leq l \\leq k-2</var>, if <var>i_l \\neq i_{l+1}</var>, then <var>i_{l+1} = i_{l+2}</var>. </li>\n<li>For every <var>1 \\leq l \\leq k-2</var>, if <var>j_l \\neq j_{l+1}</var>, then <var>j_{l+1} = j_{l+2}</var>.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H,W \\leq 1000</var></li>\n<li><var>H</var> and <var>W</var> are integers.</li>\n<li>Each <var>S_i</var> is a string of length <var>W</var> consisting of <code>S</code>, <code>G</code>, <code>.</code>, <code>#</code>.</li>\n<li>There is exactly one start cell and exactly one goal cell.</li>\n</ul>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>S_1</var>\n<var>S_2</var>\n<var>\\vdots</var>\n<var>S_H</var>\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible to reach the goal cell, print the minimum number of moves. Otherwise, print <code>-1</code>.</p>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 5\n.S#.G\n.....\n.#...\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p><img src=\"https://img.atcoder.jp/abc387/6ef2f123adae6bc6bb157af8f30afe89.png\" width=\"700\"></p>\n<p>As shown in the left figure, you can move as <var>(1,2)\\rightarrow(2,2)\\rightarrow(2,3)\\rightarrow(3,3)\\rightarrow(3,4)\\rightarrow(2,4)\\rightarrow(2,5)\\rightarrow(1,5)</var>, reaching the goal cell in <var>7</var> moves.\nIt is impossible in <var>6</var> moves or fewer, so the answer is <var>7</var>.</p>\n<p>Note that you cannot take a path that moves horizontally (or vertically) consecutively without alternating as shown in the right figure.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 5\n..#.G\n.....\nS#...\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>It is not possible to reach the goal cell.</p>\n</section>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 63\n...............................................................\n..S...#............................#####..#####..#####..####G..\n..#...#................................#..#...#......#..#......\n..#####..####...####..####..#..#...#####..#...#..#####..#####..\n..#...#..#..#...#..#..#..#..#..#...#......#...#..#..........#..\n..#...#..#####..####..####..####...#####..#####..#####..#####..\n................#.....#........#...............................\n................#.....#........#...............................\n</pre>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>148\n</pre></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/abc387/tasks/abc387_d"}