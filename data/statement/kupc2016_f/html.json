{"html":{"ja":"<span class=\"lang-ja\">\n    <p>配点 : <var>150</var> 点</p>\n\n    <div class=\"part\">\n      <section>\n        <h3>問題文</h3>\n        <p>\n          京都大学で飼育されているゴリラ達は数学が得意である。\n          彼らは今、 2 つの関数 <code>_</code>、 <code>^</code> を含む式の値を求める問題を解いている。\n          これらの関数は 2 入力関数であり、 <code>_</code> 関数は入力の小さい方の値を、 <code>^</code> 関数は大きい方の値を出力する。\n          ゴリラ達は、式の中に現れる整数が <var>0</var> 以上 <var>99</var> 以下であることは知っているが、式の長さは終端を表す記号 <code>?</code> を読むまでわからない。\n          それぞれの式に含まれる文字数は 1000 文字以下であるが、そのことも知らない。\n          優等生ゴリラのアイちゃんは、 式を全て読まなくても式の値がわかることがあることに気づいた。\n        </p>\n        <p>\n          例えば、\n        </p>\n        <pre>^(41,3)?</pre>\n        <p>という式を左から順に読んでいくと、 <var>6</var> 文字目まで読んだ時点、 つまり</p>\n        <pre>^(41,3</pre>\n        <p>まで読んだ時点で、関数の2番目の入力が<var>3</var> もしくは <var>30</var> 以上 <var>39</var> 以下であることがわかるため、式の値は <var>41</var> であることが確定する。</p>\n        <p>\n          アイちゃんは他のゴリラより早く問題を解きたいので、先頭から１文字ずつ読んでいき、式の値が分かった時点でその問題を読むのをやめることにした。\n          それぞれの式について、式の値とアイちゃんが読む必要のある文字数の最小値を求めよ。\n        </p>\n      </section>\n    </div>\n\n    <div class=\"part\">\n      <section>\n        <h3>制約</h3>\n        <ul>\n          <li><var>1 \\leq Q \\leq 200</var></li>\n          <li>それぞれの式に含まれる文字数は <var>1000</var> 以下である。</li>\n        </ul>\n      </section>\n    </div>\n\n    <hr>\n    <div class=\"io-style\">\n      <div class=\"part\">\n        <section>\n          <h3>入力</h3>\n          <p>入力は複数のテストケースからなり、以下の形式で標準入力から与えられる。</p>\n<pre><var>Q</var>\n<var>statement_1</var>\n...\n<var>statement_Q</var>\n</pre>\n        </section>\n      </div>\n    </div>\n    <p>各 <var>statement_i</var> <var>(1 \\leq i \\leq Q)</var> は、以下の BNF の形式で与えられる。</p>\n<pre><var>&lt;statement&gt;</var> ::= <var>&lt;expression&gt;</var> <code>?</code>\n<var>&lt;expression&gt;</var> ::= (<code>^</code> | <code>_</code>)  <code>(</code> <var>&lt;expression&gt;</var> <code>,</code> <var>&lt;expression&gt;</var> <code>)</code> | <var>&lt;number&gt; </var>\n<var>&lt;number&gt;</var> :: = <code>0</code> | <code>1</code> | <code>2</code> | ... | <code>98</code> | <code>99</code>\n</pre>\n\n    <div class=\"io-style\">\n      <div class=\"part\">\n        <section>\n          <h3>出力</h3>\n          <p>\n            出力は <var>Q</var> 行からなる。\n            <var>i</var> <var>(1 \\leq i \\leq Q)</var> 行目には <var>i</var> 番目のテストケースにおける式の値と、読む必要のある文字数の最小値を空白区切りで出力せよ。\n          </p>\n        </section>\n      </div>\n    </div>\n    <hr>\n\n    <div class=\"part\">\n      <section>\n        <h3>入力例1</h3>\n<pre>4\n_(4,51)?\n^(99,_(3,67))?\n_(0,87)?\n3?\n</pre>\n      </section>\n    </div>\n\n    <div class=\"part\">\n      <section>\n        <h3>出力例1</h3>\n<pre>4 5\n99 4\n0 3\n3 2\n</pre>\n        <ul>\n          <li>1 番目の例では、 <var>5</var> 文字目を読んだ時点、つまり <code>_(4,5</code> の時点で式の値が <var>4</var> であるとわかる。</li>\n          <li>2 番目の例では、 <var>4</var> 文字目を読んだ時点、つまり <code>^(99</code> の時点で式の値が <var>99</var> であるとわかる。</li>\n          <li>3 番目の例では、 <var>3</var> 文字目を読んだ時点、つまり <code>_(0</code> の時点で式の値が <var>0</var> であるとわかる。</li>\n          <li>4 番目の例では、 終端記号を読み込むまで式の値が <var>3</var> であるとわからない。</li>\n        </ul>\n      </section>\n    </div>\n\n    <div class=\"part\">\n    <section>\n      <h3>入力例2</h3>\n<pre>7\n_(23,^(_(22,40),4))?\n_(0,99)?\n^(99,_(^(19,2),5))?\n_(^(43,20),^(30,29))?\n^(_(20,3),_(50,41))?\n^(_(20,3),_(3,41))?\n^(_(20,3),_(4,41))?\n</pre>\n      </section>\n    </div>\n\n    <div class=\"part\">\n      <section>\n        <h3>出力例2</h3>\n<pre>22 18\n0 3\n99 4\n30 17\n41 17\n3 14\n4 15\n</pre>\n      </section>\n    </div>\n  </span>","en":"<span class=\"lang-en\">\n    <p>Score : <var>150</var> points</p>\n\n    <div id=\"task-statement\">\n      <script src=\"http://atcoder.jp/js/varmath.js\"></script>\n      <div class=\"part\">\n        <section>\n          <h3>Problem Statement</h3>\n          <p>\n            Gorillas in Kyoto University are good at math.\n            They are currently trying to solve problems to find the value of an expression that contains two functions, <code>_</code> , <code>^</code>.\n            Each of these functions takes two input values. <code>_</code> function returns the smaller of the two input values and <code>^</code> function returns the larger.\n            Gorillas know that integers in the expression are non-negative and less than or equal to <var>99</var>,\n            but can not find out the length of the expression until they read a terminal symbol <code>?</code> that represents the end of the expression. The number of characters included in each expression is less than or equal to 1000, but they do not even know this fact.\n            Ai, a smart gorilla, noticed that she may be able to know the value of the expression even if they don't read the whole expression.\n          </p>\n          <p>\n            For example,\n          </p>\n          <p>Assume you read the following sentence from the left.</p>\n          <pre>^(41,3)?</pre>\n          <p>When you read the sixth character, that is, when you read the following expression,</p>\n          <pre>^(41,3</pre>\n          <p>you can tell the second input value of the funcion is whether <var>3</var> or an integer between <var>30</var> and <var>39</var>, and the value turns out <var>41</var>. </p>\n          <p>\n            Since Ai wants to solve problems earlier than other gorillas, she decided to solve the problems such that she reads as fewer characters as possible from the left.\n            For each expression, Find the value of the expression and the minimum number of characters Ai needs to read to know the value.\n          </p>\n        </section>\n      </div>\n\n      <div class=\"part\">\n        <section>\n          <h3>Constraints</h3>\n          <ul>\n            <li><var>1 \\leq Q \\leq 200</var></li>\n            <li>The number of characters each expression contains is less than or equal to <var>1000</var>. </li>\n          </ul>\n\n        </section>\n      </div>\n      <hr>\n      <div class=\"io-style\">\n        <div class=\"part\">\n          <section>\n            <h3>Input</h3>\n            <p>The input consists of multiple test cases and is given from Standard Input in the following format:</p>\n<pre><var>Q</var>\n<var>statement_1</var>\n...\n<var>statement_Q</var>\n</pre>\n          </section>\n        </div>\n      </div>\n      <p>Each <var>statement_i</var> <var>(1 \\leq i \\leq Q)</var> is given in the following BNF format.</p>\n<pre><var>&lt;statement&gt;</var> ::= <var>&lt;expression&gt;</var> <code>?</code>\n<var>&lt;expression&gt;</var> ::= (<code>^</code> | <code>_</code>)  <code>(</code> <var>&lt;expression&gt;</var> <code>,</code> <var>&lt;expression&gt;</var> <code>)</code> | <var>&lt;number&gt; </var>\n<var>&lt;number&gt;</var> :: = <code>0</code> | <code>1</code> | <code>2</code> | ... | <code>98</code> | <code>99</code>\n</pre>\n\n      <div class=\"io-style\">\n        <div class=\"part\">\n          <section>\n            <h3>Output</h3>\n            <p>\n              Output consists of <var>Q</var> lines.\n              On line <var>i</var> <var>(1 \\leq i \\leq Q)</var>, print the value of the expression and the number of character Ai needs to read for the test case <var>i</var> separated by space.\n            </p>\n          </section>\n        </div>\n      </div>\n      <hr>\n\n      <div class=\"part\">\n        <section>\n          <h3>Sample Input 1</h3>\n<pre>4\n_(4,51)?\n^(99,_(3,67))?\n_(0,87)?\n3?\n</pre>\n        </section>\n      </div>\n\n      <div class=\"part\">\n        <section>\n          <h3>Sample Output 1</h3>\n<pre>4 5\n99 4\n0 3\n3 2\n</pre>\n          <ul>\n            <li>For the first test case, when you read the fifth character, that is, when you read <code>_(4,5</code>, you will know the value is <var>4</var>. </li>\n            <li>For the second test case, when you read the fourth character, that is, when you read <code>^(99</code>, you will know the value is <var>99</var>. </li>\n            <li>For the third test case, when you read the third character, that is, when you read <code>_(0</code>, you will know the value is <var>0</var>. </li>\n            <li>For the fourth test case, you will not know the value is <var>3</var> untill you read the terminal symbol.</li>\n          </ul>\n        </section>\n      </div>\n\n      <div class=\"part\">\n        <section>\n          <h3>Sample Input 2</h3>\n<pre>7\n_(23,^(_(22,40),4))?\n_(0,99)?\n^(99,_(^(19,2),5))?\n_(^(43,20),^(30,29))?\n^(_(20,3),_(50,41))?\n^(_(20,3),_(3,41))?\n^(_(20,3),_(4,41))?\n</pre>\n        </section>\n      </div>\n\n      <div class=\"part\">\n        <section>\n          <h3>Sample Output 2</h3>\n<pre>22 18\n0 3\n99 4\n30 17\n41 17\n3 14\n4 15\n</pre>\n        </section>\n      </div>\n    </div>\n  </span>"},"endpoint":"https://atcoder.jp/contests/kupc2016/tasks/kupc2016_f"}