{"html":{"ja":"<span class=\"lang-ja\">\n\n<div class=\"part\">\n<section>\n<h3> 問題概要 </h3>\n<ul>\n<li><strong>問題のねらい</strong>: 本プログラミングコンテストは、買い物支援(配達)サービスの最適化をテーマとしている。本サービスを利用する顧客はそれぞれ異なる品物をお店に注文する（顧客からの注文には固有の<var>\\text{ID}</var>が割り振られる）。お店が利用できる車は一台のため、配達中に注文された商品については、お店に戻ってその商品を車に積んでから、顧客のもと商品を届けなければならない。</li>\n<li><strong>得点</strong>: 最適化の目的は、制限時間 <var>T_{\\max}</var> の間に「できるだけ多くの」商品を「できるだけ早く」顧客に届けることである。なお、注文は時刻 <var>0</var> から時刻 <var>0.95 \\times T_{\\max}</var> の間に発生する可能性がある。</li>\n<li><strong>諸制約</strong>: 本コンテストでは、車に積むことのできる商品の数に制限はない。ただし、ある注文に対応する商品をお店まで取りに行き、車に積めるのは、<strong>その商品が注文された以降の時刻に限る</strong> ことに注意せよ。</li>\n<li><strong>問題 A</strong>: この問題においては、注文が発生する時刻及び、注文がどの頂点で発生したかなど、注文に関する情報が事前に与えられる。</li>\n<li><strong>問題 B</strong>: この問題においては、事前に注文に関する情報は与えられず、全ての注文は配達中にオンラインで発生する。</li>\n</ul>\n<div style=\"text-align:center;\">\n<img src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/7faf401c00c790b9a8cb5c6968dc80c3.png\">\n</div>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>時間・空間について</h3>\n<ul>\n<li><strong>時間</strong>: <var>t</var> は <var>0 \\leq t &lt; T_{\\max}</var> を満たす整数時刻であるとし、各 <var>t</var> において、あなたは時刻 <var>t</var> から <var>t+1</var> にかけての行動を決定しなければならない。</li>\n<li><strong>空間</strong>: 単純かつ無向であるグラフ <var>G = (V, E)</var> を考える。ここで <var>V</var> は頂点集合、<var>E</var> は辺集合である。車の移動・注文の発生はすべて、このグラフ内で起こるものとする。</li>\n<li><strong>店および顧客の位置</strong>: それぞれの頂点 <var>u \\in V</var> は <var>1</var> から <var>|V|</var> までで番号付けられている。頂点 <var>u = 1</var> は店がある頂点であるとし、<var>u = 2, \\dots, |V|</var> は顧客がいる頂点であるとする。</li>\n<li><strong>道路</strong>: それぞれの辺 <var>\\left\\{ u, v \\right\\}</var> は、頂点 <var>u</var> と頂点 <var>v</var> を直接結ぶ道路であるとする。辺には整数距離が定められており、これを <var>d_{u, v} \\geq 1</var> と表記する。</li>\n<li><strong>グラフの生成方法</strong>: 地図を表すグラフは、後述のアルゴリズムによってランダムに生成される。</li>\n</ul>\n<details>\n<summary style=\"display:list-item\"> グラフ <var>G</var> の生成について </summary>\n\nすべてのテストケースにおいて、与えられるグラフ <var>G = (V, E)</var> は以下のアルゴリズムによって生成される。\n\n<ul>\n<li> <b>入力:</b><var>|V|</var>, <var>|E|</var>, <var>\\mathrm{MaxDegree}=5</var>(最大次数)</li>\n<li> <b>頂点(店舗＋顧客)の生成方法:</b>\n<ul>\n  <li> はじめに、<var>|V| = R^{2} + r</var> を満たす最大の非負整数<var>R</var> を見つける（ただし、<var>r</var> も非負整数とする）。</li>\n  <li> 次に、<var>0 \\leq x, y &lt; R</var> を満たす<var>xy</var>座標平面上の全ての格子点に対して、点 <var>(x, y)</var> をプロットする。</li>\n  <li> 各点の座標を <var>(x, y) \\leftarrow (x + dx, y + dy)</var> とずらす。ここで <var>dx, dy</var> は <var>dx, dy \\in [0, 1]</var> を満たす一様ランダムな実数である。つまり、移動後の座標は<var>(x + dx, y + dy)\\in [0,R] \\times [0,R]</var>を満たす。</li>\n  <li> 残りの <var>r</var> 個の点それぞれについて、座標 <var>(x', y')</var> (<var>0 \\leq x', y' \\leq R</var> の一様ランダムな実数) を定めてプロットする。</li>\n  <li> 各点に対して、<var>1</var>から<var>|V|</var>までの番号をランダムに割り振る。番号<var>1</var>を割り振られた頂点を店舗とする。</li>\n</ul>\n</li>\n\n<li> <b>高速道路の作成方法:</b>\n<ul>\n  <li> 頂点間をつなぐ道路のうち、まず高速道路を作成する。生成した頂点集合 <var>u \\in V</var> に対して、完全グラフ <var>G_{\\text{comp}}</var> を生成する。各頂点ペア <var>u, v \\in V \\times V</var> に対する頂点間のユークリッド距離を、完全グラフにおける辺の重み <var>W_{u, v}</var> と定める。</li>\n  <li> 次に、完全グラフ <var>G_{\\text{comp}}</var> に対して、<a href=\"https://ja.wikipedia.org/wiki/%E5%85%A8%E5%9F%9F%E6%9C%A8#%E6%9C%80%E5%B0%8F%E5%85%A8%E5%9F%9F%E6%9C%A8\">最小全域木</a> を生成する。最小全域木の <var>|V|-1</var> 本の辺がグラフ <var>G</var> の高速道路網となる。これらの辺の重み <var>d_{u,v}</var> を <var>d_{u,v} \\leftarrow \\lceil 2 \\times W_{u, v} \\rceil </var>と定める。\n  </li>\n</ul>\n</li>\n\n<li> <b>残りの道路の作成方法:</b>\n<ul>\n  <li> (高速道路以外の)残りの <var>|E|-(|V|-1)</var> 本の道路は、次の手順で<var>1</var>本ずつ生成される。\n  <ul>\n    <li> <var>\\mathrm{cost}(u,v)</var>を更新する。 </li>\n    <li> グラフGの辺でつながっていない<var>u</var>, <var>v</var>のペアの内、<var>\\mathrm{cost(u,v)}</var>の最小を与えるペアをつなぐ辺<var>\\left\\{ u, v \\right\\}</var>をグラフGに加える。</li>\n    <li> 選ばれた辺の重み <var>d_{u,v}</var> を <var>d_{u,v} \\leftarrow \\lceil 4 \\times W_{u, v} \\rceil </var> と定める。</li>\n  </ul>\n  </li>\n  <li>\n  ここで <var>\\mathrm{cost}(u,v)</var> のベースは頂点間のユークリッド距離だが、低い次数の頂点が選ばれやすくなるように、また、できる限り道の交差を避けるため、斜め方向よりも縦横方向の道が選ばれやすくなるように <var>\\mathrm{cost}(u,v)</var> を定める。以下に <var>\\mathrm{cost}(u,v)</var> の計算方法の詳細を示す。\n  <ul>\n    <li> 各頂点 <var>u\\in V</var> の次数 <var>\\mathrm{degree}(u)</var> を計算する。次数 <var>\\mathrm{degree}(u)</var> は <var>u\\in V</var> をいずれかの端点に含むグラフ <var>G</var> の辺の本数である。</li>\n    <li> 各頂点 <var>u\\in V</var> の色を、頂点の初めの(ずらす前の)座標 <var>(x,y)</var> をもとに、下記のように定める。まずは <var>|V|</var> 個の頂点のうち、<var>R^{2}</var> 個の頂点に対し、\n    <ul>\n      <li> <var>x+y</var> が偶数の場合 : <var>\\mathrm{color}(u) = 0</var> </li>\n      <li> <var>x+y</var> が奇数の場合 : <var>\\mathrm{color}(u) = 1</var> </li>\n      <li> と定める。残りの <var>r</var> 個の頂点には、ランダムに<var>0</var>もしくは<var>1</var>の色を割り当てる。</li>\n    </ul>\n    </li>\n    <li> ファクター <var>f(u,v)</var> を以下のように定める:\n    <ul>\n      <li> <var>\\mathrm{color}(u)</var> と <var>\\mathrm{color}(v)</var> が同じ場合： <var>\\mathrm{f}(u,v) = 5</var> </li>\n      <li> <var>\\mathrm{color}(u)</var> と <var>\\mathrm{color}(v)</var> が異なる場合： <var>\\mathrm{f}(u,v) = 1</var> </li>\n    </ul>\n    </li>\n    <li> ファクター <var>g(u)</var> を以下のように定める:\n    <ul>\n      <li> <var>\\mathrm{degree}(u) \\lt \\mathrm{MaxDegree}</var> の場合: <var>g(u)=1</var> </li>\n      <li> <var>\\mathrm{degree}(u) \\geq \\mathrm{MaxDegree}</var> の場合: <var>g(u)=\\infty</var> </li>\n    </ul>\n    </li>\n    <li> <var>\\mathrm{cost}(u,v)</var> を以下のように計算する。：\n    <ul>\n      <li> <var>\\mathrm{cost}(u,v) = W_{u,v}\\times \\mathrm{degree}(u) \\times \\mathrm{degree}(v) \\times f(u,v) \\times g(u) \\times g(v)</var>. </li>\n    </ul>\n    </li>\n  </ul>\n  </li>\n</ul>\n</li>\n\n<li> <b> 各顧客の注文頻度の決定方法: </b>\n<ul>\n  <li> まず、各頂点 <var>u \\in V</var> に注文頻度 <var>f_u \\in \\left\\{0,1,2\\right\\}</var> を割り当てる。</li>\n  <li> 店舗の注文頻度を<var>0</var>に初期化する: <var>f_1 \\leftarrow 0</var>. </li>\n  <li> 顧客の注文頻度を<var>1</var>に初期化する: <var>f_u \\leftarrow 1</var></li>\n  <li> 以下、注文頻度<var>2</var>の顧客を定める。そのためにまず、座標平面上の <var>[R/4,3R/4]\\times[R/4,3R/4]</var> の領域内に一様ランダムに1点、中心点 <var>c=(c_x,c_y)</var> をプロットする（<var>c=(c_x,c_y)\\in [R/4,3R/4]\\times[R/4,3R/4]</var>）。次に全ての顧客 <var>u=2,...,|V|</var> に対して以下の処理を行う:  \n    <ul>\n    <li> <var>\\mathrm{EuclideanDistance}(c,u)\\le R/8 + \\mathrm{uniformRandom}[0,R/8]</var> の場合、 <var>f_{u} \\leftarrow 2</var> とする。</li>\n    </ul>\n  </li>\n</ul>\n</li>\n\n</ul>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>車の位置と移動について</h3>\n<p>配達には車を利用する必要がある。車の位置は次に示すように二種類に分類される。</p>\n<ul>\n<li><strong>車の位置</strong>: 以下の二種類に分類される。<ul>\n<li>頂点 <var>u \\in V</var> 上にいる場合</li>\n<li>辺 <var>\\left\\{ u, v \\right\\}</var> 上にいる場合。より具体的に言えば、<var>u</var> から <var>v</var> の方向に <var>x</var> <var>(0 &lt; x &lt; d_{u, v})</var> だけ離れている場合である</li>\n</ul>\n</li>\n</ul>\n<p>また、毎時刻 <var>t</var> において、あなたは以下に示すとおりに車を操作できる。</p>\n<ul>\n<li>\n<p><strong>車の移動</strong>: あなたが取れる行動は以下の二種類である。</p>\n<ul>\n<li><code>stay</code>: 移動せずその場にとどまる</li>\n<li><code>move w</code>: <var>w \\in V</var> の方向に向かって距離 <var>1</var> だけ進む</li>\n</ul>\n<p><code>move w</code> を選択するとき、<var>w</var> は以下の条件を満たさなければならない。これらの条件を満たさない場合は <code>WA</code> (Wrong Answer) となることに注意せよ。\n</p><ul>\n  <li><var>w</var> は <var>w \\in V</var> を満たす頂点である</li>\n  <li>車が頂点 <var>u \\in V</var> 上にいる場合、頂点対 <var>\\left\\{ u, w \\right\\}</var> がグラフの辺集合に含まれていなければならない。すなわち、<var>\\left\\{ u, w \\right\\} \\in E</var> でなければならない</li>\n  <li>車が辺 <var>\\left\\{ u, v \\right\\}</var> 上にいる場合、<var>w = u</var> または <var>w = v</var> でなければならない</li>\n</ul><p></p>\n</li>\n</ul>\n<div style=\"text-align:center;\">\n<img src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/4b904efabb268a2ee89f423e61c869f9.png\">\n</div>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>注文・配達等について</h3>\n<ul>\n<li><strong>注文</strong>: それぞれの注文は「注文 ID」「配達先 <var>v \\in V</var>」「注文が発生した時刻 <var>t</var>」の三種類の情報を持つ。詳しくは、後述の入力フォーマットを参照のこと。</li>\n<li><strong>注文発生について</strong>: 顧客からの新しい注文は、<var>0 \\leq t \\leq T_{\\mathrm{last}} = 0.95 \\times T_{\\max}</var> を満たす時刻 <var>t</var> において確率 <var>p_{\\mathrm{order}}(t)</var> で発生する。それぞれの頂点には注文頻度 <var>f_i</var> が定められており、注文が発生するときにその配送先が頂点 <var>i</var> となる確率は <var>\\frac{f_i}{\\sum_{k} f_k}</var> である。詳しくは以下の疑似コードまたはサンプルコードを参考のこと。</li>\n</ul>\n<p>\n</p><details>\n  <summary style=\"display:list-item\"> 注文発生について </summary>\n\n  <ul>\n    <li> <b>入力:</b> 注文が発生しうる時刻の最大値 <var>T_{\\mathrm{last}}</var> と、時刻ごとの注文発生確率を表す関数 <var>p_{\\mathrm{order}}(t)</var>. </li>\n    <li> <b>初期化:</b> <var>\\mathrm{ID} \\leftarrow 0</var> </li>\n    <li> 各時間ステップ <var>t = 0, ..., T_{\\mathrm{last}} </var> で以下を実行する:\n    <ul>\n      <li> 実数 <var>r \\in \\left[ 0,1 \\right]</var> を一様ランダムに生成する</li>\n      <li> <b><var> r \\le p_{\\mathrm{order}}(t) </var> の場合</b>:\n        <ul>\n          <li>1つの頂点 <var>u</var> (<var>u \\in V, u \\neq 1</var>) を、それぞれの頂点に割り当てられた頻度 <var>f_{u}</var> で重み付けをしてランダムに選択する</li>\n          <li> <var>\\mathrm{ID} \\leftarrow \\mathrm{ID} + 1</var> </li>\n          <li> 注文を発生させる。ここで注文は(注文ID, 注文時間 <var>t</var>, (お届け先の)頂点番号 <var>u \\in V</var>)を含む。\n          </li>\n        </ul>\n      </li>\n      <li> <b>上記以外 (<var> r \\gt p_{\\mathrm{order}}(t)</var>) の場合</b>: 注文は発生しない</li>\n    </ul>\n  </li></ul>\n\n  <ul style=\"list-style:none;\">\n    <li> 時刻ごとの注文発生確率を表す関数 <var>p_{\\mathrm{order}}(t)</var> を下記のように定める:</li>\n    <li>\n    <var> p_{\\text{order}}(t) =\n    \\begin{cases}\n    t / T_{\\text{peak}},  &amp;\n    \\text{if } 0\\le t \\lt T_{\\text{peak}}, \\\\\n    (T_{\\text{last}} - t) / (T_{\\text{last}}- T_{\\text{peak}}),  &amp;\n    \\text{if } T_{\\text{peak}} \\le t \\lt T_{\\text{last}}, \\\\\n    0, &amp;\n    \\text{if } T_{\\text{last}} \\le t,\n    \\end{cases}\n    </var></li>\n    <li>ここで <var>T_{\\text{last}}:=0.95 \\times T_{\\max}</var> であり、 <var>T_{\\text{peak}}</var> は区間 <var>[0, T_{\\text{last}}]</var> から一様ランダムに定める</li>\n    <li><span style=\"font-weight:bold;\">注意: <var>T_{\\text{peak}}</var> の値は、入力では与えられない。</span></li>\n  </ul>\n\n  <div style=\"text-align:center;\">\n  <img src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/caa24f9e6a715e0d1a778f1fdfe4e14b.png\">\n  </div>\n\n</details>\n<p></p>\n\n<ul>\n<li><strong>配達</strong>: 注文を受けて、それに対応する商品を顧客まで配達するためには、注文が発生した後に次に示す手順を踏む必要がある。<ol>\n<li><strong>車を店まで移動させる</strong>: 車が店まで到達すると、現在時刻を同じかそれより前に発生した注文について、それに対応する商品をすべて車に積むことができる。将来にやってくる注文に関して、商品を車に積むことができないことに注意せよ。</li>\n<li><strong>車を顧客がいる場所まで移動させる</strong>: 配達を完了させるためには、顧客がいる頂点まで車を移動させる必要がある。ここで、その顧客の注文に対応する商品が車に積まれていない場合は、たとえ顧客がいる頂点まで車を移動させたとしても配達が完了しないことに注意せよ。</li>\n</ol>\n</li>\n</ul>\n<div style=\"text-align:center;\">\n<img src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/5dff370a11a242d3ac15adb486ef2e85.png\">\n</div>\n\n<ul>\n<li><strong>注意すべき制約</strong>: 注文 ID は注文を識別するためのものであり、互いに異なる整数が割り当てられる。また、一度に車に積むことのできる商品の数には上限がないことに注意されたい。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>採点方法</h3>\n<ul>\n<li>各テストケースの得点の合計がその解答プログラムの得点となる。コンテスト中には 30 個のテストケースが存在する。</li>\n<li>コンテスト終了後に 100 個の(コンテスト中とは異なる)テストケースに対してシステムテストを行い、その得点を最終得点とする。</li>\n<li>各テストケースについて、以下のように得点(Score)を計算する。\n<p style=\"text-align:center;\">\n    <var> \\text{Score} = \\sum_{i \\in D} {(T_{\\max})}^{2} - {(\\mathrm{waitingTime}_i)}^{2}, </var>\n</p>\nここで、\n<ul>\n<li> <var> D </var> は、時刻  <var>t=T_{\\max}</var> までに配達を完了した注文の集合である。</li>\n<li> <var>i</var> 番目の注文の待ち時間: <var>\\mathrm{waitingTime}_i = \\mathrm{deliveredTime}_i - \\mathrm{orderedTime}_i</var>.</li>\n<li> <code>WA</code>（不正解）となったテストケースが存在した場合、そのケースの得点は <var>0</var> 点になる。</li>\n</ul>\n</li></ul></section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>問題文 A</h3><p>問題 A では、顧客からの注文がどの時刻にどこの頂点で発生するかが事前に与えられる。\n得点(Score)を最大化するように車を動かすアルゴリズムを作ることが問題Aのタスクである。\nただし商品は、顧客からの注文が発生した後に、車に積む必要がある。(商品の配達の手順を参照せよ)\nこの問題において、時刻 <var>t</var> <var>(0 \\leq t \\lt T_{\\max})</var> で発生する顧客からの注文は、時刻 <var>t</var> におけるあなたの行動を決定する <strong>直前に</strong> 受けとるものとする。</p>\n</section>\n</div>\n\n<hr>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>入力</h3><p>入力は以下の形式で与えられる。</p>\n<pre><var>|V|</var> <var>|E|</var>\n<var>u_{1}</var> <var>v_{1}</var> <var>d_{u_{1}, v_{1}}</var>\n<var>u_{2}</var> <var>v_{2}</var> <var>d_{u_{2}, v_{2}}</var>\n:\n<var>u_{|E|}</var> <var>v_{|E|}</var> <var>d_{u_{|E|}, v_{|E|}}</var>\n<var>T_{\\max}</var>\n<var>\\mathrm{info}_{0}</var>\n<var>\\mathrm{info}_{1}</var>\n:\n<var>\\mathrm{info}_{T_{\\max}-1}</var>\n</pre>\n\n<ul>\n<li><var>1</var> 行目の <var>|V|</var> はグラフの頂点数、<var>|E|</var> はグラフの辺数を表す。</li>\n<li>続く <var>|E|</var> 行で、グラフの辺が与えられる。 <var>|E|</var> 行のうち <var>i</var> 行目は、頂点 <var>u_{i}</var> と <var>v_{i}</var> の間に距離 <var>d_{u_{i}, v_{i}}</var> の辺が存在することを表す。</li>\n<li>続く <var>1</var> 行で、あなたが行動する時間の最大値 <var>T_{\\max}</var> が与えられる。</li>\n</ul>\n<p>続く行のうち <var>\\mathrm{info}_t</var> は、時刻 <var>t</var> で発生する顧客からの注文の情報である。\n<var>\\mathrm{info}_t</var> は以下の形式で与えられる。</p>\n<pre><var>N_{\\text{new}}</var>\n<var>\\mathrm{new\\_id}_1</var> <var>\\mathrm{dst}_1</var>\n<var>\\mathrm{new\\_id}_2</var> <var>\\mathrm{dst}_2</var>\n<var>\\vdots</var>\n<var>\\mathrm{new\\_id}_{N_{\\text{new}}}</var> <var>\\mathrm{dst}_{N_{\\text{new}}}</var>\n</pre>\n\n<ul>\n<li><var>N_{\\text{new}}</var> は、その時刻において新たに発生した注文の数を表す。</li>\n<li>続く <var>N_{\\text{new}}</var> 行で、新たに発生した注文情報が与えられる。<var>i</var> 番目に与えられる注文情報は、注文 ID が <var>\\mathrm{new\\_{id}}_i</var> であり、その注文の発生元 (お届け先) が頂点 <var>\\mathrm{dst}_i</var> であることを表す。</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>制約</h3><ul>\n<li> 入力で与えられる数値は全て整数である </li>\n<li> <var>T_{\\max} = 10000</var> </li>\n<li> <var>200 \\leq |V| \\leq 400</var> </li>\n<li> <var>1.5 |V| \\leq |E| \\leq  2 |V|</var></li>\n<li><var>1 \\leq u_{i}, v_{i} \\leq |V|</var> <var>(1 \\leq i \\leq |E|)</var></li>\n<li><var>1 \\leq d_{u_i, v_i} \\leq \\lceil 4\\sqrt{2|V|} \\rceil</var> <var>(1 \\leq i \\leq |E|)</var></li>\n<li>与えられるグラフは自己ループ・多重辺が存在せず、連結であることが保証される。</li>\n<li><var>0 \\leq N_{\\text{new}} \\leq 1</var></li>\n<li><var>1 \\leq \\mathrm{new\\_id}_{i} \\leq T_{\\text{last}}+1</var> <var>(1 \\leq i \\leq N_{\\text{new}})</var></li>\n<ul>\n<li>注意: 上で説明されたルールに従って注文が生成されたとき、発生する注文の件数の最大値は <var>T_{\\text{last}} + 1</var> となる。ゆえに、<var>\\mathrm{new\\_id}_{i}</var> の取りうる値は <var>1</var> から <var>T_{\\text{last}} + 1</var> までの整数である。</li>\n</ul>\n<li><var>2 \\leq \\mathrm{dst}_i \\leq |V|</var> <var>(1 \\leq i \\leq N_{\\text{new}})</var></li>\n<li>入力全体を通して、与えられる <var>\\mathrm{new\\_{id}}_i</var> はそれぞれ相異なる整数である。</li>\n</ul>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力</h3><p>以下の形式で標準出力に <var>T_{\\max}</var> 行の整数を出力せよ。</p>\n<pre><var>\\mathrm{command}_{0}</var>\n<var>\\mathrm{command}_{1}</var>\n:\n<var>\\mathrm{command}_{T_{\\max}-1}</var>\n</pre>\n\n<p>ただし、<var>\\mathrm{command}_{i}</var> は以下のいずれかである。</p>\n<h4><code>stay</code>: 車が動かない場合</h4>\n<pre>-1\n</pre>\n\n<p>車の位置は変わらない。</p>\n<h4><code>move w</code>: 車を 頂点 <var>w</var> へ向けて <var>1</var> メートルすすめる場合</h4>\n<pre>w\n</pre>\n\n<p>ただし、車を動かす場合(<code>move w</code>)、出力は以下の条件を満たす必要がある。条件に違反している場合は <code>WA</code> (不正解) となる。</p>\n<ul>\n<li><var>w \\in V</var></li>\n<li>車が頂点 <var>u</var> 上にいる場合、<var>\\left\\{ u, w \\right\\} \\in E</var> が成り立つ。</li>\n<li>車が辺 <var>\\left\\{ u, v \\right\\}</var> 上にいる場合、<var>u = w</var> または <var>v = w</var> が成り立つ。</li>\n</ul>\n</section>\n</div>\n</div>\n\n<hr>\n<div class=\"part\">\n<section>\n<h3>入力例</h3><pre>5 7\n1 2 5\n5 3 4\n2 4 8\n1 5 1\n2 3 3\n4 5 3\n4 3 9\n4\n1\n1 2\n1\n2 5\n1\n3 4\n0\n</pre>\n\n<p><strong>この入力は例示用の小さいサイズのものであり、制約を満たさないことに注意せよ</strong></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>出力例</h3><pre>2\n-1\n1\n5\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>入出力例の説明</h3><p>以下の例は、<var>|V| = 5</var>, <var>|E| = 7</var>, <var>T_{\\max} = 4</var> の場合である。\n以下に時刻ごとに、発生した注文と車の動きについて、順を追って説明する。</p>\n<h4>時刻 <var>0</var></h4>\n<p>時刻 <var>0</var> では <var>1</var> つの注文が発生しており、その注文の情報は (注文 ID <var>= 1</var>, お届け先 <var>= 2</var>) である。\nあなたは今、頂点 <var>1</var> （店舗）にいるので、注文 <var>1</var> に対応する商品を車に積む。\nこのように、注文が発生した時にすでに店舗にいた場合、それに対応する商品を即時に車に積むことができる。</p>\n<h4>時刻 <var>0</var> → <var>1</var></h4>\n<p><code>move 2</code> を選択した。\n時刻 <var>0</var> から <var>1</var> の間に、「頂点 <var>2</var> に向かって <var>1</var> メートル進む」ことを表している。</p>\n<h4>時刻 <var>1</var></h4>\n<p>新たに (注文 ID <var>=2</var>, お届け先 <var>=5</var>) という注文が発生している。</p>\n<h4>時刻 <var>1</var> → <var>2</var></h4>\n<p><code>stay</code> を選択した。\n頂点上、辺上いずれであってもその場にとどまることができる。</p>\n<h4>時刻 <var>2</var></h4>\n<p>新たに (注文 ID <var>=3</var>, お届け先 <var>=4</var>) という注文が発生している。</p>\n<h4>時刻 <var>2</var> → <var>3</var></h4>\n<p><code>move 1</code> を選択した。\n頂点 <var>1</var> に向かって、<var>1</var> メートル進むことを表す。\nこのように、来た道を U ターンすることは可能である。</p>\n<h4>時刻 <var>3</var></h4>\n<p>新たな注文は何も発生していない。\nあなたは今、頂点 <var>1</var> （店舗）にいるので、注文 <var>2, 3</var> に対応する商品を車に積む。\nこのように、店舗にいる場合、すでに発生している注文のうち、まだ車に積んでいない商品をすべて積む。</p>\n<h4>時刻 <var>3</var> → <var>4</var></h4>\n<p>頂点 <var>1</var> 上で <code>move 5</code> を選択した。\n頂点 <var>5</var> に向かって <var>1</var> メートル進んだ。</p>\n<h4>時刻 <var>4</var></h4>\n<p>注文 ID <var>2</var> のお届け先は <var>5</var> であり、対応する商品が車に存在するので、注文 ID <var>2</var> の配達が完了した。</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>サンプルコード A</h3>\n<p>この問題について、以下のツールキット一式は<a href=\"https://img.atcoder.jp/hokudai-hitachi2019-1/5bc882a275d9543da1b79d9a670c6523.zip\">ここ</a>からダウンロードできる。</p>\n<ul>\n<li>入力サンプルジェネレータ</li>\n<li>テスター</li>\n<li>ビキナー向けのサンプルコード</li>\n</ul>\n<p>また、ビシュアライザも<a href=\"https://img.atcoder.jp/hokudai-hitachi2019-1/d2dded0de70ff38cbb8aa6dbfb88dfc3.zip\">ここ</a>にご用意しております。</p></section>\n</div>\n</span>","en":"<span class=\"lang-en\">\n\n<div class=\"part\">\n<section>\n<h3>Problem Setting</h3></section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Overview</h3>\n<ul>\n<li><strong>Concept:</strong> In this programming contest, you will run a delivery service. Customers will place orders with your shop. Each order has a unique <var>\\text{ID}</var> and should be delivered to the corresponding customer. Your delivery service has one car. The car will fetch the ordered item from the shop and deliver it to the customer.</li>\n<li><strong>Score:</strong> Your goal is to deliver as many items as possible, as quickly as possible in a given amount of time <var>T_{\\text{max}}</var>. (Orders are expected until <var>0.95 \\times T_{\\text{max}}</var>).</li>\n<li><strong>Constraint:</strong> In this contest there is no constraint on the number of items you can place in the car. However, an item can only be loaded in the car, by fetching it from the shop, after the order has been placed.</li>\n<li><strong>Problem A/B:</strong> In problem A all order positions and times are given to the contestant in advance and the contestant algorithm shall optimize the moves of the car to make as many deliveries as possible as fast as possible. On the other hand, in problem B orders appear online, that is new orders appear, while you move your car to make as many deliveries as possible as fast as possible.</li>\n</ul>\n<div style=\"text-align:center;\">\n<img alt=\"overview\" src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/7faf401c00c790b9a8cb5c6968dc80c3.png\" title=\"overview\">\n</div>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Specification of Time and Space:</h3>\n<ul>\n<li><strong>Time:</strong> In this contest we model the progress of time by integer values <var>0 \\le t &lt; T_{\\text{max}}</var>.</li>\n<li><strong>Map:</strong> In this contest we model a map by a simple, undirected, and connected graph <var>G=(V, E)</var>, consisting of a set of vertices <var>V</var> and a set of edges <var>E</var></li>\n<li><strong>Shop and customer locations:</strong> The vertices <var>u \\in V</var> are labeled from <var>1</var> to <var>|V|</var> and the vertex <var>u=1</var> denotes the location of your shop, while vertices <var>u = 2,...,|V|</var> denote locations of potential customers. Here, <var>|V|</var> denotes the number of elements of the set <var>V</var>.</li>\n<li><strong>Streets:</strong> Each edge <var>\\left\\{ u, v \\right\\} \\in E</var> represents a street connecting the vertices <var>u, v \\in V</var>. The corresponding length is given by an integer edge weight <var>d_{u, v} \\ge 1</var>.</li>\n<li><strong>Graph creation:</strong> The algorithm for generating the map graph based on a random seed is specified in the following pseudo-code. For further details, please see the sample code below.</li>\n</ul>\n<details>\n<summary style=\"display:list-item\"> <b>Pseudo code:</b> Map graph generator </summary>\n\n<ul>\n\n<li> <b>Input:</b><var>|V|</var>, <var>|E|</var>, <var>\\mathrm{MaxDegree}=5</var></li>\n\n<li> <b>2d vertex grid:</b>\n<ul>\n  <li> First, find the largest integer <var>R&gt;0</var> such that <var>|V| = R^{2} + r</var>, with <var>r</var> being the smallest possible non-negative integer.</li>\n  <li> Then we plot points <var>(x, y)</var> on the 2d vertex grid <var>(0 \\leq x, y \\lt R)</var>.</li>\n  <li> For each point <var>(x, y)</var> add a uniform random offset <var>dx, dy \\in [0, 1] </var>, giving the final vertex position <var>(x + dx, y + dy)\\in [0,R] \\times [0,R]</var>.</li>\n  <li> Finally, add the remaining <var>r</var> vertices at a uniform random position <var>(x, y)</var> with <var>0 \\leq x, y \\leq R</var>.</li>\n  <li> Vertex labels <var>u \\in V</var> are assigned by random shuffling. The shop is the vertex <var>u=1</var>.</li>\n</ul>\n</li>\n\n<li> <b>How we create Highways:</b>\n<ul>\n  <li> To generate a highway network, we create a complete graph <var>G_{\\text{comp}}</var> on the vertex set <var>u \\in V</var>, assigning each vertex pair <var>u, v \\in V \\times V</var> the Euclidean distance <var>W_{u, v}</var> as an edge weight.</li>\n  <li> Next, we construct a <a href=\"https://en.wikipedia.org/wiki/Minimum_spanning_tree\"> minimum spanning </a> tree of <var>G_{\\text{comp}}</var>. The <var>|V|-1</var> edges of the minimum spanning tree are the highway network of the graph <var>G</var>. We assign each of those edges <var>\\left\\{ u, v \\right\\}</var> an edge weight <var>d_{u,v} \\leftarrow \\lceil 2 \\times W_{u, v} \\rceil </var>.\n  </li>\n</ul>\n</li>\n\n<li> <b>How we add side roads:</b>\n<ul>\n  <li> To create a network of side roads, we successively add <var>|E|-(|V|-1)</var> edges to the graph <var>G</var> as follows:\n  <ul>\n    <li> Update <var>\\mathrm{cost}(u,v)</var>. </li>\n    <li> Among the vertex pairs <var>\\left( u, v \\right) \\in V\\times V</var>, not yet connected by an edge, select a pair with minimal <var>\\mathrm{cost}(u,v)</var>.</li>\n    <li> Assign the edge weight <var>d_{u,v} \\leftarrow \\lceil 4 \\times W_{u, v} \\rceil </var>.</li>\n  </ul>\n  </li>\n  <li>\n  Here, <var>\\mathrm{cost}(u,v)</var> is essentially based on the Euclidean distance of vertices, giving preference to connecting nearby vertices with low degree. In addition, preference is given to side roads along the rectangular grid, to avoid too many bridges. The detailed definitions are as follows:\n  <ul>\n    <li> Define <var>\\mathrm{degree}(u)</var>, the degree of vertex <var>u\\in V</var> as the number of incident edges. </li>\n    <li> Define <var>\\mathrm{color}(u)</var> for each vertex <var>u\\in V</var> according to its original position <var>(x,y)</var> on the vertex grid as:\n    <ul>\n      <li> If <var>x+y</var> is even : <var>\\mathrm{color}(u) = 0</var> </li>\n      <li> If <var>x+y</var> is odd : <var>\\mathrm{color}(u) = 1</var> </li>\n      <li> For the remaining <var>r</var> vertices : Assign a color <var>\\mathrm{color}(u) \\in \\left\\{0,1\\right\\}</var> at random. </li>\n    </ul>\n    </li>\n    <li> Define a factor <var>f(u,v)</var> as follows:\n    <ul>\n      <li> If <var>\\mathrm{color}(u)</var> and <var>\\mathrm{color}(v)</var> are the same : Set <var>\\mathrm{f}(u,v) = 5</var> </li>\n      <li> If <var>\\mathrm{color}(u)</var> and <var>\\mathrm{color}(v)</var> are different : Set <var>\\mathrm{f}(u,v) = 1</var> </li>\n    </ul>\n    </li>\n    <li> Define a factor <var>g(u)</var> as follows:\n    <ul>\n      <li> If <var>\\mathrm{degree}(u) \\lt \\mathrm{MaxDegree}</var> : Set <var>g(u)=1</var> </li>\n      <li> If <var>\\mathrm{degree}(u) \\geq \\mathrm{MaxDegree}</var> : Set <var>g(u)=\\infty</var> </li>\n    </ul>\n    </li>\n    <li> Finally, the cost is defined as follows:\n    <ul>\n      <li> <var>\\mathrm{cost}(u,v) = W_{u,v}\\times \\mathrm{degree}(u) \\times \\mathrm{degree}(v) \\times f(u,v) \\times g(u) \\times g(v)</var>. </li>\n    </ul>\n    </li>\n  </ul>\n  </li>\n</ul>\n</li>\n\n<li> <b> How we assign order frequencies: </b>\n<ul>\n  <li> Assign each vertex <var>u \\in V</var> an order frequency <var>f_u \\in \\left\\{0,1,2\\right\\}</var>.</li>\n  <li> Init the order frequency of the shop vertex: <var>f_1 \\leftarrow 0</var>. </li>\n  <li> Init the order frequency of the other vertices: <var>f_u \\leftarrow 1</var></li>\n  <li> Now determine vertices with order frequency 2. For this draw a uniform random center point <var>c=(c_x,c_y)\\in [R/4,3R/4]\\times[R/4,3R/4]</var> and then for all vertices <var>u=2,...,|V|</var> do:  \n    <ul>\n    <li> If <var>\\mathrm{EuclideanDistance}(c,u)\\le R/8 + \\mathrm{uniformRandom}[0,R/8]</var>: <var>f_{u} \\leftarrow 2</var> </li>\n    </ul>\n  </li>\n</ul>\n</li>\n\n</ul>\n</details>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Specification of Car Locations and Moves:</h3>\n<p>In order to make deliveries you will operate a delivery car, which can take positions and make moves as specified below.</p>\n<ul>\n<li>\n<p><strong>Car position:</strong> A car can generally take two types of position:</p>\n<ul>\n<li>on a vertex <var>u \\in V</var>.</li>\n<li>on an edge <var>\\left\\{ u, v \\right\\} \\in E</var>. More specifically, it is located at a distance <var>x</var> <var>(0 \\lt x \\lt d_{u, v})</var> from <var> u </var> to <var> v </var>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Car move:</strong> At each step  <var> 0 \\le t &lt; T_{\\text{max}} </var> you have to choose one of the following actions in order to control your delivery car.</p>\n<ul>\n<li><code>stay</code>: stay at the current position.</li>\n<li><code>move w</code>: Take one step towards vertex <var>w \\in V</var>.</li>\n</ul>\n<p>In case of choosing <code>move w</code>, <var>w</var> must obey the following constraints. A failure to obey these constraints results in a wrong answer <code>WA</code>.\n</p><ul>\n  <li> <var>w</var> must be a vertex, i.e., <var>w \\in V</var>.</li>\n  <li> If the car is on vertex <var>u \\in V</var>, there must be an edge connecting <var>u</var> and <var>v</var>, i.e., <var>\\left\\{ u, w \\right\\} \\in E</var>.</li>\n  <li> If the car is on the edge <var>\\left\\{ u, v \\right\\} \\in E</var>, <var>w</var> must either be <var>w = u</var> or <var>w = v</var>.</li>\n</ul><p></p>\n</li>\n</ul>\n<div style=\"text-align:center;\">\n<img alt=\"Car position and moves\" title=\"Car position and moves\" src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/60c6d261238fb10fb2bb26d89d275f9c.png\">\n</div>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Orders, Deliveries, and Constraints:</h3>\n<ul>\n<li><strong>Orders:</strong> Throughout the contest each order is characterized by three quantities: A unique order ID, a vertex <var>v \\in V</var> indicating the order destination, and the order time <var>t</var> at which the order appeared. For the detailed format see below.</li>\n<li><strong>Order generation:</strong> At each time <var> 0 \\le t \\le T_{\\text{last}} = 0.95 \\times T_{\\text{max}}</var> up to one new order can appear with probability <var>p_{\\text{order}}(t)</var>. In case there is an order, the order destination <var>i</var> is chosen from the vertex set <var>V</var> with probability proportional to the order frequency <var>f_i</var>. For details, see the pseudo-code below or the sample code further below.</li>\n</ul>\n<details>\n<summary style=\"display:list-item\"> <b>Pseudo code:</b> Order generation </summary>\n<ul>\n  <li> <b>Input:</b> Last order time <var>T_{\\text{last}}</var> and average order probability <var>p_{\\text{order}}(t)</var>. </li>\n  <li> <b>Init:</b> <var> \\mathrm{ID} \\leftarrow 0</var>. </li>\n  <li> For each step <var>t = 0, ..., T_{\\text{last}} </var> do:\n    <ul>\n    <li> Generate a uniform random number <var>r \\in [0,1] </var>. </li>\n    <li> <b>If</b> <var> r \\le p_{\\text{order}}(t) </var>:\n      <ul>\n      <li> Select a vertex position <var> u \\in V </var> at random with probability proportional to the order frequency <var> f_{u} </var> of the vertex. </li>\n      <li> <var>\\mathrm{ID} \\leftarrow \\mathrm{ID} + 1</var> </li>\n      <li> place order (new order ID, order time <var>t</var>, vertex position\n      <var> u \\in V </var>)</li>\n      </ul>\n    </li>\n    <li> <b>Else:</b> place no order</li>\n    </ul>\n  </li>\n</ul>\n\n<ul style=\"list-style:none;\">\n<li> <b>Note:</b> The average order probability is defined as follows:\n</li><li>\n<var> p_{\\text{order}}(t) =\n\\begin{cases}\nt / T_{\\text{peak}},  &amp;\n\\text{if } 0\\le t \\lt T_{\\text{peak}}, \\\\\n(T_{\\text{last}} - t) / (T_{\\text{last}}- T_{\\text{peak}}),  &amp;\n\\text{if } T_{\\text{peak}} \\le t \\lt T_{\\text{last}}, \\\\\n0, &amp;\n\\text{if } T_{\\text{last}} \\le t,\n\\end{cases}\n</var></li>\n<li>where <var>T_{\\text{last}}:=0.95 \\times T_{\\max}</var> and <var>T_{\\text{peak}}</var> is drawn randomly uniform from the interval <var>[0, T_{\\text{last}}]</var>.</li>\n<li> Note: The value of <var>T_{\\text{peak}}</var> will not be given as an input. </li>\n</ul>\n\n<div style=\"text-align:center;\">\n<img src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/caa24f9e6a715e0d1a778f1fdfe4e14b.png\">\n</div>\n</details>\n\n<ul>\n<li><strong>Delivery:</strong> To deliver an order, the contestant must do the following steps after the order has been placed:<ul>\n<li><strong>(1st) Move the car onto the shop:</strong> Note: When moving a car onto the shop, all orders with order time less than or equal to the current time, will be transfered into the car. On the other hand, orders which have not appeared yet, cannot be placed into the car.</li>\n<li><strong>(2nd) Move the car to the customer position:</strong> To finalize a delivery, move the car onto the vertex of the customer position. Note: Orders which have not been transfered into the car yet, will not be delivered, even if you arrive at the customer position.</li>\n</ul>\n</li>\n</ul>\n<div style=\"text-align:center;\">\n<img alt=\"constraint image\" src=\"https://img.atcoder.jp/hokudai-hitachi2019-1/03b28647c6ddc92cc3cbb33ade09f468.png\" title=\"Constraints\">\n</div>\n\n<ul>\n<li><strong>Constraints:</strong> Throughout the contest, we assume each order has a unique <var>\\text{ID}</var> and should be delivered to the corresponding customer. It is further assumed that an unlimited number of orders can be placed in the car.</li>\n</ul>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Scoring</h3>\n<ul>\n<li> During the contest the total score of a submission is determined by summing the score of the submission with respect to 30 input cases.</li>\n<li> After the contest a system test will be performed. To this end, the contestant's <b>last submission</b> will be scored by summing the score of the submission on 100 previously unseen input cases.</li>\n<li> For each input case, the score is calculated as follows:\n<p style=\"text-align:center;\">\n    <var> \\text{Score} =\n    \\sum_{i \\in D} {(T_{\\text{max}})}^{2} - {(\\mathrm{waitingTime}_i)}^{2}, </var>\n</p>\nHere we use the following definitions:\n<ul>\n<li> <var> D </var> : the set of orders delivered until <var>t=T_{\\text{max}}</var></li>\n<li> the waiting time of the <var>i</var>th order: <var>\\mathrm{waitingTime}_i = \\mathrm{deliveredTime}_i - \\mathrm{orderedTime}_i</var>.</li>\n<li>Note that an input case giving the output <code>WA</code> will receive <var>0</var> points.</li>\n</ul>\n</li>\n</ul></section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Particulars of Problem A</h3>\n<p>In problem A we pass all orders which appear at time <var> 0 \\le t &lt; 0.95 \\times T_{\\text{max}} </var> as an input to the contestant code. The task is to provide an algorithm which optimizes the moves of the car such that the above score becomes maximal.</p>\n<hr>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Format</h3>\n<p>Input is provided in the following form:</p>\n<pre><var>|V|</var> <var>|E|</var>\n<var>u_{1}</var> <var>v_{1}</var> <var>d_{u_{1}, v_{1}}</var>\n<var>u_{2}</var> <var>v_{2}</var> <var>d_{u_{2}, v_{2}}</var>\n:\n<var>u_{|E|}</var> <var>v_{|E|}</var> <var>d_{u_{|E|}, v_{|E|}}</var>\n<var>T_{\\text{max}}</var>\n<var>\\mathrm{info}_{0}</var>\n<var>\\mathrm{info}_{1}</var>\n:\n<var>\\mathrm{info}_{T_{\\text{max}}-1}</var>\n</pre>\n\n<ul>\n<li> In the first line <var>|V|</var> denotes the number of vertices, while <var>|E|</var> denotes the number of edges.</li>\n<li> The following <var>|E|</var> lines denote the edges of the graph. In particular, in the <var>i</var>th line <var>u_{i}</var> and <var>v_{i}</var> denote the edge connecting <var>u_{i}</var> and <var>v_{i}</var> and <var>d_{u_{i}, v_{i}}</var> the corresponding distance.</li>\n<li> The following line denotes the number of steps <var>T_{\\text{max}}</var>.</li>\n</ul>\n\n<p>In the following line, <var>\\mathrm{info}_t</var> is information about the order from the customer that occurs at time <var>t</var>. <var>\\mathrm{info}_t</var> is given in the form:</p>\n\n<pre><var>N_{\\text{new}}</var>\n<var>\\mathrm{new\\_id}_1</var> <var>\\mathrm{dst}_1</var>\n<var>\\mathrm{new\\_id}_2</var> <var>\\mathrm{dst}_2</var>\n<var>\\vdots</var>\n<var>\\mathrm{new\\_id}_{N_{\\text{new}}}</var> <var>\\mathrm{dst}_{N_{\\text{new}}}</var>\n</pre>\n\n<ul>\n<li> <var>N_{\\text{new}}</var> represents the number of new orders which appear at time <var>t</var>.</li>\n<li> The next <var>N_{\\text{new}}</var> lines give the newly generated order information. The <var>i</var>-th order information indicates that the order ID <var>\\mathrm{new\\_{id}}_i</var> of the new order, while <var>\\mathrm{dst}_i</var>\ndenotes the vertex to which the customer wishes the order to be delivered.</li>\n<li> Note: If <var>N_{\\text{new}}=0</var>, there are no new lines. </li>\n</ul>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Requirements</h3>\n<ul>\n<li> All inputs are of non-negative integer value. </li>\n<li> <var>T_{\\text{max}} = 10000</var></li>\n<li> <var>200 \\leq |V| \\leq 400</var> </li>\n<li> <var>1.5 |V| \\leq |E| \\leq  2 |V|</var></li>\n<li><var>1 \\leq u_{i}, v_{i} \\leq |V|</var> <var>(1 \\leq i \\leq |E|)</var></li>\n<li><var>1 \\leq d_{u_i, v_i} \\leq \\lceil 4\\sqrt{2|V|} \\rceil</var> <var>(1 \\leq i \\leq |E|)</var></li>\n\n<li>The given graph has no self-loops / multiple edges and is guaranteed to be connected.</li>\n<li><var>0 \\leq N_{\\text{new}} \\leq 1</var></li>\n<li><var>1 \\leq \\mathrm{new\\_id}_{i} \\leq T_{\\text{last}}+1</var> <var>(1 \\leq i \\leq N_{\\text{new}})</var>. Note: If all orders are generated by the order generation rule as explained above, the total number of orders is at most <var>T_{\\text{last}}+1</var>. Therefore, the possible range of <var>\\mathrm{new\\_id}_{i}</var> should be from <var>1</var> to <var>T_{\\text{last}}+1</var>.</li>\n<li><var>2 \\leq \\mathrm{dst}_i \\leq |V|</var> <var>(1 \\leq i \\leq N_{\\text{new}})</var></li>\n<li>The order IDs <var>\\mathrm{new\\_{id}}_i</var> are unique. </li>\n</ul>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output Format</h3>\n<p>The Output expects <var>T_{\\text{max}}</var> integers in the format specified below.</p>\n<pre><var>\\mathrm{command}_{0}</var>\n<var>\\mathrm{command}_{1}</var>\n:\n<var>\\mathrm{command}_{T_{\\text{max}}-1}</var>\n</pre>\n\n<p>In particular, <var>\\mathrm{command}_{i}</var> shall specify the movement of the delivery car by using one of the following two options:</p>\n\n<p>1) <code>stay</code>, if the car shall not move:</p>\n<pre>-1\n</pre>\n\n<p>2) <code>move w</code>, if the car shall be moved one step towards the neighboring vertex <var>w</var></p>\n<pre>w\n</pre>\n\n<p>Note that in case of 2) <var>w</var> has to satisfy the following conditions:</p>\n<ul>\n<li><var>w \\in V</var></li>\n<li>If the car is at vertex <var>u</var>: <var>\\left\\{ u, w \\right\\} \\in E </var>.</li>\n<li>If the car is on the edge <var>\\left\\{ u, v \\right\\}</var>, <var>w</var> must either satisfy <var>u = w</var> or <var>v = w</var>.\n</li>\n</ul>\n\n<hr>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Input Example</h3>\n<pre>5 7\n1 2 5\n5 3 4\n2 4 8\n1 5 1\n2 3 3\n4 5 3\n4 3 9\n4\n1\n1 2\n1\n2 5\n1\n3 4\n0\n</pre>\n\n<p><strong>Note that this input is an example of small size and does not meet the constraints of the contest.</strong></p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Output Example</h3>\n<pre>2\n-1\n1\n5\n</pre>\n\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Explanation</h3>\n<p>The example operates on a graph with <var>|V| = 5</var> vertices, <var>|E| = 7</var> edges, and <var>T_{\\text{max}} = 4</var> time steps. We now describe the orders which have occured and the movement of the car.</p>\n<h4>Time <var>t=0</var></h4>\n<p>At time <var>t=0</var> an order is placed at the shop. This order has ID<var>= 1</var> and should be delivered to vertex <var> 2</var>. Because your car is currently at vertex one, the order will be automatically transfered into your car. In this way, when your car is at the shop, all orders which have been made at present and before, will automatically be loaded into your car.</p>\n<h4>Time <var>0</var> → <var>1</var></h4>\n<p>You choose to move towards vertex <code>move 2</code>. You will now move one step towards vertex 2.</p>\n<h4>Time <var>t=1</var></h4>\n<p>A new order has appeared. It has ID <var>=2</var> and shall be delivered at  vertex <var>5</var>.</p>\n<h4>Time <var>1</var> → <var>2</var></h4>\n<p>You decided to <code>stay</code>. You can now stay on the edge where you are.</p>\n<h4>Time <var>t=2</var></h4>\n<p>A new order has appeared. It has ID <var>=3</var> and shall be delivered at  vertex <var>4</var>.</p>\n<h4>Time <var>2</var> → <var>3</var></h4>\n<p>You decided to move <code>move 1</code> back to vertex 1.\nYou are approaching one step towards vertex 1.\nDoing a U-turn in this way is explicitly allowed.</p>\n<h4>Time <var>t=3</var></h4>\n<p>New orders have not occurred. Now that you are at the vertex <var> 1 </var> (store), the orders with order ID <var> 2, 3 </var> are loaded into your car. In a similar way, whenever you return to the store, all the orders that have already been placed are loaded into your car automatically.</p>\n<h4>Time <var>3</var> → <var>4</var></h4>\n<p>Being at vertex 1 you choose <code>move 5</code>. You are moving your car one step towards vertex <var>5</var>. You arrive at vertex <var>5</var>.</p>\n<h4>Time <var>t=4</var></h4>\n<p>Since you arrived at vertex <var>5</var>, the order with order ID <var>2</var> can be delivered.</p>\n</section>\n</div>\n\n<div class=\"part\">\n<section>\n<h3>Sample Code A</h3>\n<p>A software toolkit for generation of input samples, scoring and testing on a local contestant environment, and  sample codes for beginners\nis provided through the following <a href=\"https://img.atcoder.jp/hokudai-hitachi2019-1/5bc882a275d9543da1b79d9a670c6523.zip\">link</a>. In addition we provide <a href=\"https://img.atcoder.jp/hokudai-hitachi2019-1/d2dded0de70ff38cbb8aa6dbfb88dfc3.zip\">software for visualizing</a> the contestants results.</p></section>\n</div>\n</span>"},"endpoint":"https://atcoder.jp/contests/hokudai-hitachi2019-1/tasks/hokudai_hitachi2019_1_a"}